// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ecomevaluation.loading_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaFlex_2
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: loading Purpose: loading data to the data warehouse<br>
 * Description: loading data in the convenable order into the data warehouse
 * <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class loading implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ecom_eval_dw_Password != null) {

				this.setProperty("ecom_eval_dw_Password", ecom_eval_dw_Password.toString());

			}

			if (ecom_eval_dw_Login != null) {

				this.setProperty("ecom_eval_dw_Login", ecom_eval_dw_Login.toString());

			}

			if (ecom_eval_dw_Schema != null) {

				this.setProperty("ecom_eval_dw_Schema", ecom_eval_dw_Schema.toString());

			}

			if (ecom_eval_dw_AdditionalParams != null) {

				this.setProperty("ecom_eval_dw_AdditionalParams", ecom_eval_dw_AdditionalParams.toString());

			}

			if (ecom_eval_dw_Port != null) {

				this.setProperty("ecom_eval_dw_Port", ecom_eval_dw_Port.toString());

			}

			if (ecom_eval_dw_Server != null) {

				this.setProperty("ecom_eval_dw_Server", ecom_eval_dw_Server.toString());

			}

			if (ecom_eval_dw_Database != null) {

				this.setProperty("ecom_eval_dw_Database", ecom_eval_dw_Database.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public java.lang.String ecom_eval_dw_Password;

		public java.lang.String getEcom_eval_dw_Password() {
			return this.ecom_eval_dw_Password;
		}

		public String ecom_eval_dw_Login;

		public String getEcom_eval_dw_Login() {
			return this.ecom_eval_dw_Login;
		}

		public String ecom_eval_dw_Schema;

		public String getEcom_eval_dw_Schema() {
			return this.ecom_eval_dw_Schema;
		}

		public String ecom_eval_dw_AdditionalParams;

		public String getEcom_eval_dw_AdditionalParams() {
			return this.ecom_eval_dw_AdditionalParams;
		}

		public String ecom_eval_dw_Port;

		public String getEcom_eval_dw_Port() {
			return this.ecom_eval_dw_Port;
		}

		public String ecom_eval_dw_Server;

		public String getEcom_eval_dw_Server() {
			return this.ecom_eval_dw_Server;
		}

		public String ecom_eval_dw_Database;

		public String getEcom_eval_dw_Database() {
			return this.ecom_eval_dw_Database;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "loading";
	private final String projectName = "ECOMEVALUATION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					loading.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(loading.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tChronometerStop_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRollback_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError7", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError6", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError1", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError2", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError3", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError4", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError5", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_CustomerLookUp_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_ProductLookUp_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_SupplierLookUp_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_ChipperLookUp_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tRunJob_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		public Integer ProductPrice;

		public Integer getProductPrice() {
			return this.ProductPrice;
		}

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		public Integer QuantitySold;

		public Integer getQuantitySold() {
			return this.QuantitySold;
		}

		public Float TotalAmount;

		public Float getTotalAmount() {
			return this.TotalAmount;
		}

		public Float DiscountAmount;

		public Float getDiscountAmount() {
			return this.DiscountAmount;
		}

		public Float NetAmount;

		public Float getNetAmount() {
			return this.NetAmount;
		}

		public Integer StockReceived;

		public Integer getStockReceived() {
			return this.StockReceived;
		}

		public Integer StockSold;

		public Integer getStockSold() {
			return this.StockSold;
		}

		public Integer StockOnHand;

		public Integer getStockOnHand() {
			return this.StockOnHand;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date=" + String.valueOf(Date));
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append(",ProductPrice=" + String.valueOf(ProductPrice));
			sb.append(",HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append(",SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append(",ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append(",QuantitySold=" + String.valueOf(QuantitySold));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",DiscountAmount=" + String.valueOf(DiscountAmount));
			sb.append(",NetAmount=" + String.valueOf(NetAmount));
			sb.append(",StockReceived=" + String.valueOf(StockReceived));
			sb.append(",StockSold=" + String.valueOf(StockSold));
			sb.append(",StockOnHand=" + String.valueOf(StockOnHand));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tHashOutput_1 begin ] start
				 */

				ok_Hash.put("tHashOutput_1", false);
				start_Hash.put("tHashOutput_1", System.currentTimeMillis());

				currentComponent = "tHashOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tHashOutput_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashOutput_1 = null;
				String hashKey_tHashOutput_1 = "tHashFile_loading_" + pid + "_tHashOutput_1";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_1)) {
					if (mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null) {
						mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
					} else {
						tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
					}
				}
				int nb_line_tHashOutput_1 = 0;

				/**
				 * [tHashOutput_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_1.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_1 = null;

				ecomevaluation.transformation_0_1.transformation childJob_tRunJob_1 = new ecomevaluation.transformation_0_1.transformation();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_1.getErrorCode();
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
					java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1 != null)
							? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage())
							: ""));
				}
				for (String[] item_tRunJob_1 : childReturn_tRunJob_1) {
					if (childJob_tRunJob_1.hastBufferOutputComponent() || true) {

						if (0 < item_tRunJob_1.length) {

							row2.Date = ParserUtils.parseTo_Date(item_tRunJob_1[0], "dd-MM-yyyy");

						} else {
							row2.Date = null;
						}

						if (1 < item_tRunJob_1.length) {

							row2.ProductName = item_tRunJob_1[1];

						} else {
							row2.ProductName = null;
						}

						if (2 < item_tRunJob_1.length) {

							row2.ProductCategory = item_tRunJob_1[2];

						} else {
							row2.ProductCategory = null;
						}

						if (3 < item_tRunJob_1.length) {

							row2.ProductSubCategory = item_tRunJob_1[3];

						} else {
							row2.ProductSubCategory = null;
						}

						if (4 < item_tRunJob_1.length) {

							row2.ProductPrice = ParserUtils.parseTo_Integer(item_tRunJob_1[4]);

						} else {
							row2.ProductPrice = null;
						}

						if (5 < item_tRunJob_1.length) {

							row2.HashedPI = item_tRunJob_1[5];

						} else {
							row2.HashedPI = null;
						}

						if (6 < item_tRunJob_1.length) {

							row2.CustomerState = item_tRunJob_1[6];

						} else {
							row2.CustomerState = null;
						}

						if (7 < item_tRunJob_1.length) {

							row2.CustomerSegment = item_tRunJob_1[7];

						} else {
							row2.CustomerSegment = null;
						}

						if (8 < item_tRunJob_1.length) {

							row2.SupplierName = item_tRunJob_1[8];

						} else {
							row2.SupplierName = null;
						}

						if (9 < item_tRunJob_1.length) {

							row2.SupplierLocation = item_tRunJob_1[9];

						} else {
							row2.SupplierLocation = null;
						}

						if (10 < item_tRunJob_1.length) {

							row2.ShipperName = item_tRunJob_1[10];

						} else {
							row2.ShipperName = null;
						}

						if (11 < item_tRunJob_1.length) {

							row2.ShippingMethod = item_tRunJob_1[11];

						} else {
							row2.ShippingMethod = null;
						}

						if (12 < item_tRunJob_1.length) {

							row2.QuantitySold = ParserUtils.parseTo_Integer(item_tRunJob_1[12]);

						} else {
							row2.QuantitySold = null;
						}

						if (13 < item_tRunJob_1.length) {

							row2.TotalAmount = ParserUtils.parseTo_Float(item_tRunJob_1[13]);

						} else {
							row2.TotalAmount = null;
						}

						if (14 < item_tRunJob_1.length) {

							row2.DiscountAmount = ParserUtils.parseTo_Float(item_tRunJob_1[14]);

						} else {
							row2.DiscountAmount = null;
						}

						if (15 < item_tRunJob_1.length) {

							row2.NetAmount = ParserUtils.parseTo_Float(item_tRunJob_1[15]);

						} else {
							row2.NetAmount = null;
						}

						if (16 < item_tRunJob_1.length) {

							row2.StockReceived = ParserUtils.parseTo_Integer(item_tRunJob_1[16]);

						} else {
							row2.StockReceived = null;
						}

						if (17 < item_tRunJob_1.length) {

							row2.StockSold = ParserUtils.parseTo_Integer(item_tRunJob_1[17]);

						} else {
							row2.StockSold = null;
						}

						if (18 < item_tRunJob_1.length) {

							row2.StockOnHand = ParserUtils.parseTo_Integer(item_tRunJob_1[18]);

						} else {
							row2.StockOnHand = null;
						}

					}

					tos_count_tRunJob_1++;

					/**
					 * [tRunJob_1 main ] stop
					 */

					/**
					 * [tRunJob_1 process_data_begin ] start
					 */

					currentComponent = "tRunJob_1";

					/**
					 * [tRunJob_1 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_1 main ] start
					 */

					currentComponent = "tHashOutput_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row2"

						);
					}

					row2Struct oneRow_tHashOutput_1 = new row2Struct();

					oneRow_tHashOutput_1.Date = row2.Date;
					oneRow_tHashOutput_1.ProductName = row2.ProductName;
					oneRow_tHashOutput_1.ProductCategory = row2.ProductCategory;
					oneRow_tHashOutput_1.ProductSubCategory = row2.ProductSubCategory;
					oneRow_tHashOutput_1.ProductPrice = row2.ProductPrice;
					oneRow_tHashOutput_1.HashedPI = row2.HashedPI;
					oneRow_tHashOutput_1.CustomerState = row2.CustomerState;
					oneRow_tHashOutput_1.CustomerSegment = row2.CustomerSegment;
					oneRow_tHashOutput_1.SupplierName = row2.SupplierName;
					oneRow_tHashOutput_1.SupplierLocation = row2.SupplierLocation;
					oneRow_tHashOutput_1.ShipperName = row2.ShipperName;
					oneRow_tHashOutput_1.ShippingMethod = row2.ShippingMethod;
					oneRow_tHashOutput_1.QuantitySold = row2.QuantitySold;
					oneRow_tHashOutput_1.TotalAmount = row2.TotalAmount;
					oneRow_tHashOutput_1.DiscountAmount = row2.DiscountAmount;
					oneRow_tHashOutput_1.NetAmount = row2.NetAmount;
					oneRow_tHashOutput_1.StockReceived = row2.StockReceived;
					oneRow_tHashOutput_1.StockSold = row2.StockSold;
					oneRow_tHashOutput_1.StockOnHand = row2.StockOnHand;

					tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
					nb_line_tHashOutput_1++;

					tos_count_tHashOutput_1++;

					/**
					 * [tHashOutput_1 main ] stop
					 */

					/**
					 * [tHashOutput_1 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_1";

					/**
					 * [tHashOutput_1 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_1 process_data_end ] start
					 */

					currentComponent = "tHashOutput_1";

					/**
					 * [tHashOutput_1 process_data_end ] stop
					 */

				} // C_01

				/**
				 * [tRunJob_1 process_data_end ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */

				/**
				 * [tHashOutput_1 end ] start
				 */

				currentComponent = "tHashOutput_1";

				globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tHashOutput_1", true);
				end_Hash.put("tHashOutput_1", System.currentTimeMillis());

				/**
				 * [tHashOutput_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

				/**
				 * [tHashOutput_1 finally ] start
				 */

				currentComponent = "tHashOutput_1";

				/**
				 * [tHashOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + context.ecom_eval_dw_Server;
				String port_tDBConnection_1 = context.ecom_eval_dw_Port;
				String dbname_tDBConnection_1 = context.ecom_eval_dw_Database;
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":" + context.ecom_eval_dw_Port;
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += "//" + context.ecom_eval_dw_Database;
				}

				url_tDBConnection_1 += ";appName=" + projectName + ";" + context.ecom_eval_dw_AdditionalParams;
				String dbUser_tDBConnection_1 = context.ecom_eval_dw_Login;

				final String decryptedPassword_tDBConnection_1 = context.ecom_eval_dw_Password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("dbschema_tDBConnection_1", context.ecom_eval_dw_Schema);

				globalMap.put("db_tDBConnection_1", context.ecom_eval_dw_Database);

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				globalMap.put("driver_tDBConnection_1", "JTDS");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tRunJob_2Process(globalMap);

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_2.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				ecomevaluation.sales_dm_0_1.sales_DM childJob_tRunJob_2 = new ecomevaluation.sales_dm_0_1.sales_DM();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}

				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_2.getErrorCode();
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
					java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2 != null)
							? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage())
							: ""));
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 process_data_begin ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_2 process_data_end ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_end ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tRunJob_3Process(globalMap);

				/**
				 * [tRunJob_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_3.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_3 = null;

				ecomevaluation.inventory_dm_0_1.inventory_DM childJob_tRunJob_3 = new ecomevaluation.inventory_dm_0_1.inventory_DM();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_3.getErrorCode();
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
					java.lang.Exception ce_tRunJob_3 = childJob_tRunJob_3.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_3 != null)
							? (ce_tRunJob_3.getClass().getName() + ": " + ce_tRunJob_3.getMessage())
							: ""));
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 process_data_begin ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_3 process_data_end ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_end ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tChronometerStop_1Process(globalMap);

				/**
				 * [tRunJob_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tChronometerStop_1 begin ] start
				 */

				ok_Hash.put("tChronometerStop_1", false);
				start_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				currentComponent = "tChronometerStop_1";

				int tos_count_tChronometerStop_1 = 0;

				long timetChronometerStop_1;

				timetChronometerStop_1 = System.currentTimeMillis() - startTime;

				System.out.print("[ tChronometerStop_1 ]  ");

				System.out.print("   " + timetChronometerStop_1 / 1000 + "seconds   ");

				System.out.println("" + "  " + timetChronometerStop_1 + " milliseconds");

				Long currentTimetChronometerStop_1 = System.currentTimeMillis();
				globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);

				globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
				globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);

				/**
				 * [tChronometerStop_1 begin ] stop
				 */

				/**
				 * [tChronometerStop_1 main ] start
				 */

				currentComponent = "tChronometerStop_1";

				tos_count_tChronometerStop_1++;

				/**
				 * [tChronometerStop_1 main ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_begin ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_begin ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_end ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_end ] stop
				 */

				/**
				 * [tChronometerStop_1 end ] start
				 */

				currentComponent = "tChronometerStop_1";

				ok_Hash.put("tChronometerStop_1", true);
				end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				/**
				 * [tChronometerStop_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tChronometerStop_1 finally ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRollback_1 begin ] start
				 */

				ok_Hash.put("tDBRollback_1", false);
				start_Hash.put("tDBRollback_1", System.currentTimeMillis());

				currentComponent = "tDBRollback_1";

				int tos_count_tDBRollback_1 = 0;

				/**
				 * [tDBRollback_1 begin ] stop
				 */

				/**
				 * [tDBRollback_1 main ] start
				 */

				currentComponent = "tDBRollback_1";

				java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {

					conn_tDBRollback_1.rollback();

				}

				tos_count_tDBRollback_1++;

				/**
				 * [tDBRollback_1 main ] stop
				 */

				/**
				 * [tDBRollback_1 process_data_begin ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRollback_1 process_data_end ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 process_data_end ] stop
				 */

				/**
				 * [tDBRollback_1 end ] start
				 */

				currentComponent = "tDBRollback_1";

				ok_Hash.put("tDBRollback_1", true);
				end_Hash.put("tDBRollback_1", System.currentTimeMillis());

				/**
				 * [tDBRollback_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRollback_1 finally ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}

	public static class InventoryFactStruct implements routines.system.IPersistableRow<InventoryFactStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int InventoryID;

		public int getInventoryID() {
			return this.InventoryID;
		}

		public Integer StockReceived;

		public Integer getStockReceived() {
			return this.StockReceived;
		}

		public Integer StockSold;

		public Integer getStockSold() {
			return this.StockSold;
		}

		public Integer StockOnHand;

		public Integer getStockOnHand() {
			return this.StockOnHand;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public int SupplierID;

		public int getSupplierID() {
			return this.SupplierID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.InventoryID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final InventoryFactStruct other = (InventoryFactStruct) obj;

			if (this.InventoryID != other.InventoryID)
				return false;

			return true;
		}

		public void copyDataTo(InventoryFactStruct other) {

			other.InventoryID = this.InventoryID;
			other.StockReceived = this.StockReceived;
			other.StockSold = this.StockSold;
			other.StockOnHand = this.StockOnHand;
			other.Date = this.Date;
			other.ProductID = this.ProductID;
			other.SupplierID = this.SupplierID;

		}

		public void copyKeysDataTo(InventoryFactStruct other) {

			other.InventoryID = this.InventoryID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.InventoryID = dis.readInt();

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.SupplierID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.InventoryID = dis.readInt();

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.SupplierID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.InventoryID);

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.SupplierID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.InventoryID);

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.SupplierID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("InventoryID=" + String.valueOf(InventoryID));
			sb.append(",StockReceived=" + String.valueOf(StockReceived));
			sb.append(",StockSold=" + String.valueOf(StockSold));
			sb.append(",StockOnHand=" + String.valueOf(StockOnHand));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",SupplierID=" + String.valueOf(SupplierID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(InventoryFactStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.InventoryID, other.InventoryID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public Integer StockReceived;

		public Integer getStockReceived() {
			return this.StockReceived;
		}

		public Integer StockSold;

		public Integer getStockSold() {
			return this.StockSold;
		}

		public Integer StockOnHand;

		public Integer getStockOnHand() {
			return this.StockOnHand;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public int SupplierID;

		public int getSupplierID() {
			return this.SupplierID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.SupplierID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.SupplierID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.SupplierID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.SupplierID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StockReceived=" + String.valueOf(StockReceived));
			sb.append(",StockSold=" + String.valueOf(StockSold));
			sb.append(",StockOnHand=" + String.valueOf(StockOnHand));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",SupplierID=" + String.valueOf(SupplierID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SalesFactStruct implements routines.system.IPersistableRow<SalesFactStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesID;

		public int getSalesID() {
			return this.SalesID;
		}

		public Integer ProductPrice;

		public Integer getProductPrice() {
			return this.ProductPrice;
		}

		public Integer QuantitySold;

		public Integer getQuantitySold() {
			return this.QuantitySold;
		}

		public Float TotalAmount;

		public Float getTotalAmount() {
			return this.TotalAmount;
		}

		public Float DiscountAmount;

		public Float getDiscountAmount() {
			return this.DiscountAmount;
		}

		public Float NetAmount;

		public Float getNetAmount() {
			return this.NetAmount;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public int ShipperID;

		public int getShipperID() {
			return this.ShipperID;
		}

		public Integer CustomerID;

		public Integer getCustomerID() {
			return this.CustomerID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final SalesFactStruct other = (SalesFactStruct) obj;

			if (this.SalesID != other.SalesID)
				return false;

			return true;
		}

		public void copyDataTo(SalesFactStruct other) {

			other.SalesID = this.SalesID;
			other.ProductPrice = this.ProductPrice;
			other.QuantitySold = this.QuantitySold;
			other.TotalAmount = this.TotalAmount;
			other.DiscountAmount = this.DiscountAmount;
			other.NetAmount = this.NetAmount;
			other.Date = this.Date;
			other.ProductID = this.ProductID;
			other.ShipperID = this.ShipperID;
			other.CustomerID = this.CustomerID;

		}

		public void copyKeysDataTo(SalesFactStruct other) {

			other.SalesID = this.SalesID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.SalesID = dis.readInt();

					this.ProductPrice = readInteger(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.ShipperID = dis.readInt();

					this.CustomerID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.SalesID = dis.readInt();

					this.ProductPrice = readInteger(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.ShipperID = dis.readInt();

					this.CustomerID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesID);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.ShipperID);

				// Integer

				writeInteger(this.CustomerID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.SalesID);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.ShipperID);

				// Integer

				writeInteger(this.CustomerID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesID=" + String.valueOf(SalesID));
			sb.append(",ProductPrice=" + String.valueOf(ProductPrice));
			sb.append(",QuantitySold=" + String.valueOf(QuantitySold));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",DiscountAmount=" + String.valueOf(DiscountAmount));
			sb.append(",NetAmount=" + String.valueOf(NetAmount));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",ShipperID=" + String.valueOf(ShipperID));
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SalesFactStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesID, other.SalesID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public Integer ProductPrice;

		public Integer getProductPrice() {
			return this.ProductPrice;
		}

		public Integer QuantitySold;

		public Integer getQuantitySold() {
			return this.QuantitySold;
		}

		public Float TotalAmount;

		public Float getTotalAmount() {
			return this.TotalAmount;
		}

		public Float DiscountAmount;

		public Float getDiscountAmount() {
			return this.DiscountAmount;
		}

		public Float NetAmount;

		public Float getNetAmount() {
			return this.NetAmount;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public int ShipperID;

		public int getShipperID() {
			return this.ShipperID;
		}

		public Integer CustomerID;

		public Integer getCustomerID() {
			return this.CustomerID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductPrice = readInteger(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.ShipperID = dis.readInt();

					this.CustomerID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductPrice = readInteger(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.ShipperID = dis.readInt();

					this.CustomerID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ProductPrice, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.ShipperID);

				// Integer

				writeInteger(this.CustomerID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ProductPrice, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.ShipperID);

				// Integer

				writeInteger(this.CustomerID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductPrice=" + String.valueOf(ProductPrice));
			sb.append(",QuantitySold=" + String.valueOf(QuantitySold));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",DiscountAmount=" + String.valueOf(DiscountAmount));
			sb.append(",NetAmount=" + String.valueOf(NetAmount));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",ShipperID=" + String.valueOf(ShipperID));
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class FactSalesStruct implements routines.system.IPersistableRow<FactSalesStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public Integer ProductPrice;

		public Integer getProductPrice() {
			return this.ProductPrice;
		}

		public Integer QuantitySold;

		public Integer getQuantitySold() {
			return this.QuantitySold;
		}

		public Float TotalAmount;

		public Float getTotalAmount() {
			return this.TotalAmount;
		}

		public Float DiscountAmount;

		public Float getDiscountAmount() {
			return this.DiscountAmount;
		}

		public Float NetAmount;

		public Float getNetAmount() {
			return this.NetAmount;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public int ShipperID;

		public int getShipperID() {
			return this.ShipperID;
		}

		public Integer CustomerID;

		public Integer getCustomerID() {
			return this.CustomerID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductPrice = readInteger(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.ShipperID = dis.readInt();

					this.CustomerID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductPrice = readInteger(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.ShipperID = dis.readInt();

					this.CustomerID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ProductPrice, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.ShipperID);

				// Integer

				writeInteger(this.CustomerID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ProductPrice, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.ShipperID);

				// Integer

				writeInteger(this.CustomerID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductPrice=" + String.valueOf(ProductPrice));
			sb.append(",QuantitySold=" + String.valueOf(QuantitySold));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",DiscountAmount=" + String.valueOf(DiscountAmount));
			sb.append(",NetAmount=" + String.valueOf(NetAmount));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",ShipperID=" + String.valueOf(ShipperID));
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FactSalesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class FactInventoryStruct implements routines.system.IPersistableRow<FactInventoryStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public Integer StockReceived;

		public Integer getStockReceived() {
			return this.StockReceived;
		}

		public Integer StockSold;

		public Integer getStockSold() {
			return this.StockSold;
		}

		public Integer StockOnHand;

		public Integer getStockOnHand() {
			return this.StockOnHand;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public int SupplierID;

		public int getSupplierID() {
			return this.SupplierID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.SupplierID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

					this.Date = readDate(dis);

					this.ProductID = dis.readInt();

					this.SupplierID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.SupplierID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.SupplierID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StockReceived=" + String.valueOf(StockReceived));
			sb.append(",StockSold=" + String.valueOf(StockSold));
			sb.append(",StockOnHand=" + String.valueOf(StockOnHand));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",SupplierID=" + String.valueOf(SupplierID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FactInventoryStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		public Integer ProductPrice;

		public Integer getProductPrice() {
			return this.ProductPrice;
		}

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		public Integer QuantitySold;

		public Integer getQuantitySold() {
			return this.QuantitySold;
		}

		public Float TotalAmount;

		public Float getTotalAmount() {
			return this.TotalAmount;
		}

		public Float DiscountAmount;

		public Float getDiscountAmount() {
			return this.DiscountAmount;
		}

		public Float NetAmount;

		public Float getNetAmount() {
			return this.NetAmount;
		}

		public Integer StockReceived;

		public Integer getStockReceived() {
			return this.StockReceived;
		}

		public Integer StockSold;

		public Integer getStockSold() {
			return this.StockSold;
		}

		public Integer StockOnHand;

		public Integer getStockOnHand() {
			return this.StockOnHand;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date=" + String.valueOf(Date));
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append(",ProductPrice=" + String.valueOf(ProductPrice));
			sb.append(",HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append(",SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append(",ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append(",QuantitySold=" + String.valueOf(QuantitySold));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",DiscountAmount=" + String.valueOf(DiscountAmount));
			sb.append(",NetAmount=" + String.valueOf(NetAmount));
			sb.append(",StockReceived=" + String.valueOf(StockReceived));
			sb.append(",StockSold=" + String.valueOf(StockSold));
			sb.append(",StockOnHand=" + String.valueOf(StockOnHand));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		public Integer ProductPrice;

		public Integer getProductPrice() {
			return this.ProductPrice;
		}

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		public Integer QuantitySold;

		public Integer getQuantitySold() {
			return this.QuantitySold;
		}

		public Float TotalAmount;

		public Float getTotalAmount() {
			return this.TotalAmount;
		}

		public Float DiscountAmount;

		public Float getDiscountAmount() {
			return this.DiscountAmount;
		}

		public Float NetAmount;

		public Float getNetAmount() {
			return this.NetAmount;
		}

		public Integer StockReceived;

		public Integer getStockReceived() {
			return this.StockReceived;
		}

		public Integer StockSold;

		public Integer getStockSold() {
			return this.StockSold;
		}

		public Integer StockOnHand;

		public Integer getStockOnHand() {
			return this.StockOnHand;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date=" + String.valueOf(Date));
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append(",ProductPrice=" + String.valueOf(ProductPrice));
			sb.append(",HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append(",SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append(",ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append(",QuantitySold=" + String.valueOf(QuantitySold));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",DiscountAmount=" + String.valueOf(DiscountAmount));
			sb.append(",NetAmount=" + String.valueOf(NetAmount));
			sb.append(",StockReceived=" + String.valueOf(StockReceived));
			sb.append(",StockSold=" + String.valueOf(StockSold));
			sb.append(",StockOnHand=" + String.valueOf(StockOnHand));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_1Process(globalMap);
				tHashInput_6Process(globalMap);
				tHashInput_2Process(globalMap);
				tHashInput_3Process(globalMap);

				row10Struct row10 = new row10Struct();
				FactSalesStruct FactSales = new FactSalesStruct();
				row16Struct row16 = new row16Struct();
				SalesFactStruct SalesFact = new SalesFactStruct();
				FactInventoryStruct FactInventory = new FactInventoryStruct();
				row15Struct row15 = new row15Struct();
				InventoryFactStruct InventoryFact = new InventoryFactStruct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SalesFact");
				}

				int tos_count_tDBOutput_7 = 0;

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rowsToCommitCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;
				String dbschema_tDBOutput_7 = null;
				String tableName_tDBOutput_7 = null;
				boolean whetherReject_tDBOutput_7 = false;

				java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar.getInstance();
				long year1_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_7;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_7 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_7 = 1;
				if (updateKeyCount_tDBOutput_7 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_7 == 10 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_7 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = "FactSales";
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "].[" + "FactSales";
				}
				int count_tDBOutput_7 = 0;

				boolean whetherExist_tDBOutput_7 = false;
				try (java.sql.Statement isExistStmt_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
					try {
						isExistStmt_tDBOutput_7.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_7 + "]");
						whetherExist_tDBOutput_7 = true;
					} catch (java.lang.Exception e) {
						globalMap.put("tDBOutput_7_ERROR_MESSAGE", e.getMessage());
						whetherExist_tDBOutput_7 = false;
					}
				}
				if (!whetherExist_tDBOutput_7) {
					try (java.sql.Statement stmtCreate_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
						stmtCreate_tDBOutput_7.execute("CREATE TABLE [" + tableName_tDBOutput_7
								+ "]([SalesID] INT  not null ,[ProductPrice] INT ,[QuantitySold] INT ,[TotalAmount] REAL ,[DiscountAmount] REAL ,[NetAmount] REAL ,[Date] DATE  not null ,[ProductID] INT  not null ,[ShipperID] INT  not null ,[CustomerID] INT  not null ,primary key([SalesID]))");
					}
				}
				String update_tDBOutput_7 = "UPDATE [" + tableName_tDBOutput_7
						+ "] SET [ProductPrice] = ?,[QuantitySold] = ?,[TotalAmount] = ?,[DiscountAmount] = ?,[NetAmount] = ?,[Date] = ?,[ProductID] = ?,[ShipperID] = ?,[CustomerID] = ? WHERE [SalesID] = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(update_tDBOutput_7);
				resourceMap.put("pstmtUpdate_tDBOutput_7", pstmtUpdate_tDBOutput_7);
				String insert_tDBOutput_7 = "INSERT INTO [" + tableName_tDBOutput_7
						+ "] ([SalesID],[ProductPrice],[QuantitySold],[TotalAmount],[DiscountAmount],[NetAmount],[Date],[ProductID],[ShipperID],[CustomerID]) VALUES (?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmtInsert_tDBOutput_7", pstmtInsert_tDBOutput_7);
				boolean isShareIdentity_tDBOutput_7 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tMap_13 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_13__Struct {
					int SalesID;
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SalesFactStruct SalesFact_tmp = new SalesFactStruct();
// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tUniqRow_6 begin ] start
				 */

				ok_Hash.put("tUniqRow_6", false);
				start_Hash.put("tUniqRow_6", System.currentTimeMillis());

				currentComponent = "tUniqRow_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "FactSales");
				}

				int tos_count_tUniqRow_6 = 0;

				class KeyStruct_tUniqRow_6 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date Date;
					int ProductID;
					int ShipperID;
					Integer CustomerID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

							result = prime * result + (int) this.ProductID;

							result = prime * result + (int) this.ShipperID;

							result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;

						if (this.Date == null) {
							if (other.Date != null)
								return false;

						} else if (!this.Date.equals(other.Date))

							return false;

						if (this.ProductID != other.ProductID)
							return false;

						if (this.ShipperID != other.ShipperID)
							return false;

						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;

						} else if (!this.CustomerID.equals(other.CustomerID))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_6 = 0;
				int nb_duplicates_tUniqRow_6 = 0;
				KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
				java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>();

				/**
				 * [tUniqRow_6 begin ] stop
				 */

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "InventoryFact");
				}

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rowsToCommitCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;
				String dbschema_tDBOutput_6 = null;
				String tableName_tDBOutput_6 = null;
				boolean whetherReject_tDBOutput_6 = false;

				java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar.getInstance();
				long year1_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_6;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_6 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_6 = 1;
				if (updateKeyCount_tDBOutput_6 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_6 == 7 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbUser_tDBOutput_6 = null;
				dbschema_tDBOutput_6 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = "FactInventory";
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "].[" + "FactInventory";
				}
				int count_tDBOutput_6 = 0;

				boolean whetherExist_tDBOutput_6 = false;
				try (java.sql.Statement isExistStmt_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
					try {
						isExistStmt_tDBOutput_6.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_6 + "]");
						whetherExist_tDBOutput_6 = true;
					} catch (java.lang.Exception e) {
						globalMap.put("tDBOutput_6_ERROR_MESSAGE", e.getMessage());
						whetherExist_tDBOutput_6 = false;
					}
				}
				if (!whetherExist_tDBOutput_6) {
					try (java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
						stmtCreate_tDBOutput_6.execute("CREATE TABLE [" + tableName_tDBOutput_6
								+ "]([InventoryID] INT  not null ,[StockReceived] INT ,[StockSold] INT ,[StockOnHand] INT ,[Date] DATE ,[ProductID] INT  not null ,[SupplierID] INT  not null ,primary key([InventoryID]))");
					}
				}
				String update_tDBOutput_6 = "UPDATE [" + tableName_tDBOutput_6
						+ "] SET [StockReceived] = ?,[StockSold] = ?,[StockOnHand] = ?,[Date] = ?,[ProductID] = ?,[SupplierID] = ? WHERE [InventoryID] = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(update_tDBOutput_6);
				resourceMap.put("pstmtUpdate_tDBOutput_6", pstmtUpdate_tDBOutput_6);
				String insert_tDBOutput_6 = "INSERT INTO [" + tableName_tDBOutput_6
						+ "] ([InventoryID],[StockReceived],[StockSold],[StockOnHand],[Date],[ProductID],[SupplierID]) VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmtInsert_tDBOutput_6", pstmtInsert_tDBOutput_6);
				boolean isShareIdentity_tDBOutput_6 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tMap_12 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_12__Struct {
					int InventoryID;
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
				InventoryFactStruct InventoryFact_tmp = new InventoryFactStruct();
// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tUniqRow_5 begin ] start
				 */

				ok_Hash.put("tUniqRow_5", false);
				start_Hash.put("tUniqRow_5", System.currentTimeMillis());

				currentComponent = "tUniqRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "FactInventory");
				}

				int tos_count_tUniqRow_5 = 0;

				class KeyStruct_tUniqRow_5 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date Date;
					int ProductID;
					int SupplierID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

							result = prime * result + (int) this.ProductID;

							result = prime * result + (int) this.SupplierID;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

						if (this.Date == null) {
							if (other.Date != null)
								return false;

						} else if (!this.Date.equals(other.Date))

							return false;

						if (this.ProductID != other.ProductID)
							return false;

						if (this.SupplierID != other.SupplierID)
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_5 = 0;
				int nb_duplicates_tUniqRow_5 = 0;
				KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
				java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

				/**
				 * [tUniqRow_5 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ChipperLookUpStruct> tHash_Lookup_ChipperLookUp = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ChipperLookUpStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ChipperLookUpStruct>) globalMap
						.get("tHash_Lookup_ChipperLookUp"));

				ChipperLookUpStruct ChipperLookUpHashKey = new ChipperLookUpStruct();
				ChipperLookUpStruct ChipperLookUpDefault = new ChipperLookUpStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SupplierLookUpStruct> tHash_Lookup_SupplierLookUp = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SupplierLookUpStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SupplierLookUpStruct>) globalMap
						.get("tHash_Lookup_SupplierLookUp"));

				SupplierLookUpStruct SupplierLookUpHashKey = new SupplierLookUpStruct();
				SupplierLookUpStruct SupplierLookUpDefault = new SupplierLookUpStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductLookUpStruct> tHash_Lookup_ProductLookUp = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductLookUpStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductLookUpStruct>) globalMap
						.get("tHash_Lookup_ProductLookUp"));

				ProductLookUpStruct ProductLookUpHashKey = new ProductLookUpStruct();
				ProductLookUpStruct ProductLookUpDefault = new ProductLookUpStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CustomerLookUpStruct> tHash_Lookup_CustomerLookUp = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CustomerLookUpStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CustomerLookUpStruct>) globalMap
						.get("tHash_Lookup_CustomerLookUp"));

				CustomerLookUpStruct CustomerLookUpHashKey = new CustomerLookUpStruct();
				CustomerLookUpStruct CustomerLookUpDefault = new CustomerLookUpStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				FactSalesStruct FactSales_tmp = new FactSalesStruct();
				FactInventoryStruct FactInventory_tmp = new FactInventoryStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tHashInput_4 begin ] start
				 */

				ok_Hash.put("tHashInput_4", false);
				start_Hash.put("tHashInput_4", System.currentTimeMillis());

				currentComponent = "tHashInput_4";

				int tos_count_tHashInput_4 = 0;

				int nb_line_tHashInput_4 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_4 = mf_tHashInput_4
						.getAdvancedMemoryHashFile("tHashFile_loading_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_4 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row2Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
				while (iterator_tHashInput_4.hasNext()) {
					row2Struct next_tHashInput_4 = iterator_tHashInput_4.next();

					row10.Date = next_tHashInput_4.Date;
					row10.ProductName = next_tHashInput_4.ProductName;
					row10.ProductCategory = next_tHashInput_4.ProductCategory;
					row10.ProductSubCategory = next_tHashInput_4.ProductSubCategory;
					row10.ProductPrice = next_tHashInput_4.ProductPrice;
					row10.HashedPI = next_tHashInput_4.HashedPI;
					row10.CustomerState = next_tHashInput_4.CustomerState;
					row10.CustomerSegment = next_tHashInput_4.CustomerSegment;
					row10.SupplierName = next_tHashInput_4.SupplierName;
					row10.SupplierLocation = next_tHashInput_4.SupplierLocation;
					row10.ShipperName = next_tHashInput_4.ShipperName;
					row10.ShippingMethod = next_tHashInput_4.ShippingMethod;
					row10.QuantitySold = next_tHashInput_4.QuantitySold;
					row10.TotalAmount = next_tHashInput_4.TotalAmount;
					row10.DiscountAmount = next_tHashInput_4.DiscountAmount;
					row10.NetAmount = next_tHashInput_4.NetAmount;
					row10.StockReceived = next_tHashInput_4.StockReceived;
					row10.StockSold = next_tHashInput_4.StockSold;
					row10.StockOnHand = next_tHashInput_4.StockOnHand;

					/**
					 * [tHashInput_4 begin ] stop
					 */

					/**
					 * [tHashInput_4 main ] start
					 */

					currentComponent = "tHashInput_4";

					tos_count_tHashInput_4++;

					/**
					 * [tHashInput_4 main ] stop
					 */

					/**
					 * [tHashInput_4 process_data_begin ] start
					 */

					currentComponent = "tHashInput_4";

					/**
					 * [tHashInput_4 process_data_begin ] stop
					 */

					/**
					 * [tMap_6 main ] start
					 */

					currentComponent = "tMap_6";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row10"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_6 = false;
					boolean mainRowRejected_tMap_6 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "ChipperLookUp"
					///////////////////////////////////////////////

					boolean forceLoopChipperLookUp = false;

					ChipperLookUpStruct ChipperLookUpObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_6 = false;

						ChipperLookUpHashKey.ShipperName = row10.ShipperName;

						ChipperLookUpHashKey.ShippingMethod = row10.ShippingMethod;

						ChipperLookUpHashKey.hashCodeDirty = true;

						tHash_Lookup_ChipperLookUp.lookup(ChipperLookUpHashKey);

					} // G_TM_M_020

					if (tHash_Lookup_ChipperLookUp != null
							&& tHash_Lookup_ChipperLookUp.getCount(ChipperLookUpHashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'ChipperLookUp' and it contains more one result from keys :
						// ChipperLookUp.ShipperName = '" + ChipperLookUpHashKey.ShipperName + "',
						// ChipperLookUp.ShippingMethod = '" + ChipperLookUpHashKey.ShippingMethod +
						// "'");
					} // G 071

					ChipperLookUpStruct ChipperLookUp = null;

					ChipperLookUpStruct fromLookup_ChipperLookUp = null;
					ChipperLookUp = ChipperLookUpDefault;

					if (tHash_Lookup_ChipperLookUp != null && tHash_Lookup_ChipperLookUp.hasNext()) { // G 099

						fromLookup_ChipperLookUp = tHash_Lookup_ChipperLookUp.next();

					} // G 099

					if (fromLookup_ChipperLookUp != null) {
						ChipperLookUp = fromLookup_ChipperLookUp;
					}

					///////////////////////////////////////////////
					// Starting Lookup Table "SupplierLookUp"
					///////////////////////////////////////////////

					boolean forceLoopSupplierLookUp = false;

					SupplierLookUpStruct SupplierLookUpObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_6 = false;

						SupplierLookUpHashKey.SupplierName = row10.SupplierName;

						SupplierLookUpHashKey.SupplierLocation = row10.SupplierLocation;

						SupplierLookUpHashKey.hashCodeDirty = true;

						tHash_Lookup_SupplierLookUp.lookup(SupplierLookUpHashKey);

					} // G_TM_M_020

					if (tHash_Lookup_SupplierLookUp != null
							&& tHash_Lookup_SupplierLookUp.getCount(SupplierLookUpHashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'SupplierLookUp' and it contains more one result from keys :
						// SupplierLookUp.SupplierName = '" + SupplierLookUpHashKey.SupplierName + "',
						// SupplierLookUp.SupplierLocation = '" + SupplierLookUpHashKey.SupplierLocation
						// + "'");
					} // G 071

					SupplierLookUpStruct SupplierLookUp = null;

					SupplierLookUpStruct fromLookup_SupplierLookUp = null;
					SupplierLookUp = SupplierLookUpDefault;

					if (tHash_Lookup_SupplierLookUp != null && tHash_Lookup_SupplierLookUp.hasNext()) { // G 099

						fromLookup_SupplierLookUp = tHash_Lookup_SupplierLookUp.next();

					} // G 099

					if (fromLookup_SupplierLookUp != null) {
						SupplierLookUp = fromLookup_SupplierLookUp;
					}

					///////////////////////////////////////////////
					// Starting Lookup Table "ProductLookUp"
					///////////////////////////////////////////////

					boolean forceLoopProductLookUp = false;

					ProductLookUpStruct ProductLookUpObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_6 = false;

						ProductLookUpHashKey.ProductName = row10.ProductName;

						ProductLookUpHashKey.ProductCategory = row10.ProductCategory;

						ProductLookUpHashKey.ProductSubCategory = row10.ProductSubCategory;

						ProductLookUpHashKey.hashCodeDirty = true;

						tHash_Lookup_ProductLookUp.lookup(ProductLookUpHashKey);

					} // G_TM_M_020

					if (tHash_Lookup_ProductLookUp != null
							&& tHash_Lookup_ProductLookUp.getCount(ProductLookUpHashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'ProductLookUp' and it contains more one result from keys :
						// ProductLookUp.ProductName = '" + ProductLookUpHashKey.ProductName + "',
						// ProductLookUp.ProductCategory = '" + ProductLookUpHashKey.ProductCategory +
						// "', ProductLookUp.ProductSubCategory = '" +
						// ProductLookUpHashKey.ProductSubCategory + "'");
					} // G 071

					ProductLookUpStruct ProductLookUp = null;

					ProductLookUpStruct fromLookup_ProductLookUp = null;
					ProductLookUp = ProductLookUpDefault;

					if (tHash_Lookup_ProductLookUp != null && tHash_Lookup_ProductLookUp.hasNext()) { // G 099

						fromLookup_ProductLookUp = tHash_Lookup_ProductLookUp.next();

					} // G 099

					if (fromLookup_ProductLookUp != null) {
						ProductLookUp = fromLookup_ProductLookUp;
					}

					///////////////////////////////////////////////
					// Starting Lookup Table "CustomerLookUp"
					///////////////////////////////////////////////

					boolean forceLoopCustomerLookUp = false;

					CustomerLookUpStruct CustomerLookUpObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_6 = false;

						CustomerLookUpHashKey.HashedPI = row10.HashedPI;

						CustomerLookUpHashKey.CustomerSegment = row10.CustomerSegment;

						CustomerLookUpHashKey.hashCodeDirty = true;

						tHash_Lookup_CustomerLookUp.lookup(CustomerLookUpHashKey);

					} // G_TM_M_020

					if (tHash_Lookup_CustomerLookUp != null
							&& tHash_Lookup_CustomerLookUp.getCount(CustomerLookUpHashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'CustomerLookUp' and it contains more one result from keys :
						// CustomerLookUp.HashedPI = '" + CustomerLookUpHashKey.HashedPI + "',
						// CustomerLookUp.CustomerSegment = '" + CustomerLookUpHashKey.CustomerSegment +
						// "'");
					} // G 071

					CustomerLookUpStruct CustomerLookUp = null;

					CustomerLookUpStruct fromLookup_CustomerLookUp = null;
					CustomerLookUp = CustomerLookUpDefault;

					if (tHash_Lookup_CustomerLookUp != null && tHash_Lookup_CustomerLookUp.hasNext()) { // G 099

						fromLookup_CustomerLookUp = tHash_Lookup_CustomerLookUp.next();

					} // G 099

					if (fromLookup_CustomerLookUp != null) {
						CustomerLookUp = fromLookup_CustomerLookUp;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
						// ###############################
						// # Output tables

						FactSales = null;
						FactInventory = null;

// # Output table : 'FactSales'
						FactSales_tmp.ProductPrice = row10.ProductPrice;
						FactSales_tmp.QuantitySold = row10.QuantitySold;
						FactSales_tmp.TotalAmount = row10.TotalAmount;
						FactSales_tmp.DiscountAmount = row10.DiscountAmount;
						FactSales_tmp.NetAmount = row10.NetAmount;
						FactSales_tmp.Date = row10.Date;
						FactSales_tmp.ProductID = ProductLookUp.ProductID;
						FactSales_tmp.ShipperID = ChipperLookUp.ShipperID;
						FactSales_tmp.CustomerID = CustomerLookUp.CustomerID;
						FactSales = FactSales_tmp;

// # Output table : 'FactInventory'
						FactInventory_tmp.StockReceived = row10.StockReceived;
						FactInventory_tmp.StockSold = row10.StockSold;
						FactInventory_tmp.StockOnHand = row10.StockOnHand;
						FactInventory_tmp.Date = row10.Date;
						FactInventory_tmp.ProductID = ProductLookUp.ProductID;
						FactInventory_tmp.SupplierID = SupplierLookUp.SupplierID;
						FactInventory = FactInventory_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_6 = false;

					tos_count_tMap_6++;

					/**
					 * [tMap_6 main ] stop
					 */

					/**
					 * [tMap_6 process_data_begin ] start
					 */

					currentComponent = "tMap_6";

					/**
					 * [tMap_6 process_data_begin ] stop
					 */
// Start of branch "FactSales"
					if (FactSales != null) {

						/**
						 * [tUniqRow_6 main ] start
						 */

						currentComponent = "tUniqRow_6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "FactSales"

							);
						}

						row16 = null;
						finder_tUniqRow_6.Date = FactSales.Date;
						finder_tUniqRow_6.ProductID = FactSales.ProductID;
						finder_tUniqRow_6.ShipperID = FactSales.ShipperID;
						finder_tUniqRow_6.CustomerID = FactSales.CustomerID;
						finder_tUniqRow_6.hashCodeDirty = true;
						if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
							KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

							new_tUniqRow_6.Date = FactSales.Date;
							new_tUniqRow_6.ProductID = FactSales.ProductID;
							new_tUniqRow_6.ShipperID = FactSales.ShipperID;
							new_tUniqRow_6.CustomerID = FactSales.CustomerID;

							keystUniqRow_6.add(new_tUniqRow_6);
							if (row16 == null) {

								row16 = new row16Struct();
							}
							row16.ProductPrice = FactSales.ProductPrice;
							row16.QuantitySold = FactSales.QuantitySold;
							row16.TotalAmount = FactSales.TotalAmount;
							row16.DiscountAmount = FactSales.DiscountAmount;
							row16.NetAmount = FactSales.NetAmount;
							row16.Date = FactSales.Date;
							row16.ProductID = FactSales.ProductID;
							row16.ShipperID = FactSales.ShipperID;
							row16.CustomerID = FactSales.CustomerID;
							nb_uniques_tUniqRow_6++;
						} else {
							nb_duplicates_tUniqRow_6++;
						}

						tos_count_tUniqRow_6++;

						/**
						 * [tUniqRow_6 main ] stop
						 */

						/**
						 * [tUniqRow_6 process_data_begin ] start
						 */

						currentComponent = "tUniqRow_6";

						/**
						 * [tUniqRow_6 process_data_begin ] stop
						 */
// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tMap_13 main ] start
							 */

							currentComponent = "tMap_13";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row16"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_13 = false;
							boolean mainRowRejected_tMap_13 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_13__Struct Var = Var__tMap_13;
								Var.SalesID = Numeric.sequence("SalesID", 1, 1);// ###############################
								// ###############################
								// # Output tables

								SalesFact = null;

// # Output table : 'SalesFact'
								SalesFact_tmp.SalesID = Var.SalesID;
								SalesFact_tmp.ProductPrice = row16.ProductPrice;
								SalesFact_tmp.QuantitySold = row16.QuantitySold;
								SalesFact_tmp.TotalAmount = row16.TotalAmount;
								SalesFact_tmp.DiscountAmount = row16.DiscountAmount;
								SalesFact_tmp.NetAmount = row16.NetAmount;
								SalesFact_tmp.Date = row16.Date;
								SalesFact_tmp.ProductID = row16.ProductID;
								SalesFact_tmp.ShipperID = row16.ShipperID;
								SalesFact_tmp.CustomerID = row16.CustomerID;
								SalesFact = SalesFact_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_13 = false;

							tos_count_tMap_13++;

							/**
							 * [tMap_13 main ] stop
							 */

							/**
							 * [tMap_13 process_data_begin ] start
							 */

							currentComponent = "tMap_13";

							/**
							 * [tMap_13 process_data_begin ] stop
							 */
// Start of branch "SalesFact"
							if (SalesFact != null) {

								/**
								 * [tDBOutput_7 main ] start
								 */

								currentComponent = "tDBOutput_7";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "SalesFact"

									);
								}

								whetherReject_tDBOutput_7 = false;
								int updateFlag_tDBOutput_7 = 0;
								if (SalesFact.ProductPrice == null) {
									pstmtUpdate_tDBOutput_7.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tDBOutput_7.setInt(1, SalesFact.ProductPrice);
								}

								if (SalesFact.QuantitySold == null) {
									pstmtUpdate_tDBOutput_7.setNull(2, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tDBOutput_7.setInt(2, SalesFact.QuantitySold);
								}

								if (SalesFact.TotalAmount == null) {
									pstmtUpdate_tDBOutput_7.setNull(3, java.sql.Types.FLOAT);
								} else {
									pstmtUpdate_tDBOutput_7.setFloat(3, SalesFact.TotalAmount);
								}

								if (SalesFact.DiscountAmount == null) {
									pstmtUpdate_tDBOutput_7.setNull(4, java.sql.Types.FLOAT);
								} else {
									pstmtUpdate_tDBOutput_7.setFloat(4, SalesFact.DiscountAmount);
								}

								if (SalesFact.NetAmount == null) {
									pstmtUpdate_tDBOutput_7.setNull(5, java.sql.Types.FLOAT);
								} else {
									pstmtUpdate_tDBOutput_7.setFloat(5, SalesFact.NetAmount);
								}

								if (SalesFact.Date != null) {
									pstmtUpdate_tDBOutput_7.setTimestamp(6,
											new java.sql.Timestamp(SalesFact.Date.getTime()));
								} else {
									pstmtUpdate_tDBOutput_7.setNull(6, java.sql.Types.TIMESTAMP);
								}

								pstmtUpdate_tDBOutput_7.setInt(7, SalesFact.ProductID);

								pstmtUpdate_tDBOutput_7.setInt(8, SalesFact.ShipperID);

								pstmtUpdate_tDBOutput_7.setInt(9, SalesFact.CustomerID);

								pstmtUpdate_tDBOutput_7.setInt(10 + count_tDBOutput_7, SalesFact.SalesID);

								try {
									updateFlag_tDBOutput_7 = pstmtUpdate_tDBOutput_7.executeUpdate();
									updatedCount_tDBOutput_7 = updatedCount_tDBOutput_7 + updateFlag_tDBOutput_7;
									rowsToCommitCount_tDBOutput_7 += updateFlag_tDBOutput_7;
									if (updateFlag_tDBOutput_7 == 0) {

										pstmtInsert_tDBOutput_7.setInt(1, SalesFact.SalesID);

										if (SalesFact.ProductPrice == null) {
											pstmtInsert_tDBOutput_7.setNull(2, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_7.setInt(2, SalesFact.ProductPrice);
										}

										if (SalesFact.QuantitySold == null) {
											pstmtInsert_tDBOutput_7.setNull(3, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_7.setInt(3, SalesFact.QuantitySold);
										}

										if (SalesFact.TotalAmount == null) {
											pstmtInsert_tDBOutput_7.setNull(4, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_7.setFloat(4, SalesFact.TotalAmount);
										}

										if (SalesFact.DiscountAmount == null) {
											pstmtInsert_tDBOutput_7.setNull(5, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_7.setFloat(5, SalesFact.DiscountAmount);
										}

										if (SalesFact.NetAmount == null) {
											pstmtInsert_tDBOutput_7.setNull(6, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_7.setFloat(6, SalesFact.NetAmount);
										}

										if (SalesFact.Date != null) {
											pstmtInsert_tDBOutput_7.setTimestamp(7,
													new java.sql.Timestamp(SalesFact.Date.getTime()));
										} else {
											pstmtInsert_tDBOutput_7.setNull(7, java.sql.Types.TIMESTAMP);
										}

										pstmtInsert_tDBOutput_7.setInt(8, SalesFact.ProductID);

										pstmtInsert_tDBOutput_7.setInt(9, SalesFact.ShipperID);

										pstmtInsert_tDBOutput_7.setInt(10, SalesFact.CustomerID);

										int processedCount_tDBOutput_7 = pstmtInsert_tDBOutput_7.executeUpdate();
										insertedCount_tDBOutput_7 += processedCount_tDBOutput_7;
										rowsToCommitCount_tDBOutput_7 += processedCount_tDBOutput_7;
										nb_line_tDBOutput_7++;
									} else {
										nb_line_tDBOutput_7++;

									}
								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_7_ERROR_MESSAGE", e.getMessage());
									whetherReject_tDBOutput_7 = true;
									nb_line_tDBOutput_7++;

									System.err.println(e.getMessage());
								} finally {

								}
								if (!whetherReject_tDBOutput_7) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_7 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_7)
											throws Exception {
										try {

											for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
												if (countEach_tDBOutput_7 == -2 || countEach_tDBOutput_7 == -3) {
													break;
												}
												counter += countEach_tDBOutput_7;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_7_ERROR_MESSAGE", e.getMessage());

											int countSum_tDBOutput_7 = 0;
											for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_7)
											throws Exception {
										try {

											for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
												if (countEach_tDBOutput_7 == -2 || countEach_tDBOutput_7 == -3) {
													break;
												}
												counter += countEach_tDBOutput_7;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_7_ERROR_MESSAGE", e.getMessage());

											for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								tos_count_tDBOutput_7++;

								/**
								 * [tDBOutput_7 main ] stop
								 */

								/**
								 * [tDBOutput_7 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_7";

								/**
								 * [tDBOutput_7 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_7 process_data_end ] start
								 */

								currentComponent = "tDBOutput_7";

								/**
								 * [tDBOutput_7 process_data_end ] stop
								 */

							} // End of branch "SalesFact"

							/**
							 * [tMap_13 process_data_end ] start
							 */

							currentComponent = "tMap_13";

							/**
							 * [tMap_13 process_data_end ] stop
							 */

						} // End of branch "row16"

						/**
						 * [tUniqRow_6 process_data_end ] start
						 */

						currentComponent = "tUniqRow_6";

						/**
						 * [tUniqRow_6 process_data_end ] stop
						 */

					} // End of branch "FactSales"

// Start of branch "FactInventory"
					if (FactInventory != null) {

						/**
						 * [tUniqRow_5 main ] start
						 */

						currentComponent = "tUniqRow_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "FactInventory"

							);
						}

						row15 = null;
						finder_tUniqRow_5.Date = FactInventory.Date;
						finder_tUniqRow_5.ProductID = FactInventory.ProductID;
						finder_tUniqRow_5.SupplierID = FactInventory.SupplierID;
						finder_tUniqRow_5.hashCodeDirty = true;
						if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
							KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

							new_tUniqRow_5.Date = FactInventory.Date;
							new_tUniqRow_5.ProductID = FactInventory.ProductID;
							new_tUniqRow_5.SupplierID = FactInventory.SupplierID;

							keystUniqRow_5.add(new_tUniqRow_5);
							if (row15 == null) {

								row15 = new row15Struct();
							}
							row15.StockReceived = FactInventory.StockReceived;
							row15.StockSold = FactInventory.StockSold;
							row15.StockOnHand = FactInventory.StockOnHand;
							row15.Date = FactInventory.Date;
							row15.ProductID = FactInventory.ProductID;
							row15.SupplierID = FactInventory.SupplierID;
							nb_uniques_tUniqRow_5++;
						} else {
							nb_duplicates_tUniqRow_5++;
						}

						tos_count_tUniqRow_5++;

						/**
						 * [tUniqRow_5 main ] stop
						 */

						/**
						 * [tUniqRow_5 process_data_begin ] start
						 */

						currentComponent = "tUniqRow_5";

						/**
						 * [tUniqRow_5 process_data_begin ] stop
						 */
// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tMap_12 main ] start
							 */

							currentComponent = "tMap_12";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row15"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_12 = false;
							boolean mainRowRejected_tMap_12 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_12__Struct Var = Var__tMap_12;
								Var.InventoryID = Numeric.sequence("InventoryID", 1, 1);// ###############################
								// ###############################
								// # Output tables

								InventoryFact = null;

// # Output table : 'InventoryFact'
								InventoryFact_tmp.InventoryID = Var.InventoryID;
								InventoryFact_tmp.StockReceived = row15.StockReceived;
								InventoryFact_tmp.StockSold = row15.StockSold;
								InventoryFact_tmp.StockOnHand = row15.StockOnHand;
								InventoryFact_tmp.Date = row15.Date;
								InventoryFact_tmp.ProductID = row15.ProductID;
								InventoryFact_tmp.SupplierID = row15.SupplierID;
								InventoryFact = InventoryFact_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_12 = false;

							tos_count_tMap_12++;

							/**
							 * [tMap_12 main ] stop
							 */

							/**
							 * [tMap_12 process_data_begin ] start
							 */

							currentComponent = "tMap_12";

							/**
							 * [tMap_12 process_data_begin ] stop
							 */
// Start of branch "InventoryFact"
							if (InventoryFact != null) {

								/**
								 * [tDBOutput_6 main ] start
								 */

								currentComponent = "tDBOutput_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "InventoryFact"

									);
								}

								whetherReject_tDBOutput_6 = false;
								int updateFlag_tDBOutput_6 = 0;
								if (InventoryFact.StockReceived == null) {
									pstmtUpdate_tDBOutput_6.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tDBOutput_6.setInt(1, InventoryFact.StockReceived);
								}

								if (InventoryFact.StockSold == null) {
									pstmtUpdate_tDBOutput_6.setNull(2, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tDBOutput_6.setInt(2, InventoryFact.StockSold);
								}

								if (InventoryFact.StockOnHand == null) {
									pstmtUpdate_tDBOutput_6.setNull(3, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tDBOutput_6.setInt(3, InventoryFact.StockOnHand);
								}

								if (InventoryFact.Date != null) {
									pstmtUpdate_tDBOutput_6.setTimestamp(4,
											new java.sql.Timestamp(InventoryFact.Date.getTime()));
								} else {
									pstmtUpdate_tDBOutput_6.setNull(4, java.sql.Types.TIMESTAMP);
								}

								pstmtUpdate_tDBOutput_6.setInt(5, InventoryFact.ProductID);

								pstmtUpdate_tDBOutput_6.setInt(6, InventoryFact.SupplierID);

								pstmtUpdate_tDBOutput_6.setInt(7 + count_tDBOutput_6, InventoryFact.InventoryID);

								try {
									updateFlag_tDBOutput_6 = pstmtUpdate_tDBOutput_6.executeUpdate();
									updatedCount_tDBOutput_6 = updatedCount_tDBOutput_6 + updateFlag_tDBOutput_6;
									rowsToCommitCount_tDBOutput_6 += updateFlag_tDBOutput_6;
									if (updateFlag_tDBOutput_6 == 0) {

										pstmtInsert_tDBOutput_6.setInt(1, InventoryFact.InventoryID);

										if (InventoryFact.StockReceived == null) {
											pstmtInsert_tDBOutput_6.setNull(2, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(2, InventoryFact.StockReceived);
										}

										if (InventoryFact.StockSold == null) {
											pstmtInsert_tDBOutput_6.setNull(3, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(3, InventoryFact.StockSold);
										}

										if (InventoryFact.StockOnHand == null) {
											pstmtInsert_tDBOutput_6.setNull(4, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(4, InventoryFact.StockOnHand);
										}

										if (InventoryFact.Date != null) {
											pstmtInsert_tDBOutput_6.setTimestamp(5,
													new java.sql.Timestamp(InventoryFact.Date.getTime()));
										} else {
											pstmtInsert_tDBOutput_6.setNull(5, java.sql.Types.TIMESTAMP);
										}

										pstmtInsert_tDBOutput_6.setInt(6, InventoryFact.ProductID);

										pstmtInsert_tDBOutput_6.setInt(7, InventoryFact.SupplierID);

										int processedCount_tDBOutput_6 = pstmtInsert_tDBOutput_6.executeUpdate();
										insertedCount_tDBOutput_6 += processedCount_tDBOutput_6;
										rowsToCommitCount_tDBOutput_6 += processedCount_tDBOutput_6;
										nb_line_tDBOutput_6++;
									} else {
										nb_line_tDBOutput_6++;

									}
								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_6_ERROR_MESSAGE", e.getMessage());
									whetherReject_tDBOutput_6 = true;
									nb_line_tDBOutput_6++;

									System.err.println(e.getMessage());
								} finally {

								}
								if (!whetherReject_tDBOutput_6) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_6 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_6)
											throws Exception {
										try {

											for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
												if (countEach_tDBOutput_6 == -2 || countEach_tDBOutput_6 == -3) {
													break;
												}
												counter += countEach_tDBOutput_6;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_6_ERROR_MESSAGE", e.getMessage());

											int countSum_tDBOutput_6 = 0;
											for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_6)
											throws Exception {
										try {

											for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
												if (countEach_tDBOutput_6 == -2 || countEach_tDBOutput_6 == -3) {
													break;
												}
												counter += countEach_tDBOutput_6;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_6_ERROR_MESSAGE", e.getMessage());

											for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								tos_count_tDBOutput_6++;

								/**
								 * [tDBOutput_6 main ] stop
								 */

								/**
								 * [tDBOutput_6 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_6";

								/**
								 * [tDBOutput_6 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_6 process_data_end ] start
								 */

								currentComponent = "tDBOutput_6";

								/**
								 * [tDBOutput_6 process_data_end ] stop
								 */

							} // End of branch "InventoryFact"

							/**
							 * [tMap_12 process_data_end ] start
							 */

							currentComponent = "tMap_12";

							/**
							 * [tMap_12 process_data_end ] stop
							 */

						} // End of branch "row15"

						/**
						 * [tUniqRow_5 process_data_end ] start
						 */

						currentComponent = "tUniqRow_5";

						/**
						 * [tUniqRow_5 process_data_end ] stop
						 */

					} // End of branch "FactInventory"

					/**
					 * [tMap_6 process_data_end ] start
					 */

					currentComponent = "tMap_6";

					/**
					 * [tMap_6 process_data_end ] stop
					 */

					/**
					 * [tHashInput_4 process_data_end ] start
					 */

					currentComponent = "tHashInput_4";

					/**
					 * [tHashInput_4 process_data_end ] stop
					 */

					/**
					 * [tHashInput_4 end ] start
					 */

					currentComponent = "tHashInput_4";

					nb_line_tHashInput_4++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_loading_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);

				ok_Hash.put("tHashInput_4", true);
				end_Hash.put("tHashInput_4", System.currentTimeMillis());

				/**
				 * [tHashInput_4 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_ChipperLookUp != null) {
					tHash_Lookup_ChipperLookUp.endGet();
				}
				globalMap.remove("tHash_Lookup_ChipperLookUp");

				if (tHash_Lookup_SupplierLookUp != null) {
					tHash_Lookup_SupplierLookUp.endGet();
				}
				globalMap.remove("tHash_Lookup_SupplierLookUp");

				if (tHash_Lookup_ProductLookUp != null) {
					tHash_Lookup_ProductLookUp.endGet();
				}
				globalMap.remove("tHash_Lookup_ProductLookUp");

				if (tHash_Lookup_CustomerLookUp != null) {
					tHash_Lookup_CustomerLookUp.endGet();
				}
				globalMap.remove("tHash_Lookup_CustomerLookUp");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tUniqRow_6 end ] start
				 */

				currentComponent = "tUniqRow_6";

				globalMap.put("tUniqRow_6_NB_UNIQUES", nb_uniques_tUniqRow_6);
				globalMap.put("tUniqRow_6_NB_DUPLICATES", nb_duplicates_tUniqRow_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "FactSales");
				}

				ok_Hash.put("tUniqRow_6", true);
				end_Hash.put("tUniqRow_6", System.currentTimeMillis());

				/**
				 * [tUniqRow_6 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				if (pstmtUpdate_tDBOutput_7 != null) {
					pstmtUpdate_tDBOutput_7.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_7");
				}
				if (pstmtInsert_tDBOutput_7 != null) {
					pstmtInsert_tDBOutput_7.close();
					resourceMap.remove("pstmtInsert_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7 + deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED", nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED", nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SalesFact");
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

				/**
				 * [tUniqRow_5 end ] start
				 */

				currentComponent = "tUniqRow_5";

				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniques_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES", nb_duplicates_tUniqRow_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "FactInventory");
				}

				ok_Hash.put("tUniqRow_5", true);
				end_Hash.put("tUniqRow_5", System.currentTimeMillis());

				/**
				 * [tUniqRow_5 end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				if (pstmtUpdate_tDBOutput_6 != null) {
					pstmtUpdate_tDBOutput_6.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_6");
				}
				if (pstmtInsert_tDBOutput_6 != null) {
					pstmtInsert_tDBOutput_6.close();
					resourceMap.remove("pstmtInsert_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "InventoryFact");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_CustomerLookUp");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_ProductLookUp");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_SupplierLookUp");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_ChipperLookUp");

			try {

				/**
				 * [tHashInput_4 finally ] start
				 */

				currentComponent = "tHashInput_4";

				/**
				 * [tHashInput_4 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tUniqRow_6 finally ] start
				 */

				currentComponent = "tUniqRow_6";

				/**
				 * [tUniqRow_6 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_7 = null;
					if ((pstmtUpdateToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_7")) != null) {
						pstmtUpdateToClose_tDBOutput_7.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_7 = null;
					if ((pstmtInsertToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_7")) != null) {
						pstmtInsertToClose_tDBOutput_7.close();
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

				/**
				 * [tUniqRow_5 finally ] start
				 */

				currentComponent = "tUniqRow_5";

				/**
				 * [tUniqRow_5 finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_6 = null;
					if ((pstmtUpdateToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_6")) != null) {
						pstmtUpdateToClose_tDBOutput_6.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_6 = null;
					if ((pstmtInsertToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_6")) != null) {
						pstmtInsertToClose_tDBOutput_6.close();
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}

	public static class CustomerDimensionStruct implements routines.system.IPersistableRow<CustomerDimensionStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer CustomerID;

		public Integer getCustomerID() {
			return this.CustomerID;
		}

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final CustomerDimensionStruct other = (CustomerDimensionStruct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(CustomerDimensionStruct other) {

			other.CustomerID = this.CustomerID;
			other.HashedPI = this.HashedPI;
			other.CustomerState = this.CustomerState;
			other.CustomerSegment = this.CustomerSegment;

		}

		public void copyKeysDataTo(CustomerDimensionStruct other) {

			other.CustomerID = this.CustomerID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.CustomerID = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.CustomerID = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CustomerID, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.CustomerID, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(CustomerDimensionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class CustomerLookUpStruct
			implements routines.system.IPersistableComparableLookupRow<CustomerLookUpStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer CustomerID;

		public Integer getCustomerID() {
			return this.CustomerID;
		}

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.HashedPI == null) ? 0 : this.HashedPI.hashCode());

				result = prime * result + ((this.CustomerSegment == null) ? 0 : this.CustomerSegment.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final CustomerLookUpStruct other = (CustomerLookUpStruct) obj;

			if (this.HashedPI == null) {
				if (other.HashedPI != null)
					return false;

			} else if (!this.HashedPI.equals(other.HashedPI))

				return false;

			if (this.CustomerSegment == null) {
				if (other.CustomerSegment != null)
					return false;

			} else if (!this.CustomerSegment.equals(other.CustomerSegment))

				return false;

			return true;
		}

		public void copyDataTo(CustomerLookUpStruct other) {

			other.CustomerID = this.CustomerID;
			other.HashedPI = this.HashedPI;
			other.CustomerState = this.CustomerState;
			other.CustomerSegment = this.CustomerSegment;

		}

		public void copyKeysDataTo(CustomerLookUpStruct other) {

			other.HashedPI = this.HashedPI;
			other.CustomerSegment = this.CustomerSegment;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.HashedPI = readString(dis);

					this.CustomerSegment = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.HashedPI = readString(dis);

					this.CustomerSegment = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerSegment, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerSegment, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CustomerID = readInteger(dis, ois);

				this.CustomerState = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.CustomerID = readInteger(dis, objectIn);

				this.CustomerState = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.CustomerID, dos, oos);

				writeString(this.CustomerState, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.CustomerID, dos, objectOut);

				writeString(this.CustomerState, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(CustomerLookUpStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.HashedPI, other.HashedPI);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CustomerSegment, other.CustomerSegment);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DateDimensionStruct implements routines.system.IPersistableRow<DateDimensionStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public int day;

		public int getDay() {
			return this.day;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.date == null) ? 0 : this.date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final DateDimensionStruct other = (DateDimensionStruct) obj;

			if (this.date == null) {
				if (other.date != null)
					return false;

			} else if (!this.date.equals(other.date))

				return false;

			return true;
		}

		public void copyDataTo(DateDimensionStruct other) {

			other.date = this.date;
			other.year = this.year;
			other.month = this.month;
			other.day = this.day;

		}

		public void copyKeysDataTo(DateDimensionStruct other) {

			other.date = this.date;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.date = readDate(dis);

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.day = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.date = readDate(dis);

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.day = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.date, dos);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// int

				dos.writeInt(this.day);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.date, dos);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// int

				dos.writeInt(this.day);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date=" + String.valueOf(date));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",day=" + String.valueOf(day));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DateDimensionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.date, other.date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public int day;

		public int getDay() {
			return this.day;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.date = readDate(dis);

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.day = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.date = readDate(dis);

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.day = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.date, dos);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// int

				dos.writeInt(this.day);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.date, dos);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// int

				dos.writeInt(this.day);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date=" + String.valueOf(date));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",day=" + String.valueOf(day));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public java.util.Date start;

		public java.util.Date getStart() {
			return this.start;
		}

		public java.util.Date end;

		public java.util.Date getEnd() {
			return this.end;
		}

		public Long diff;

		public Long getDiff() {
			return this.diff;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.start = readDate(dis);

					this.end = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.diff = null;
					} else {
						this.diff = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.start = readDate(dis);

					this.end = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.diff = null;
					} else {
						this.diff = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.start, dos);

				// java.util.Date

				writeDate(this.end, dos);

				// Long

				if (this.diff == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.diff);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.start, dos);

				// java.util.Date

				writeDate(this.end, dos);

				// Long

				if (this.diff == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.diff);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("start=" + String.valueOf(start));
			sb.append(",end=" + String.valueOf(end));
			sb.append(",diff=" + String.valueOf(diff));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public Integer MinDate;

		public Integer getMinDate() {
			return this.MinDate;
		}

		public Integer MaxDate;

		public Integer getMaxDate() {
			return this.MaxDate;
		}

		public String grpBy;

		public String getGrpBy() {
			return this.grpBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.MinDate = readInteger(dis);

					this.MaxDate = readInteger(dis);

					this.grpBy = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.MinDate = readInteger(dis);

					this.MaxDate = readInteger(dis);

					this.grpBy = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.MinDate, dos);

				// Integer

				writeInteger(this.MaxDate, dos);

				// String

				writeString(this.grpBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.MinDate, dos);

				// Integer

				writeInteger(this.MaxDate, dos);

				// String

				writeString(this.grpBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MinDate=" + String.valueOf(MinDate));
			sb.append(",MaxDate=" + String.valueOf(MaxDate));
			sb.append(",grpBy=" + grpBy);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public Integer MinDate;

		public Integer getMinDate() {
			return this.MinDate;
		}

		public Integer MaxDate;

		public Integer getMaxDate() {
			return this.MaxDate;
		}

		public String grpBy;

		public String getGrpBy() {
			return this.grpBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.MinDate = readInteger(dis);

					this.MaxDate = readInteger(dis);

					this.grpBy = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.MinDate = readInteger(dis);

					this.MaxDate = readInteger(dis);

					this.grpBy = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.MinDate, dos);

				// Integer

				writeInteger(this.MaxDate, dos);

				// String

				writeString(this.grpBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.MinDate, dos);

				// Integer

				writeInteger(this.MaxDate, dos);

				// String

				writeString(this.grpBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MinDate=" + String.valueOf(MinDate));
			sb.append(",MaxDate=" + String.valueOf(MaxDate));
			sb.append(",grpBy=" + grpBy);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DateDimStruct implements routines.system.IPersistableRow<DateDimStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public Integer MinDate;

		public Integer getMinDate() {
			return this.MinDate;
		}

		public Integer MaxDate;

		public Integer getMaxDate() {
			return this.MaxDate;
		}

		public String grpBy;

		public String getGrpBy() {
			return this.grpBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.MinDate = readInteger(dis);

					this.MaxDate = readInteger(dis);

					this.grpBy = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.MinDate = readInteger(dis);

					this.MaxDate = readInteger(dis);

					this.grpBy = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.MinDate, dos);

				// Integer

				writeInteger(this.MaxDate, dos);

				// String

				writeString(this.grpBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.MinDate, dos);

				// Integer

				writeInteger(this.MaxDate, dos);

				// String

				writeString(this.grpBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MinDate=" + String.valueOf(MinDate));
			sb.append(",MaxDate=" + String.valueOf(MaxDate));
			sb.append(",grpBy=" + grpBy);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DateDimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class CustomerDimStruct implements routines.system.IPersistableRow<CustomerDimStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(CustomerDimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		public Integer ProductPrice;

		public Integer getProductPrice() {
			return this.ProductPrice;
		}

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		public Integer QuantitySold;

		public Integer getQuantitySold() {
			return this.QuantitySold;
		}

		public Float TotalAmount;

		public Float getTotalAmount() {
			return this.TotalAmount;
		}

		public Float DiscountAmount;

		public Float getDiscountAmount() {
			return this.DiscountAmount;
		}

		public Float NetAmount;

		public Float getNetAmount() {
			return this.NetAmount;
		}

		public Integer StockReceived;

		public Integer getStockReceived() {
			return this.StockReceived;
		}

		public Integer StockSold;

		public Integer getStockSold() {
			return this.StockSold;
		}

		public Integer StockOnHand;

		public Integer getStockOnHand() {
			return this.StockOnHand;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date=" + String.valueOf(Date));
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append(",ProductPrice=" + String.valueOf(ProductPrice));
			sb.append(",HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append(",SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append(",ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append(",QuantitySold=" + String.valueOf(QuantitySold));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",DiscountAmount=" + String.valueOf(DiscountAmount));
			sb.append(",NetAmount=" + String.valueOf(NetAmount));
			sb.append(",StockReceived=" + String.valueOf(StockReceived));
			sb.append(",StockSold=" + String.valueOf(StockSold));
			sb.append(",StockOnHand=" + String.valueOf(StockOnHand));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();
				DateDimStruct DateDim = new DateDimStruct();
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				row5Struct row5 = new row5Struct();
				DateDimensionStruct DateDimension = new DateDimensionStruct();
				CustomerDimStruct CustomerDim = new CustomerDimStruct();
				row9Struct row9 = new row9Struct();
				CustomerDimensionStruct CustomerDimension = new CustomerDimensionStruct();
				CustomerLookUpStruct CustomerLookUp = new CustomerLookUpStruct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DateDim");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String grpBy;
					Integer MinDate_min;
					Integer MaxDate_max;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.grpBy == null) ? 0 : this.grpBy.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.grpBy == null) {
							if (other.grpBy != null)
								return false;
						} else if (!this.grpBy.equals(other.grpBy))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "CustomerDimension");
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;
				String dbschema_tDBOutput_2 = null;
				String tableName_tDBOutput_2 = null;
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_2;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "CustomerDim";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "CustomerDim";
				}
				int count_tDBOutput_2 = 0;

				boolean whetherExist_tDBOutput_2 = false;
				try (java.sql.Statement isExistStmt_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					try {
						isExistStmt_tDBOutput_2.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_2 + "]");
						whetherExist_tDBOutput_2 = true;
					} catch (java.lang.Exception e) {
						globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());
						whetherExist_tDBOutput_2 = false;
					}
				}
				if (whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtDrop_tDBOutput_2.execute("DROP TABLE [" + tableName_tDBOutput_2 + "]");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE [" + tableName_tDBOutput_2
							+ "]([CustomerID] INT ,[HashedPI] VARCHAR(255)  ,[CustomerState] VARCHAR(50)  ,[CustomerSegment] VARCHAR(60)  ,primary key([CustomerID]))");
				}
				String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2
						+ "] ([CustomerID],[HashedPI],[CustomerState],[CustomerSegment]) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				boolean isShareIdentity_tDBOutput_2 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tAdvancedHash_CustomerLookUp begin ] start
				 */

				ok_Hash.put("tAdvancedHash_CustomerLookUp", false);
				start_Hash.put("tAdvancedHash_CustomerLookUp", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_CustomerLookUp";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "CustomerLookUp");
				}

				int tos_count_tAdvancedHash_CustomerLookUp = 0;

				// connection name:CustomerLookUp
				// source node:tMap_5 - inputs:(row9)
				// outputs:(CustomerDimension,CustomerLookUp,CustomerLookUp) | target
				// node:tAdvancedHash_CustomerLookUp - inputs:(CustomerLookUp) outputs:()
				// linked node: tMap_6 -
				// inputs:(row10,CustomerLookUp,ProductLookUp,SupplierLookUp,ChipperLookUp)
				// outputs:(FactSales,FactInventory)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_CustomerLookUp = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CustomerLookUpStruct> tHash_Lookup_CustomerLookUp = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<CustomerLookUpStruct>getLookup(matchingModeEnum_CustomerLookUp);

				globalMap.put("tHash_Lookup_CustomerLookUp", tHash_Lookup_CustomerLookUp);

				/**
				 * [tAdvancedHash_CustomerLookUp begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
					int id;
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				CustomerDimensionStruct CustomerDimension_tmp = new CustomerDimensionStruct();
				CustomerLookUpStruct CustomerLookUp_tmp = new CustomerLookUpStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "CustomerDim");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String HashedPI;
					String CustomerSegment;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.HashedPI == null) ? 0 : this.HashedPI.hashCode());

							result = prime * result
									+ ((this.CustomerSegment == null) ? 0 : this.CustomerSegment.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.HashedPI == null) {
							if (other.HashedPI != null)
								return false;

						} else if (!this.HashedPI.equals(other.HashedPI))

							return false;

						if (this.CustomerSegment == null) {
							if (other.CustomerSegment != null)
								return false;

						} else if (!this.CustomerSegment.equals(other.CustomerSegment))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tMap_10 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
				DateDimStruct DateDim_tmp = new DateDimStruct();
				CustomerDimStruct CustomerDim_tmp = new CustomerDimStruct();
// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tHashInput_1 begin ] start
				 */

				ok_Hash.put("tHashInput_1", false);
				start_Hash.put("tHashInput_1", System.currentTimeMillis());

				currentComponent = "tHashInput_1";

				int tos_count_tHashInput_1 = 0;

				int nb_line_tHashInput_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_1 = mf_tHashInput_1
						.getAdvancedMemoryHashFile("tHashFile_loading_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_1 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row2Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
				while (iterator_tHashInput_1.hasNext()) {
					row2Struct next_tHashInput_1 = iterator_tHashInput_1.next();

					row14.Date = next_tHashInput_1.Date;
					row14.ProductName = next_tHashInput_1.ProductName;
					row14.ProductCategory = next_tHashInput_1.ProductCategory;
					row14.ProductSubCategory = next_tHashInput_1.ProductSubCategory;
					row14.ProductPrice = next_tHashInput_1.ProductPrice;
					row14.HashedPI = next_tHashInput_1.HashedPI;
					row14.CustomerState = next_tHashInput_1.CustomerState;
					row14.CustomerSegment = next_tHashInput_1.CustomerSegment;
					row14.SupplierName = next_tHashInput_1.SupplierName;
					row14.SupplierLocation = next_tHashInput_1.SupplierLocation;
					row14.ShipperName = next_tHashInput_1.ShipperName;
					row14.ShippingMethod = next_tHashInput_1.ShippingMethod;
					row14.QuantitySold = next_tHashInput_1.QuantitySold;
					row14.TotalAmount = next_tHashInput_1.TotalAmount;
					row14.DiscountAmount = next_tHashInput_1.DiscountAmount;
					row14.NetAmount = next_tHashInput_1.NetAmount;
					row14.StockReceived = next_tHashInput_1.StockReceived;
					row14.StockSold = next_tHashInput_1.StockSold;
					row14.StockOnHand = next_tHashInput_1.StockOnHand;

					/**
					 * [tHashInput_1 begin ] stop
					 */

					/**
					 * [tHashInput_1 main ] start
					 */

					currentComponent = "tHashInput_1";

					tos_count_tHashInput_1++;

					/**
					 * [tHashInput_1 main ] stop
					 */

					/**
					 * [tHashInput_1 process_data_begin ] start
					 */

					currentComponent = "tHashInput_1";

					/**
					 * [tHashInput_1 process_data_begin ] stop
					 */

					/**
					 * [tMap_10 main ] start
					 */

					currentComponent = "tMap_10";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row14"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_10 = false;
					boolean mainRowRejected_tMap_10 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
						// ###############################
						// # Output tables

						DateDim = null;
						CustomerDim = null;

// # Output table : 'DateDim'
						DateDim_tmp.MinDate = TalendDate.getPartOfDate("YEAR", row14.Date);
						DateDim_tmp.MaxDate = TalendDate.getPartOfDate("YEAR", row14.Date);
						DateDim_tmp.grpBy = "grp";
						DateDim = DateDim_tmp;

// # Output table : 'CustomerDim'
						CustomerDim_tmp.HashedPI = row14.HashedPI;
						CustomerDim_tmp.CustomerState = row14.CustomerState;
						CustomerDim_tmp.CustomerSegment = row14.CustomerSegment;
						CustomerDim = CustomerDim_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_10 = false;

					tos_count_tMap_10++;

					/**
					 * [tMap_10 main ] stop
					 */

					/**
					 * [tMap_10 process_data_begin ] start
					 */

					currentComponent = "tMap_10";

					/**
					 * [tMap_10 process_data_begin ] stop
					 */
// Start of branch "DateDim"
					if (DateDim != null) {

						/**
						 * [tAggregateRow_1_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "DateDim"

							);
						}

						operation_finder_tAggregateRow_1.grpBy = DateDim.grpBy;

						operation_finder_tAggregateRow_1.hashCodeDirty = true;

						operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

						boolean isFirstAdd_tAggregateRow_1 = false;

						if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

							operation_result_tAggregateRow_1.grpBy = operation_finder_tAggregateRow_1.grpBy;

							isFirstAdd_tAggregateRow_1 = true;

							hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
									operation_result_tAggregateRow_1);

						} // G_OutMain_AggR_001

						if (operation_result_tAggregateRow_1.MinDate_min == null
								|| DateDim.MinDate < operation_result_tAggregateRow_1.MinDate_min

						) {
							operation_result_tAggregateRow_1.MinDate_min = DateDim.MinDate;
						}

						if (operation_result_tAggregateRow_1.MaxDate_max == null
								|| DateDim.MaxDate > operation_result_tAggregateRow_1.MaxDate_max

						) {
							operation_result_tAggregateRow_1.MaxDate_max = DateDim.MaxDate;
						}

						tos_count_tAggregateRow_1_AGGOUT++;

						/**
						 * [tAggregateRow_1_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						/**
						 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						/**
						 * [tAggregateRow_1_AGGOUT process_data_end ] stop
						 */

					} // End of branch "DateDim"

// Start of branch "CustomerDim"
					if (CustomerDim != null) {

						/**
						 * [tUniqRow_1 main ] start
						 */

						currentComponent = "tUniqRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "CustomerDim"

							);
						}

						row9 = null;
						if (CustomerDim.HashedPI == null) {
							finder_tUniqRow_1.HashedPI = null;
						} else {
							finder_tUniqRow_1.HashedPI = CustomerDim.HashedPI.toLowerCase();
						}
						if (CustomerDim.CustomerSegment == null) {
							finder_tUniqRow_1.CustomerSegment = null;
						} else {
							finder_tUniqRow_1.CustomerSegment = CustomerDim.CustomerSegment.toLowerCase();
						}
						finder_tUniqRow_1.hashCodeDirty = true;
						if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
							KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

							if (CustomerDim.HashedPI == null) {
								new_tUniqRow_1.HashedPI = null;
							} else {
								new_tUniqRow_1.HashedPI = CustomerDim.HashedPI.toLowerCase();
							}
							if (CustomerDim.CustomerSegment == null) {
								new_tUniqRow_1.CustomerSegment = null;
							} else {
								new_tUniqRow_1.CustomerSegment = CustomerDim.CustomerSegment.toLowerCase();
							}

							keystUniqRow_1.add(new_tUniqRow_1);
							if (row9 == null) {

								row9 = new row9Struct();
							}
							row9.HashedPI = CustomerDim.HashedPI;
							row9.CustomerState = CustomerDim.CustomerState;
							row9.CustomerSegment = CustomerDim.CustomerSegment;
							nb_uniques_tUniqRow_1++;
						} else {
							nb_duplicates_tUniqRow_1++;
						}

						tos_count_tUniqRow_1++;

						/**
						 * [tUniqRow_1 main ] stop
						 */

						/**
						 * [tUniqRow_1 process_data_begin ] start
						 */

						currentComponent = "tUniqRow_1";

						/**
						 * [tUniqRow_1 process_data_begin ] stop
						 */
// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row9"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;
								Var.id = Numeric.sequence("CustomerID", 1, 1);// ###############################
								// ###############################
								// # Output tables

								CustomerDimension = null;
								CustomerLookUp = null;

// # Output table : 'CustomerDimension'
								CustomerDimension_tmp.CustomerID = Var.id;
								CustomerDimension_tmp.HashedPI = row9.HashedPI;
								CustomerDimension_tmp.CustomerState = row9.CustomerState;
								CustomerDimension_tmp.CustomerSegment = row9.CustomerSegment;
								CustomerDimension = CustomerDimension_tmp;

// # Output table : 'CustomerLookUp'
								CustomerLookUp_tmp.CustomerID = Var.id;
								CustomerLookUp_tmp.HashedPI = row9.HashedPI;
								CustomerLookUp_tmp.CustomerState = row9.CustomerState;
								CustomerLookUp_tmp.CustomerSegment = row9.CustomerSegment;
								CustomerLookUp = CustomerLookUp_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */

							/**
							 * [tMap_5 process_data_begin ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_begin ] stop
							 */
// Start of branch "CustomerDimension"
							if (CustomerDimension != null) {

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "CustomerDimension"

									);
								}

								whetherReject_tDBOutput_2 = false;
								if (CustomerDimension.CustomerID == null) {
									pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_2.setInt(1, CustomerDimension.CustomerID);
								}

								if (CustomerDimension.HashedPI == null) {
									pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(2, CustomerDimension.HashedPI);
								}

								if (CustomerDimension.CustomerState == null) {
									pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(3, CustomerDimension.CustomerState);
								}

								if (CustomerDimension.CustomerSegment == null) {
									pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(4, CustomerDimension.CustomerSegment);
								}

								pstmt_tDBOutput_2.addBatch();
								nb_line_tDBOutput_2++;

								batchSizeCounter_tDBOutput_2++;

								if (!whetherReject_tDBOutput_2) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_2 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_2)
											throws Exception {
										try {

											for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
												if (countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
													break;
												}
												counter += countEach_tDBOutput_2;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());

											int countSum_tDBOutput_2 = 0;
											for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_2)
											throws Exception {
										try {

											for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
												if (countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
													break;
												}
												counter += countEach_tDBOutput_2;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());

											for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}
								if ((batchSize_tDBOutput_2 > 0)
										&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {

									insertedCount_tDBOutput_2 = new LimitBytesHelper_tDBOutput_2()
											.limitBytePart1(insertedCount_tDBOutput_2, pstmt_tDBOutput_2);
									rowsToCommitCount_tDBOutput_2 = insertedCount_tDBOutput_2;

									batchSizeCounter_tDBOutput_2 = 0;
								}

								//////////// commit every////////////

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

							} // End of branch "CustomerDimension"

// Start of branch "CustomerLookUp"
							if (CustomerLookUp != null) {

								/**
								 * [tAdvancedHash_CustomerLookUp main ] start
								 */

								currentComponent = "tAdvancedHash_CustomerLookUp";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "CustomerLookUp"

									);
								}

								CustomerLookUpStruct CustomerLookUp_HashRow = new CustomerLookUpStruct();

								CustomerLookUp_HashRow.CustomerID = CustomerLookUp.CustomerID;

								CustomerLookUp_HashRow.HashedPI = CustomerLookUp.HashedPI;

								CustomerLookUp_HashRow.CustomerState = CustomerLookUp.CustomerState;

								CustomerLookUp_HashRow.CustomerSegment = CustomerLookUp.CustomerSegment;

								tHash_Lookup_CustomerLookUp.put(CustomerLookUp_HashRow);

								tos_count_tAdvancedHash_CustomerLookUp++;

								/**
								 * [tAdvancedHash_CustomerLookUp main ] stop
								 */

								/**
								 * [tAdvancedHash_CustomerLookUp process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_CustomerLookUp";

								/**
								 * [tAdvancedHash_CustomerLookUp process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_CustomerLookUp process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_CustomerLookUp";

								/**
								 * [tAdvancedHash_CustomerLookUp process_data_end ] stop
								 */

							} // End of branch "CustomerLookUp"

							/**
							 * [tMap_5 process_data_end ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_end ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tUniqRow_1 process_data_end ] start
						 */

						currentComponent = "tUniqRow_1";

						/**
						 * [tUniqRow_1 process_data_end ] stop
						 */

					} // End of branch "CustomerDim"

					/**
					 * [tMap_10 process_data_end ] start
					 */

					currentComponent = "tMap_10";

					/**
					 * [tMap_10 process_data_end ] stop
					 */

					/**
					 * [tHashInput_1 process_data_end ] start
					 */

					currentComponent = "tHashInput_1";

					/**
					 * [tHashInput_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_1 end ] start
					 */

					currentComponent = "tHashInput_1";

					nb_line_tHashInput_1++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_loading_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);

				ok_Hash.put("tHashInput_1", true);
				end_Hash.put("tHashInput_1", System.currentTimeMillis());

				/**
				 * [tHashInput_1 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DateDim");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DateDimension");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_1;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_1 = 1;
				if (insertKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "DateDim";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "DateDim";
				}
				int count_tDBOutput_1 = 0;

				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					try {
						isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]");
						whetherExist_tDBOutput_1 = true;
					} catch (java.lang.Exception e) {
						globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
						whetherExist_tDBOutput_1 = false;
					}
				}
				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1
								+ "]([date] DATE  not null ,[year] INT  not null ,[month] INT  not null ,[day] INT  not null ,primary key([date]))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_1 + "] WHERE [date] = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1
						+ "] ([date],[year],[month],[day]) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				boolean isShareIdentity_tDBOutput_1 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_11 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
				DateDimensionStruct DateDimension_tmp = new DateDimensionStruct();
// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tJavaFlex_2 begin ] start
				 */

				ok_Hash.put("tJavaFlex_2", false);
				start_Hash.put("tJavaFlex_2", System.currentTimeMillis());

				currentComponent = "tJavaFlex_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tJavaFlex_2 = 0;

				/**
				 * [tJavaFlex_2 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row3.MinDate = aggregated_row_tAggregateRow_1.MinDate_min;
					row3.MaxDate = aggregated_row_tAggregateRow_1.MaxDate_max;
					row3.grpBy = aggregated_row_tAggregateRow_1.grpBy;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_1 main ] start
					 */

					currentComponent = "tJavaRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row3"

						);
					}

					row4.end = TalendDate.parseDate("dd-MM-yyyy", "31-12-" + Integer.toString(row3.MaxDate));
					row4.start = TalendDate.parseDate("dd-MM-yyyy", "01-01-" + Integer.toString(row3.MinDate));
					row4.diff = TalendDate.diffDate(
							TalendDate.parseDate("dd-MM-yyyy", "31-12-" + Integer.toString(row3.MaxDate)),
							TalendDate.parseDate("dd-MM-yyyy", "01-01-" + Integer.toString(row3.MinDate)), "dd");
					nb_line_tJavaRow_1++;

					tos_count_tJavaRow_1++;

					/**
					 * [tJavaRow_1 main ] stop
					 */

					/**
					 * [tJavaRow_1 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_1";

					/**
					 * [tJavaRow_1 process_data_begin ] stop
					 */

					/**
					 * [tJavaFlex_2 main ] start
					 */

					currentComponent = "tJavaFlex_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row4"

						);
					}

					for (int i = 0; i <= row4.diff; i++) {
						row5.date = TalendDate.addDate(row4.start, i, "dd");
						row5.year = TalendDate.getPartOfDate("YEAR", row5.date);
						row5.month = TalendDate.getPartOfDate("MONTH", row5.date) + 1;
						row5.day = TalendDate.getPartOfDate("DAY_OF_MONTH", row5.date);

						tos_count_tJavaFlex_2++;

						/**
						 * [tJavaFlex_2 main ] stop
						 */

						/**
						 * [tJavaFlex_2 process_data_begin ] start
						 */

						currentComponent = "tJavaFlex_2";

						/**
						 * [tJavaFlex_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_11 main ] start
						 */

						currentComponent = "tMap_11";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row5"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_11 = false;
						boolean mainRowRejected_tMap_11 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
							// ###############################
							// # Output tables

							DateDimension = null;

// # Output table : 'DateDimension'
							DateDimension_tmp.date = row5.date;
							DateDimension_tmp.year = row5.year;
							DateDimension_tmp.month = row5.month;
							DateDimension_tmp.day = row5.day;
							DateDimension = DateDimension_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_11 = false;

						tos_count_tMap_11++;

						/**
						 * [tMap_11 main ] stop
						 */

						/**
						 * [tMap_11 process_data_begin ] start
						 */

						currentComponent = "tMap_11";

						/**
						 * [tMap_11 process_data_begin ] stop
						 */
// Start of branch "DateDimension"
						if (DateDimension != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "DateDimension"

								);
							}

							whetherReject_tDBOutput_1 = false;

							if (DateDimension.date != null) {
								pstmt_tDBOutput_1.setTimestamp(1, new java.sql.Timestamp(DateDimension.date.getTime()));
							} else {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.TIMESTAMP);
							}

							java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery();
							int checkCount_tDBOutput_1 = -1;
							while (rs_tDBOutput_1.next()) {
								checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
							}

							if (checkCount_tDBOutput_1 < 1) {
								if (DateDimension.date != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(1,
											new java.sql.Timestamp(DateDimension.date.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.TIMESTAMP);
								}

								pstmtInsert_tDBOutput_1.setInt(2, DateDimension.year);

								pstmtInsert_tDBOutput_1.setInt(3, DateDimension.month);

								pstmtInsert_tDBOutput_1.setInt(4, DateDimension.day);

								try {
									int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
									insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;
								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;

									System.err.print(e.getMessage());
								}
							}
							if (!whetherReject_tDBOutput_1) {
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_1 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_1)
										throws Exception {
									try {

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
												break;
											}
											counter += countEach_tDBOutput_1;
										}

									} catch (java.sql.BatchUpdateException e) {
										globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_1)
										throws Exception {
									try {

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
												break;
											}
											counter += countEach_tDBOutput_1;
										}

									} catch (java.sql.BatchUpdateException e) {
										globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "DateDimension"

						/**
						 * [tMap_11 process_data_end ] start
						 */

						currentComponent = "tMap_11";

						/**
						 * [tMap_11 process_data_end ] stop
						 */

						/**
						 * [tJavaFlex_2 process_data_end ] start
						 */

						currentComponent = "tJavaFlex_2";

						/**
						 * [tJavaFlex_2 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGIN process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGIN";

						/**
						 * [tAggregateRow_1_AGGIN process_data_end ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGIN end ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGIN";

					} // G_AggR_600

					ok_Hash.put("tAggregateRow_1_AGGIN", true);
					end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

					/**
					 * [tAggregateRow_1_AGGIN end ] stop
					 */

					/**
					 * [tJavaRow_1 end ] start
					 */

					currentComponent = "tJavaRow_1";

					globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
					}

					ok_Hash.put("tJavaRow_1", true);
					end_Hash.put("tJavaRow_1", System.currentTimeMillis());

					/**
					 * [tJavaRow_1 end ] stop
					 */

					/**
					 * [tJavaFlex_2 end ] start
					 */

					currentComponent = "tJavaFlex_2";

				}

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tJavaFlex_2", true);
				end_Hash.put("tJavaFlex_2", System.currentTimeMillis());

				/**
				 * [tJavaFlex_2 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DateDimension");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "CustomerDim");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							if (countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							countSum_tDBOutput_2 += countEach_tDBOutput_2;
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(e.getMessage());

				}
				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");

				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "CustomerDimension");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_CustomerLookUp end ] start
				 */

				currentComponent = "tAdvancedHash_CustomerLookUp";

				tHash_Lookup_CustomerLookUp.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "CustomerLookUp");
				}

				ok_Hash.put("tAdvancedHash_CustomerLookUp", true);
				end_Hash.put("tAdvancedHash_CustomerLookUp", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_CustomerLookUp end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tHashInput_1 finally ] start
				 */

				currentComponent = "tHashInput_1";

				/**
				 * [tHashInput_1 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tJavaFlex_2 finally ] start
				 */

				currentComponent = "tJavaFlex_2";

				/**
				 * [tJavaFlex_2 finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_CustomerLookUp finally ] start
				 */

				currentComponent = "tAdvancedHash_CustomerLookUp";

				/**
				 * [tAdvancedHash_CustomerLookUp finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}

	public static class ProductDimensionStruct implements routines.system.IPersistableRow<ProductDimensionStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ProductDimensionStruct other = (ProductDimensionStruct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(ProductDimensionStruct other) {

			other.ProductID = this.ProductID;
			other.ProductName = this.ProductName;
			other.ProductCategory = this.ProductCategory;
			other.ProductSubCategory = this.ProductSubCategory;

		}

		public void copyKeysDataTo(ProductDimensionStruct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ProductDimensionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ProductLookUpStruct
			implements routines.system.IPersistableComparableLookupRow<ProductLookUpStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ProductName == null) ? 0 : this.ProductName.hashCode());

				result = prime * result + ((this.ProductCategory == null) ? 0 : this.ProductCategory.hashCode());

				result = prime * result + ((this.ProductSubCategory == null) ? 0 : this.ProductSubCategory.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ProductLookUpStruct other = (ProductLookUpStruct) obj;

			if (this.ProductName == null) {
				if (other.ProductName != null)
					return false;

			} else if (!this.ProductName.equals(other.ProductName))

				return false;

			if (this.ProductCategory == null) {
				if (other.ProductCategory != null)
					return false;

			} else if (!this.ProductCategory.equals(other.ProductCategory))

				return false;

			if (this.ProductSubCategory == null) {
				if (other.ProductSubCategory != null)
					return false;

			} else if (!this.ProductSubCategory.equals(other.ProductSubCategory))

				return false;

			return true;
		}

		public void copyDataTo(ProductLookUpStruct other) {

			other.ProductID = this.ProductID;
			other.ProductName = this.ProductName;
			other.ProductCategory = this.ProductCategory;
			other.ProductSubCategory = this.ProductSubCategory;

		}

		public void copyKeysDataTo(ProductLookUpStruct other) {

			other.ProductName = this.ProductName;
			other.ProductCategory = this.ProductCategory;
			other.ProductSubCategory = this.ProductSubCategory;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ProductID = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.ProductID = objectIn.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ProductLookUpStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductName, other.ProductName);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ProductCategory, other.ProductCategory);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ProductSubCategory, other.ProductSubCategory);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ProductDimStruct implements routines.system.IPersistableRow<ProductDimStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ProductDimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		public Integer ProductPrice;

		public Integer getProductPrice() {
			return this.ProductPrice;
		}

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		public Integer QuantitySold;

		public Integer getQuantitySold() {
			return this.QuantitySold;
		}

		public Float TotalAmount;

		public Float getTotalAmount() {
			return this.TotalAmount;
		}

		public Float DiscountAmount;

		public Float getDiscountAmount() {
			return this.DiscountAmount;
		}

		public Float NetAmount;

		public Float getNetAmount() {
			return this.NetAmount;
		}

		public Integer StockReceived;

		public Integer getStockReceived() {
			return this.StockReceived;
		}

		public Integer StockSold;

		public Integer getStockSold() {
			return this.StockSold;
		}

		public Integer StockOnHand;

		public Integer getStockOnHand() {
			return this.StockOnHand;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date=" + String.valueOf(Date));
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append(",ProductPrice=" + String.valueOf(ProductPrice));
			sb.append(",HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append(",SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append(",ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append(",QuantitySold=" + String.valueOf(QuantitySold));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",DiscountAmount=" + String.valueOf(DiscountAmount));
			sb.append(",NetAmount=" + String.valueOf(NetAmount));
			sb.append(",StockReceived=" + String.valueOf(StockReceived));
			sb.append(",StockSold=" + String.valueOf(StockSold));
			sb.append(",StockOnHand=" + String.valueOf(StockOnHand));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				ProductDimStruct ProductDim = new ProductDimStruct();
				row6Struct row6 = new row6Struct();
				ProductDimensionStruct ProductDimension = new ProductDimensionStruct();
				ProductLookUpStruct ProductLookUp = new ProductLookUpStruct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ProductDimension");
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rowsToCommitCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;
				String dbschema_tDBOutput_3 = null;
				String tableName_tDBOutput_3 = null;
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
				long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_3;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_3 = 1;
				if (updateKeyCount_tDBOutput_3 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_3 == 4 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "ProductDim";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].[" + "ProductDim";
				}
				int count_tDBOutput_3 = 0;

				boolean whetherExist_tDBOutput_3 = false;
				try (java.sql.Statement isExistStmt_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					try {
						isExistStmt_tDBOutput_3.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_3 + "]");
						whetherExist_tDBOutput_3 = true;
					} catch (java.lang.Exception e) {
						globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());
						whetherExist_tDBOutput_3 = false;
					}
				}
				if (!whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
						stmtCreate_tDBOutput_3.execute("CREATE TABLE [" + tableName_tDBOutput_3
								+ "]([ProductID] INT  not null ,[ProductName] VARCHAR(50)  ,[ProductCategory] VARCHAR(50)  ,[ProductSubCategory] VARCHAR(50)  ,primary key([ProductID]))");
					}
				}
				String update_tDBOutput_3 = "UPDATE [" + tableName_tDBOutput_3
						+ "] SET [ProductName] = ?,[ProductCategory] = ?,[ProductSubCategory] = ? WHERE [ProductID] = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(update_tDBOutput_3);
				resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);
				String insert_tDBOutput_3 = "INSERT INTO [" + tableName_tDBOutput_3
						+ "] ([ProductID],[ProductName],[ProductCategory],[ProductSubCategory]) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
				boolean isShareIdentity_tDBOutput_3 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tAdvancedHash_ProductLookUp begin ] start
				 */

				ok_Hash.put("tAdvancedHash_ProductLookUp", false);
				start_Hash.put("tAdvancedHash_ProductLookUp", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_ProductLookUp";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ProductLookUp");
				}

				int tos_count_tAdvancedHash_ProductLookUp = 0;

				// connection name:ProductLookUp
				// source node:tMap_2 - inputs:(row6)
				// outputs:(ProductDimension,ProductLookUp,ProductLookUp) | target
				// node:tAdvancedHash_ProductLookUp - inputs:(ProductLookUp) outputs:()
				// linked node: tMap_6 -
				// inputs:(row10,CustomerLookUp,ProductLookUp,SupplierLookUp,ChipperLookUp)
				// outputs:(FactSales,FactInventory)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ProductLookUp = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductLookUpStruct> tHash_Lookup_ProductLookUp = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<ProductLookUpStruct>getLookup(matchingModeEnum_ProductLookUp);

				globalMap.put("tHash_Lookup_ProductLookUp", tHash_Lookup_ProductLookUp);

				/**
				 * [tAdvancedHash_ProductLookUp begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					int ProductID;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				ProductDimensionStruct ProductDimension_tmp = new ProductDimensionStruct();
				ProductLookUpStruct ProductLookUp_tmp = new ProductLookUpStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ProductDim");
				}

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ProductName;
					String ProductCategory;
					String ProductSubCategory;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ProductName == null) ? 0 : this.ProductName.hashCode());

							result = prime * result
									+ ((this.ProductCategory == null) ? 0 : this.ProductCategory.hashCode());

							result = prime * result
									+ ((this.ProductSubCategory == null) ? 0 : this.ProductSubCategory.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.ProductName == null) {
							if (other.ProductName != null)
								return false;

						} else if (!this.ProductName.equals(other.ProductName))

							return false;

						if (this.ProductCategory == null) {
							if (other.ProductCategory != null)
								return false;

						} else if (!this.ProductCategory.equals(other.ProductCategory))

							return false;

						if (this.ProductSubCategory == null) {
							if (other.ProductSubCategory != null)
								return false;

						} else if (!this.ProductSubCategory.equals(other.ProductSubCategory))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				ProductDimStruct ProductDim_tmp = new ProductDimStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tHashInput_6 begin ] start
				 */

				ok_Hash.put("tHashInput_6", false);
				start_Hash.put("tHashInput_6", System.currentTimeMillis());

				currentComponent = "tHashInput_6";

				int tos_count_tHashInput_6 = 0;

				int nb_line_tHashInput_6 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_6 = mf_tHashInput_6
						.getAdvancedMemoryHashFile("tHashFile_loading_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_6 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row2Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
				while (iterator_tHashInput_6.hasNext()) {
					row2Struct next_tHashInput_6 = iterator_tHashInput_6.next();

					row1.Date = next_tHashInput_6.Date;
					row1.ProductName = next_tHashInput_6.ProductName;
					row1.ProductCategory = next_tHashInput_6.ProductCategory;
					row1.ProductSubCategory = next_tHashInput_6.ProductSubCategory;
					row1.ProductPrice = next_tHashInput_6.ProductPrice;
					row1.HashedPI = next_tHashInput_6.HashedPI;
					row1.CustomerState = next_tHashInput_6.CustomerState;
					row1.CustomerSegment = next_tHashInput_6.CustomerSegment;
					row1.SupplierName = next_tHashInput_6.SupplierName;
					row1.SupplierLocation = next_tHashInput_6.SupplierLocation;
					row1.ShipperName = next_tHashInput_6.ShipperName;
					row1.ShippingMethod = next_tHashInput_6.ShippingMethod;
					row1.QuantitySold = next_tHashInput_6.QuantitySold;
					row1.TotalAmount = next_tHashInput_6.TotalAmount;
					row1.DiscountAmount = next_tHashInput_6.DiscountAmount;
					row1.NetAmount = next_tHashInput_6.NetAmount;
					row1.StockReceived = next_tHashInput_6.StockReceived;
					row1.StockSold = next_tHashInput_6.StockSold;
					row1.StockOnHand = next_tHashInput_6.StockOnHand;

					/**
					 * [tHashInput_6 begin ] stop
					 */

					/**
					 * [tHashInput_6 main ] start
					 */

					currentComponent = "tHashInput_6";

					tos_count_tHashInput_6++;

					/**
					 * [tHashInput_6 main ] stop
					 */

					/**
					 * [tHashInput_6 process_data_begin ] start
					 */

					currentComponent = "tHashInput_6";

					/**
					 * [tHashInput_6 process_data_begin ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row1"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						ProductDim = null;

// # Output table : 'ProductDim'
						ProductDim_tmp.ProductName = row1.ProductName;
						ProductDim_tmp.ProductCategory = row1.ProductCategory;
						ProductDim_tmp.ProductSubCategory = row1.ProductSubCategory;
						ProductDim = ProductDim_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */

					/**
					 * [tMap_1 process_data_begin ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_begin ] stop
					 */
// Start of branch "ProductDim"
					if (ProductDim != null) {

						/**
						 * [tUniqRow_2 main ] start
						 */

						currentComponent = "tUniqRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "ProductDim"

							);
						}

						row6 = null;
						if (ProductDim.ProductName == null) {
							finder_tUniqRow_2.ProductName = null;
						} else {
							finder_tUniqRow_2.ProductName = ProductDim.ProductName.toLowerCase();
						}
						if (ProductDim.ProductCategory == null) {
							finder_tUniqRow_2.ProductCategory = null;
						} else {
							finder_tUniqRow_2.ProductCategory = ProductDim.ProductCategory.toLowerCase();
						}
						if (ProductDim.ProductSubCategory == null) {
							finder_tUniqRow_2.ProductSubCategory = null;
						} else {
							finder_tUniqRow_2.ProductSubCategory = ProductDim.ProductSubCategory.toLowerCase();
						}
						finder_tUniqRow_2.hashCodeDirty = true;
						if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
							KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

							if (ProductDim.ProductName == null) {
								new_tUniqRow_2.ProductName = null;
							} else {
								new_tUniqRow_2.ProductName = ProductDim.ProductName.toLowerCase();
							}
							if (ProductDim.ProductCategory == null) {
								new_tUniqRow_2.ProductCategory = null;
							} else {
								new_tUniqRow_2.ProductCategory = ProductDim.ProductCategory.toLowerCase();
							}
							if (ProductDim.ProductSubCategory == null) {
								new_tUniqRow_2.ProductSubCategory = null;
							} else {
								new_tUniqRow_2.ProductSubCategory = ProductDim.ProductSubCategory.toLowerCase();
							}

							keystUniqRow_2.add(new_tUniqRow_2);
							if (row6 == null) {

								row6 = new row6Struct();
							}
							row6.ProductName = ProductDim.ProductName;
							row6.ProductCategory = ProductDim.ProductCategory;
							row6.ProductSubCategory = ProductDim.ProductSubCategory;
							nb_uniques_tUniqRow_2++;
						} else {
							nb_duplicates_tUniqRow_2++;
						}

						tos_count_tUniqRow_2++;

						/**
						 * [tUniqRow_2 main ] stop
						 */

						/**
						 * [tUniqRow_2 process_data_begin ] start
						 */

						currentComponent = "tUniqRow_2";

						/**
						 * [tUniqRow_2 process_data_begin ] stop
						 */
// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row6"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;
								Var.ProductID = Numeric.sequence("ProductID", 1, 1);// ###############################
								// ###############################
								// # Output tables

								ProductDimension = null;
								ProductLookUp = null;

// # Output table : 'ProductDimension'
								ProductDimension_tmp.ProductID = Var.ProductID;
								ProductDimension_tmp.ProductName = row6.ProductName;
								ProductDimension_tmp.ProductCategory = row6.ProductCategory;
								ProductDimension_tmp.ProductSubCategory = row6.ProductSubCategory;
								ProductDimension = ProductDimension_tmp;

// # Output table : 'ProductLookUp'
								ProductLookUp_tmp.ProductID = Var.ProductID;
								ProductLookUp_tmp.ProductName = row6.ProductName;
								ProductLookUp_tmp.ProductCategory = row6.ProductCategory;
								ProductLookUp_tmp.ProductSubCategory = row6.ProductSubCategory;
								ProductLookUp = ProductLookUp_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "ProductDimension"
							if (ProductDimension != null) {

								/**
								 * [tDBOutput_3 main ] start
								 */

								currentComponent = "tDBOutput_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "ProductDimension"

									);
								}

								whetherReject_tDBOutput_3 = false;
								int updateFlag_tDBOutput_3 = 0;
								if (ProductDimension.ProductName == null) {
									pstmtUpdate_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(1, ProductDimension.ProductName);
								}

								if (ProductDimension.ProductCategory == null) {
									pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(2, ProductDimension.ProductCategory);
								}

								if (ProductDimension.ProductSubCategory == null) {
									pstmtUpdate_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(3, ProductDimension.ProductSubCategory);
								}

								pstmtUpdate_tDBOutput_3.setInt(4 + count_tDBOutput_3, ProductDimension.ProductID);

								try {
									updateFlag_tDBOutput_3 = pstmtUpdate_tDBOutput_3.executeUpdate();
									updatedCount_tDBOutput_3 = updatedCount_tDBOutput_3 + updateFlag_tDBOutput_3;
									rowsToCommitCount_tDBOutput_3 += updateFlag_tDBOutput_3;
									if (updateFlag_tDBOutput_3 == 0) {

										pstmtInsert_tDBOutput_3.setInt(1, ProductDimension.ProductID);

										if (ProductDimension.ProductName == null) {
											pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_3.setString(2, ProductDimension.ProductName);
										}

										if (ProductDimension.ProductCategory == null) {
											pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_3.setString(3, ProductDimension.ProductCategory);
										}

										if (ProductDimension.ProductSubCategory == null) {
											pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_3.setString(4, ProductDimension.ProductSubCategory);
										}

										int processedCount_tDBOutput_3 = pstmtInsert_tDBOutput_3.executeUpdate();
										insertedCount_tDBOutput_3 += processedCount_tDBOutput_3;
										rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
										nb_line_tDBOutput_3++;
									} else {
										nb_line_tDBOutput_3++;

									}
								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());
									whetherReject_tDBOutput_3 = true;
									nb_line_tDBOutput_3++;

									System.err.println(e.getMessage());
								} finally {

								}
								if (!whetherReject_tDBOutput_3) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_3 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_3)
											throws Exception {
										try {

											for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
												if (countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
													break;
												}
												counter += countEach_tDBOutput_3;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());

											int countSum_tDBOutput_3 = 0;
											for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_3)
											throws Exception {
										try {

											for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
												if (countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
													break;
												}
												counter += countEach_tDBOutput_3;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());

											for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								tos_count_tDBOutput_3++;

								/**
								 * [tDBOutput_3 main ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_end ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_end ] stop
								 */

							} // End of branch "ProductDimension"

// Start of branch "ProductLookUp"
							if (ProductLookUp != null) {

								/**
								 * [tAdvancedHash_ProductLookUp main ] start
								 */

								currentComponent = "tAdvancedHash_ProductLookUp";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "ProductLookUp"

									);
								}

								ProductLookUpStruct ProductLookUp_HashRow = new ProductLookUpStruct();

								ProductLookUp_HashRow.ProductID = ProductLookUp.ProductID;

								ProductLookUp_HashRow.ProductName = ProductLookUp.ProductName;

								ProductLookUp_HashRow.ProductCategory = ProductLookUp.ProductCategory;

								ProductLookUp_HashRow.ProductSubCategory = ProductLookUp.ProductSubCategory;

								tHash_Lookup_ProductLookUp.put(ProductLookUp_HashRow);

								tos_count_tAdvancedHash_ProductLookUp++;

								/**
								 * [tAdvancedHash_ProductLookUp main ] stop
								 */

								/**
								 * [tAdvancedHash_ProductLookUp process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_ProductLookUp";

								/**
								 * [tAdvancedHash_ProductLookUp process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_ProductLookUp process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_ProductLookUp";

								/**
								 * [tAdvancedHash_ProductLookUp process_data_end ] stop
								 */

							} // End of branch "ProductLookUp"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tUniqRow_2 process_data_end ] start
						 */

						currentComponent = "tUniqRow_2";

						/**
						 * [tUniqRow_2 process_data_end ] stop
						 */

					} // End of branch "ProductDim"

					/**
					 * [tMap_1 process_data_end ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_6 process_data_end ] start
					 */

					currentComponent = "tHashInput_6";

					/**
					 * [tHashInput_6 process_data_end ] stop
					 */

					/**
					 * [tHashInput_6 end ] start
					 */

					currentComponent = "tHashInput_6";

					nb_line_tHashInput_6++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_loading_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);

				ok_Hash.put("tHashInput_6", true);
				end_Hash.put("tHashInput_6", System.currentTimeMillis());

				/**
				 * [tHashInput_6 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ProductDim");
				}

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				if (pstmtUpdate_tDBOutput_3 != null) {
					pstmtUpdate_tDBOutput_3.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_3");
				}
				if (pstmtInsert_tDBOutput_3 != null) {
					pstmtInsert_tDBOutput_3.close();
					resourceMap.remove("pstmtInsert_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ProductDimension");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_ProductLookUp end ] start
				 */

				currentComponent = "tAdvancedHash_ProductLookUp";

				tHash_Lookup_ProductLookUp.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ProductLookUp");
				}

				ok_Hash.put("tAdvancedHash_ProductLookUp", true);
				end_Hash.put("tAdvancedHash_ProductLookUp", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_ProductLookUp end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_6 finally ] start
				 */

				currentComponent = "tHashInput_6";

				/**
				 * [tHashInput_6 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
					if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_3")) != null) {
						pstmtUpdateToClose_tDBOutput_3.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
					if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_3")) != null) {
						pstmtInsertToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_ProductLookUp finally ] start
				 */

				currentComponent = "tAdvancedHash_ProductLookUp";

				/**
				 * [tAdvancedHash_ProductLookUp finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}

	public static class SupplierDimensionStruct implements routines.system.IPersistableRow<SupplierDimensionStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SupplierID;

		public int getSupplierID() {
			return this.SupplierID;
		}

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SupplierID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final SupplierDimensionStruct other = (SupplierDimensionStruct) obj;

			if (this.SupplierID != other.SupplierID)
				return false;

			return true;
		}

		public void copyDataTo(SupplierDimensionStruct other) {

			other.SupplierID = this.SupplierID;
			other.SupplierName = this.SupplierName;
			other.SupplierLocation = this.SupplierLocation;

		}

		public void copyKeysDataTo(SupplierDimensionStruct other) {

			other.SupplierID = this.SupplierID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.SupplierID = dis.readInt();

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.SupplierID = dis.readInt();

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SupplierID);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.SupplierID);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SupplierID=" + String.valueOf(SupplierID));
			sb.append(",SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SupplierDimensionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SupplierID, other.SupplierID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SupplierLookUpStruct
			implements routines.system.IPersistableComparableLookupRow<SupplierLookUpStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SupplierID;

		public int getSupplierID() {
			return this.SupplierID;
		}

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.SupplierName == null) ? 0 : this.SupplierName.hashCode());

				result = prime * result + ((this.SupplierLocation == null) ? 0 : this.SupplierLocation.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final SupplierLookUpStruct other = (SupplierLookUpStruct) obj;

			if (this.SupplierName == null) {
				if (other.SupplierName != null)
					return false;

			} else if (!this.SupplierName.equals(other.SupplierName))

				return false;

			if (this.SupplierLocation == null) {
				if (other.SupplierLocation != null)
					return false;

			} else if (!this.SupplierLocation.equals(other.SupplierLocation))

				return false;

			return true;
		}

		public void copyDataTo(SupplierLookUpStruct other) {

			other.SupplierID = this.SupplierID;
			other.SupplierName = this.SupplierName;
			other.SupplierLocation = this.SupplierLocation;

		}

		public void copyKeysDataTo(SupplierLookUpStruct other) {

			other.SupplierName = this.SupplierName;
			other.SupplierLocation = this.SupplierLocation;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.SupplierID = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.SupplierID = objectIn.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.SupplierID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.SupplierID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SupplierID=" + String.valueOf(SupplierID));
			sb.append(",SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SupplierLookUpStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SupplierName, other.SupplierName);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SupplierLocation, other.SupplierLocation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SupplierDimStruct implements routines.system.IPersistableRow<SupplierDimStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SupplierDimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		public Integer ProductPrice;

		public Integer getProductPrice() {
			return this.ProductPrice;
		}

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		public Integer QuantitySold;

		public Integer getQuantitySold() {
			return this.QuantitySold;
		}

		public Float TotalAmount;

		public Float getTotalAmount() {
			return this.TotalAmount;
		}

		public Float DiscountAmount;

		public Float getDiscountAmount() {
			return this.DiscountAmount;
		}

		public Float NetAmount;

		public Float getNetAmount() {
			return this.NetAmount;
		}

		public Integer StockReceived;

		public Integer getStockReceived() {
			return this.StockReceived;
		}

		public Integer StockSold;

		public Integer getStockSold() {
			return this.StockSold;
		}

		public Integer StockOnHand;

		public Integer getStockOnHand() {
			return this.StockOnHand;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date=" + String.valueOf(Date));
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append(",ProductPrice=" + String.valueOf(ProductPrice));
			sb.append(",HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append(",SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append(",ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append(",QuantitySold=" + String.valueOf(QuantitySold));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",DiscountAmount=" + String.valueOf(DiscountAmount));
			sb.append(",NetAmount=" + String.valueOf(NetAmount));
			sb.append(",StockReceived=" + String.valueOf(StockReceived));
			sb.append(",StockSold=" + String.valueOf(StockSold));
			sb.append(",StockOnHand=" + String.valueOf(StockOnHand));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				SupplierDimStruct SupplierDim = new SupplierDimStruct();
				row7Struct row7 = new row7Struct();
				SupplierDimensionStruct SupplierDimension = new SupplierDimensionStruct();
				SupplierLookUpStruct SupplierLookUp = new SupplierLookUpStruct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SupplierDimension");
				}

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rowsToCommitCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;
				String dbschema_tDBOutput_4 = null;
				String tableName_tDBOutput_4 = null;
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
				long year1_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_4;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_4 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_4 = 1;
				if (updateKeyCount_tDBOutput_4 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_4 == 3 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = "SupplierDim";
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "].[" + "SupplierDim";
				}
				int count_tDBOutput_4 = 0;

				boolean whetherExist_tDBOutput_4 = false;
				try (java.sql.Statement isExistStmt_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					try {
						isExistStmt_tDBOutput_4.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_4 + "]");
						whetherExist_tDBOutput_4 = true;
					} catch (java.lang.Exception e) {
						globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());
						whetherExist_tDBOutput_4 = false;
					}
				}
				if (!whetherExist_tDBOutput_4) {
					try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
						stmtCreate_tDBOutput_4.execute("CREATE TABLE [" + tableName_tDBOutput_4
								+ "]([SupplierID] INT  not null ,[SupplierName] VARCHAR(60)  ,[SupplierLocation] VARCHAR(60)  ,primary key([SupplierID]))");
					}
				}
				String update_tDBOutput_4 = "UPDATE [" + tableName_tDBOutput_4
						+ "] SET [SupplierName] = ?,[SupplierLocation] = ? WHERE [SupplierID] = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(update_tDBOutput_4);
				resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);
				String insert_tDBOutput_4 = "INSERT INTO [" + tableName_tDBOutput_4
						+ "] ([SupplierID],[SupplierName],[SupplierLocation]) VALUES (?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
				boolean isShareIdentity_tDBOutput_4 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tAdvancedHash_SupplierLookUp begin ] start
				 */

				ok_Hash.put("tAdvancedHash_SupplierLookUp", false);
				start_Hash.put("tAdvancedHash_SupplierLookUp", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_SupplierLookUp";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SupplierLookUp");
				}

				int tos_count_tAdvancedHash_SupplierLookUp = 0;

				// connection name:SupplierLookUp
				// source node:tMap_3 - inputs:(row7)
				// outputs:(SupplierDimension,SupplierLookUp,SupplierLookUp) | target
				// node:tAdvancedHash_SupplierLookUp - inputs:(SupplierLookUp) outputs:()
				// linked node: tMap_6 -
				// inputs:(row10,CustomerLookUp,ProductLookUp,SupplierLookUp,ChipperLookUp)
				// outputs:(FactSales,FactInventory)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_SupplierLookUp = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SupplierLookUpStruct> tHash_Lookup_SupplierLookUp = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<SupplierLookUpStruct>getLookup(matchingModeEnum_SupplierLookUp);

				globalMap.put("tHash_Lookup_SupplierLookUp", tHash_Lookup_SupplierLookUp);

				/**
				 * [tAdvancedHash_SupplierLookUp begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
					int SupplierID;
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SupplierDimensionStruct SupplierDimension_tmp = new SupplierDimensionStruct();
				SupplierLookUpStruct SupplierLookUp_tmp = new SupplierLookUpStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SupplierDim");
				}

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String SupplierName;
					String SupplierLocation;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.SupplierName == null) ? 0 : this.SupplierName.hashCode());

							result = prime * result
									+ ((this.SupplierLocation == null) ? 0 : this.SupplierLocation.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.SupplierName == null) {
							if (other.SupplierName != null)
								return false;

						} else if (!this.SupplierName.equals(other.SupplierName))

							return false;

						if (this.SupplierLocation == null) {
							if (other.SupplierLocation != null)
								return false;

						} else if (!this.SupplierLocation.equals(other.SupplierLocation))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SupplierDimStruct SupplierDim_tmp = new SupplierDimStruct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tHashInput_2 begin ] start
				 */

				ok_Hash.put("tHashInput_2", false);
				start_Hash.put("tHashInput_2", System.currentTimeMillis());

				currentComponent = "tHashInput_2";

				int tos_count_tHashInput_2 = 0;

				int nb_line_tHashInput_2 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_2 = mf_tHashInput_2
						.getAdvancedMemoryHashFile("tHashFile_loading_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_2 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row2Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
				while (iterator_tHashInput_2.hasNext()) {
					row2Struct next_tHashInput_2 = iterator_tHashInput_2.next();

					row11.Date = next_tHashInput_2.Date;
					row11.ProductName = next_tHashInput_2.ProductName;
					row11.ProductCategory = next_tHashInput_2.ProductCategory;
					row11.ProductSubCategory = next_tHashInput_2.ProductSubCategory;
					row11.ProductPrice = next_tHashInput_2.ProductPrice;
					row11.HashedPI = next_tHashInput_2.HashedPI;
					row11.CustomerState = next_tHashInput_2.CustomerState;
					row11.CustomerSegment = next_tHashInput_2.CustomerSegment;
					row11.SupplierName = next_tHashInput_2.SupplierName;
					row11.SupplierLocation = next_tHashInput_2.SupplierLocation;
					row11.ShipperName = next_tHashInput_2.ShipperName;
					row11.ShippingMethod = next_tHashInput_2.ShippingMethod;
					row11.QuantitySold = next_tHashInput_2.QuantitySold;
					row11.TotalAmount = next_tHashInput_2.TotalAmount;
					row11.DiscountAmount = next_tHashInput_2.DiscountAmount;
					row11.NetAmount = next_tHashInput_2.NetAmount;
					row11.StockReceived = next_tHashInput_2.StockReceived;
					row11.StockSold = next_tHashInput_2.StockSold;
					row11.StockOnHand = next_tHashInput_2.StockOnHand;

					/**
					 * [tHashInput_2 begin ] stop
					 */

					/**
					 * [tHashInput_2 main ] start
					 */

					currentComponent = "tHashInput_2";

					tos_count_tHashInput_2++;

					/**
					 * [tHashInput_2 main ] stop
					 */

					/**
					 * [tHashInput_2 process_data_begin ] start
					 */

					currentComponent = "tHashInput_2";

					/**
					 * [tHashInput_2 process_data_begin ] stop
					 */

					/**
					 * [tMap_7 main ] start
					 */

					currentComponent = "tMap_7";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row11"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_7 = false;
					boolean mainRowRejected_tMap_7 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
						// ###############################
						// # Output tables

						SupplierDim = null;

// # Output table : 'SupplierDim'
						SupplierDim_tmp.SupplierName = row11.SupplierName;
						SupplierDim_tmp.SupplierLocation = row11.SupplierLocation;
						SupplierDim = SupplierDim_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_7 = false;

					tos_count_tMap_7++;

					/**
					 * [tMap_7 main ] stop
					 */

					/**
					 * [tMap_7 process_data_begin ] start
					 */

					currentComponent = "tMap_7";

					/**
					 * [tMap_7 process_data_begin ] stop
					 */
// Start of branch "SupplierDim"
					if (SupplierDim != null) {

						/**
						 * [tUniqRow_3 main ] start
						 */

						currentComponent = "tUniqRow_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "SupplierDim"

							);
						}

						row7 = null;
						if (SupplierDim.SupplierName == null) {
							finder_tUniqRow_3.SupplierName = null;
						} else {
							finder_tUniqRow_3.SupplierName = SupplierDim.SupplierName.toLowerCase();
						}
						if (SupplierDim.SupplierLocation == null) {
							finder_tUniqRow_3.SupplierLocation = null;
						} else {
							finder_tUniqRow_3.SupplierLocation = SupplierDim.SupplierLocation.toLowerCase();
						}
						finder_tUniqRow_3.hashCodeDirty = true;
						if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
							KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

							if (SupplierDim.SupplierName == null) {
								new_tUniqRow_3.SupplierName = null;
							} else {
								new_tUniqRow_3.SupplierName = SupplierDim.SupplierName.toLowerCase();
							}
							if (SupplierDim.SupplierLocation == null) {
								new_tUniqRow_3.SupplierLocation = null;
							} else {
								new_tUniqRow_3.SupplierLocation = SupplierDim.SupplierLocation.toLowerCase();
							}

							keystUniqRow_3.add(new_tUniqRow_3);
							if (row7 == null) {

								row7 = new row7Struct();
							}
							row7.SupplierName = SupplierDim.SupplierName;
							row7.SupplierLocation = SupplierDim.SupplierLocation;
							nb_uniques_tUniqRow_3++;
						} else {
							nb_duplicates_tUniqRow_3++;
						}

						tos_count_tUniqRow_3++;

						/**
						 * [tUniqRow_3 main ] stop
						 */

						/**
						 * [tUniqRow_3 process_data_begin ] start
						 */

						currentComponent = "tUniqRow_3";

						/**
						 * [tUniqRow_3 process_data_begin ] stop
						 */
// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row7"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;
								Var.SupplierID = Numeric.sequence("SupplierID", 1, 1);// ###############################
								// ###############################
								// # Output tables

								SupplierDimension = null;
								SupplierLookUp = null;

// # Output table : 'SupplierDimension'
								SupplierDimension_tmp.SupplierID = Var.SupplierID;
								SupplierDimension_tmp.SupplierName = row7.SupplierName;
								SupplierDimension_tmp.SupplierLocation = row7.SupplierLocation;
								SupplierDimension = SupplierDimension_tmp;

// # Output table : 'SupplierLookUp'
								SupplierLookUp_tmp.SupplierID = Var.SupplierID;
								SupplierLookUp_tmp.SupplierName = row7.SupplierName;
								SupplierLookUp_tmp.SupplierLocation = row7.SupplierLocation;
								SupplierLookUp = SupplierLookUp_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */

							/**
							 * [tMap_3 process_data_begin ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_begin ] stop
							 */
// Start of branch "SupplierDimension"
							if (SupplierDimension != null) {

								/**
								 * [tDBOutput_4 main ] start
								 */

								currentComponent = "tDBOutput_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "SupplierDimension"

									);
								}

								whetherReject_tDBOutput_4 = false;
								int updateFlag_tDBOutput_4 = 0;
								if (SupplierDimension.SupplierName == null) {
									pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_4.setString(1, SupplierDimension.SupplierName);
								}

								if (SupplierDimension.SupplierLocation == null) {
									pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_4.setString(2, SupplierDimension.SupplierLocation);
								}

								pstmtUpdate_tDBOutput_4.setInt(3 + count_tDBOutput_4, SupplierDimension.SupplierID);

								try {
									updateFlag_tDBOutput_4 = pstmtUpdate_tDBOutput_4.executeUpdate();
									updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4 + updateFlag_tDBOutput_4;
									rowsToCommitCount_tDBOutput_4 += updateFlag_tDBOutput_4;
									if (updateFlag_tDBOutput_4 == 0) {

										pstmtInsert_tDBOutput_4.setInt(1, SupplierDimension.SupplierID);

										if (SupplierDimension.SupplierName == null) {
											pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(2, SupplierDimension.SupplierName);
										}

										if (SupplierDimension.SupplierLocation == null) {
											pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(3, SupplierDimension.SupplierLocation);
										}

										int processedCount_tDBOutput_4 = pstmtInsert_tDBOutput_4.executeUpdate();
										insertedCount_tDBOutput_4 += processedCount_tDBOutput_4;
										rowsToCommitCount_tDBOutput_4 += processedCount_tDBOutput_4;
										nb_line_tDBOutput_4++;
									} else {
										nb_line_tDBOutput_4++;

									}
								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());
									whetherReject_tDBOutput_4 = true;
									nb_line_tDBOutput_4++;

									System.err.println(e.getMessage());
								} finally {

								}
								if (!whetherReject_tDBOutput_4) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_4 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_4)
											throws Exception {
										try {

											for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
												if (countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
													break;
												}
												counter += countEach_tDBOutput_4;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());

											int countSum_tDBOutput_4 = 0;
											for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_4)
											throws Exception {
										try {

											for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
												if (countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
													break;
												}
												counter += countEach_tDBOutput_4;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());

											for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								tos_count_tDBOutput_4++;

								/**
								 * [tDBOutput_4 main ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_end ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_end ] stop
								 */

							} // End of branch "SupplierDimension"

// Start of branch "SupplierLookUp"
							if (SupplierLookUp != null) {

								/**
								 * [tAdvancedHash_SupplierLookUp main ] start
								 */

								currentComponent = "tAdvancedHash_SupplierLookUp";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "SupplierLookUp"

									);
								}

								SupplierLookUpStruct SupplierLookUp_HashRow = new SupplierLookUpStruct();

								SupplierLookUp_HashRow.SupplierID = SupplierLookUp.SupplierID;

								SupplierLookUp_HashRow.SupplierName = SupplierLookUp.SupplierName;

								SupplierLookUp_HashRow.SupplierLocation = SupplierLookUp.SupplierLocation;

								tHash_Lookup_SupplierLookUp.put(SupplierLookUp_HashRow);

								tos_count_tAdvancedHash_SupplierLookUp++;

								/**
								 * [tAdvancedHash_SupplierLookUp main ] stop
								 */

								/**
								 * [tAdvancedHash_SupplierLookUp process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_SupplierLookUp";

								/**
								 * [tAdvancedHash_SupplierLookUp process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_SupplierLookUp process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_SupplierLookUp";

								/**
								 * [tAdvancedHash_SupplierLookUp process_data_end ] stop
								 */

							} // End of branch "SupplierLookUp"

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tUniqRow_3 process_data_end ] start
						 */

						currentComponent = "tUniqRow_3";

						/**
						 * [tUniqRow_3 process_data_end ] stop
						 */

					} // End of branch "SupplierDim"

					/**
					 * [tMap_7 process_data_end ] start
					 */

					currentComponent = "tMap_7";

					/**
					 * [tMap_7 process_data_end ] stop
					 */

					/**
					 * [tHashInput_2 process_data_end ] start
					 */

					currentComponent = "tHashInput_2";

					/**
					 * [tHashInput_2 process_data_end ] stop
					 */

					/**
					 * [tHashInput_2 end ] start
					 */

					currentComponent = "tHashInput_2";

					nb_line_tHashInput_2++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_loading_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);

				ok_Hash.put("tHashInput_2", true);
				end_Hash.put("tHashInput_2", System.currentTimeMillis());

				/**
				 * [tHashInput_2 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_duplicates_tUniqRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SupplierDim");
				}

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				if (pstmtUpdate_tDBOutput_4 != null) {
					pstmtUpdate_tDBOutput_4.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_4");
				}
				if (pstmtInsert_tDBOutput_4 != null) {
					pstmtInsert_tDBOutput_4.close();
					resourceMap.remove("pstmtInsert_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SupplierDimension");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_SupplierLookUp end ] start
				 */

				currentComponent = "tAdvancedHash_SupplierLookUp";

				tHash_Lookup_SupplierLookUp.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SupplierLookUp");
				}

				ok_Hash.put("tAdvancedHash_SupplierLookUp", true);
				end_Hash.put("tAdvancedHash_SupplierLookUp", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_SupplierLookUp end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_2 finally ] start
				 */

				currentComponent = "tHashInput_2";

				/**
				 * [tHashInput_2 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
					if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_4")) != null) {
						pstmtUpdateToClose_tDBOutput_4.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
					if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_4")) != null) {
						pstmtInsertToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_SupplierLookUp finally ] start
				 */

				currentComponent = "tAdvancedHash_SupplierLookUp";

				/**
				 * [tAdvancedHash_SupplierLookUp finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}

	public static class ShipperDimensionStruct implements routines.system.IPersistableRow<ShipperDimensionStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ShipperID;

		public int getShipperID() {
			return this.ShipperID;
		}

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ShipperID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ShipperDimensionStruct other = (ShipperDimensionStruct) obj;

			if (this.ShipperID != other.ShipperID)
				return false;

			return true;
		}

		public void copyDataTo(ShipperDimensionStruct other) {

			other.ShipperID = this.ShipperID;
			other.ShipperName = this.ShipperName;
			other.ShippingMethod = this.ShippingMethod;

		}

		public void copyKeysDataTo(ShipperDimensionStruct other) {

			other.ShipperID = this.ShipperID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ShipperID = dis.readInt();

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ShipperID = dis.readInt();

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ShipperID);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ShipperID);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ShipperID=" + String.valueOf(ShipperID));
			sb.append(",ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ShipperDimensionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ShipperID, other.ShipperID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ChipperLookUpStruct
			implements routines.system.IPersistableComparableLookupRow<ChipperLookUpStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ShipperID;

		public int getShipperID() {
			return this.ShipperID;
		}

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ShipperName == null) ? 0 : this.ShipperName.hashCode());

				result = prime * result + ((this.ShippingMethod == null) ? 0 : this.ShippingMethod.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ChipperLookUpStruct other = (ChipperLookUpStruct) obj;

			if (this.ShipperName == null) {
				if (other.ShipperName != null)
					return false;

			} else if (!this.ShipperName.equals(other.ShipperName))

				return false;

			if (this.ShippingMethod == null) {
				if (other.ShippingMethod != null)
					return false;

			} else if (!this.ShippingMethod.equals(other.ShippingMethod))

				return false;

			return true;
		}

		public void copyDataTo(ChipperLookUpStruct other) {

			other.ShipperID = this.ShipperID;
			other.ShipperName = this.ShipperName;
			other.ShippingMethod = this.ShippingMethod;

		}

		public void copyKeysDataTo(ChipperLookUpStruct other) {

			other.ShipperName = this.ShipperName;
			other.ShippingMethod = this.ShippingMethod;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ShipperID = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.ShipperID = objectIn.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ShipperID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.ShipperID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ShipperID=" + String.valueOf(ShipperID));
			sb.append(",ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ChipperLookUpStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ShipperName, other.ShipperName);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ShippingMethod, other.ShippingMethod);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ShipperDimStruct implements routines.system.IPersistableRow<ShipperDimStruct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ShipperDimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_ECOMEVALUATION_loading = new byte[0];
		static byte[] commonByteArray_ECOMEVALUATION_loading = new byte[0];

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		public Integer ProductPrice;

		public Integer getProductPrice() {
			return this.ProductPrice;
		}

		public String HashedPI;

		public String getHashedPI() {
			return this.HashedPI;
		}

		public String CustomerState;

		public String getCustomerState() {
			return this.CustomerState;
		}

		public String CustomerSegment;

		public String getCustomerSegment() {
			return this.CustomerSegment;
		}

		public String SupplierName;

		public String getSupplierName() {
			return this.SupplierName;
		}

		public String SupplierLocation;

		public String getSupplierLocation() {
			return this.SupplierLocation;
		}

		public String ShipperName;

		public String getShipperName() {
			return this.ShipperName;
		}

		public String ShippingMethod;

		public String getShippingMethod() {
			return this.ShippingMethod;
		}

		public Integer QuantitySold;

		public Integer getQuantitySold() {
			return this.QuantitySold;
		}

		public Float TotalAmount;

		public Float getTotalAmount() {
			return this.TotalAmount;
		}

		public Float DiscountAmount;

		public Float getDiscountAmount() {
			return this.DiscountAmount;
		}

		public Float NetAmount;

		public Float getNetAmount() {
			return this.NetAmount;
		}

		public Integer StockReceived;

		public Integer getStockReceived() {
			return this.StockReceived;
		}

		public Integer StockSold;

		public Integer getStockSold() {
			return this.StockSold;
		}

		public Integer StockOnHand;

		public Integer getStockOnHand() {
			return this.StockOnHand;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ECOMEVALUATION_loading.length) {
					if (length < 1024 && commonByteArray_ECOMEVALUATION_loading.length == 0) {
						commonByteArray_ECOMEVALUATION_loading = new byte[1024];
					} else {
						commonByteArray_ECOMEVALUATION_loading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ECOMEVALUATION_loading, 0, length);
				strReturn = new String(commonByteArray_ECOMEVALUATION_loading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ECOMEVALUATION_loading) {

				try {

					int length = 0;

					this.Date = readDate(dis);

					this.ProductName = readString(dis);

					this.ProductCategory = readString(dis);

					this.ProductSubCategory = readString(dis);

					this.ProductPrice = readInteger(dis);

					this.HashedPI = readString(dis);

					this.CustomerState = readString(dis);

					this.CustomerSegment = readString(dis);

					this.SupplierName = readString(dis);

					this.SupplierLocation = readString(dis);

					this.ShipperName = readString(dis);

					this.ShippingMethod = readString(dis);

					this.QuantitySold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountAmount = null;
					} else {
						this.DiscountAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetAmount = null;
					} else {
						this.NetAmount = dis.readFloat();
					}

					this.StockReceived = readInteger(dis);

					this.StockSold = readInteger(dis);

					this.StockOnHand = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCategory, dos);

				// String

				writeString(this.ProductSubCategory, dos);

				// Integer

				writeInteger(this.ProductPrice, dos);

				// String

				writeString(this.HashedPI, dos);

				// String

				writeString(this.CustomerState, dos);

				// String

				writeString(this.CustomerSegment, dos);

				// String

				writeString(this.SupplierName, dos);

				// String

				writeString(this.SupplierLocation, dos);

				// String

				writeString(this.ShipperName, dos);

				// String

				writeString(this.ShippingMethod, dos);

				// Integer

				writeInteger(this.QuantitySold, dos);

				// Float

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalAmount);
				}

				// Float

				if (this.DiscountAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DiscountAmount);
				}

				// Float

				if (this.NetAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NetAmount);
				}

				// Integer

				writeInteger(this.StockReceived, dos);

				// Integer

				writeInteger(this.StockSold, dos);

				// Integer

				writeInteger(this.StockOnHand, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date=" + String.valueOf(Date));
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append(",ProductPrice=" + String.valueOf(ProductPrice));
			sb.append(",HashedPI=" + HashedPI);
			sb.append(",CustomerState=" + CustomerState);
			sb.append(",CustomerSegment=" + CustomerSegment);
			sb.append(",SupplierName=" + SupplierName);
			sb.append(",SupplierLocation=" + SupplierLocation);
			sb.append(",ShipperName=" + ShipperName);
			sb.append(",ShippingMethod=" + ShippingMethod);
			sb.append(",QuantitySold=" + String.valueOf(QuantitySold));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",DiscountAmount=" + String.valueOf(DiscountAmount));
			sb.append(",NetAmount=" + String.valueOf(NetAmount));
			sb.append(",StockReceived=" + String.valueOf(StockReceived));
			sb.append(",StockSold=" + String.valueOf(StockSold));
			sb.append(",StockOnHand=" + String.valueOf(StockOnHand));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				ShipperDimStruct ShipperDim = new ShipperDimStruct();
				row8Struct row8 = new row8Struct();
				ShipperDimensionStruct ShipperDimension = new ShipperDimensionStruct();
				ChipperLookUpStruct ChipperLookUp = new ChipperLookUpStruct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ShipperDimension");
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rowsToCommitCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;
				String dbschema_tDBOutput_5 = null;
				String tableName_tDBOutput_5 = null;
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
				long year1_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_5;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_5 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_5 = 1;
				if (updateKeyCount_tDBOutput_5 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_5 == 3 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = "ShipperDim";
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "].[" + "ShipperDim";
				}
				int count_tDBOutput_5 = 0;

				boolean whetherExist_tDBOutput_5 = false;
				try (java.sql.Statement isExistStmt_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
					try {
						isExistStmt_tDBOutput_5.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_5 + "]");
						whetherExist_tDBOutput_5 = true;
					} catch (java.lang.Exception e) {
						globalMap.put("tDBOutput_5_ERROR_MESSAGE", e.getMessage());
						whetherExist_tDBOutput_5 = false;
					}
				}
				if (!whetherExist_tDBOutput_5) {
					try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
						stmtCreate_tDBOutput_5.execute("CREATE TABLE [" + tableName_tDBOutput_5
								+ "]([ShipperID] INT  not null ,[ShipperName] VARCHAR(60)  ,[ShippingMethod] VARCHAR(60)  ,primary key([ShipperID]))");
					}
				}
				String update_tDBOutput_5 = "UPDATE [" + tableName_tDBOutput_5
						+ "] SET [ShipperName] = ?,[ShippingMethod] = ? WHERE [ShipperID] = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(update_tDBOutput_5);
				resourceMap.put("pstmtUpdate_tDBOutput_5", pstmtUpdate_tDBOutput_5);
				String insert_tDBOutput_5 = "INSERT INTO [" + tableName_tDBOutput_5
						+ "] ([ShipperID],[ShipperName],[ShippingMethod]) VALUES (?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
				boolean isShareIdentity_tDBOutput_5 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tAdvancedHash_ChipperLookUp begin ] start
				 */

				ok_Hash.put("tAdvancedHash_ChipperLookUp", false);
				start_Hash.put("tAdvancedHash_ChipperLookUp", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_ChipperLookUp";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ChipperLookUp");
				}

				int tos_count_tAdvancedHash_ChipperLookUp = 0;

				// connection name:ChipperLookUp
				// source node:tMap_4 - inputs:(row8)
				// outputs:(ShipperDimension,ChipperLookUp,ChipperLookUp) | target
				// node:tAdvancedHash_ChipperLookUp - inputs:(ChipperLookUp) outputs:()
				// linked node: tMap_6 -
				// inputs:(row10,CustomerLookUp,ProductLookUp,SupplierLookUp,ChipperLookUp)
				// outputs:(FactSales,FactInventory)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ChipperLookUp = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ChipperLookUpStruct> tHash_Lookup_ChipperLookUp = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<ChipperLookUpStruct>getLookup(matchingModeEnum_ChipperLookUp);

				globalMap.put("tHash_Lookup_ChipperLookUp", tHash_Lookup_ChipperLookUp);

				/**
				 * [tAdvancedHash_ChipperLookUp begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
					int ShipperID;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				ShipperDimensionStruct ShipperDimension_tmp = new ShipperDimensionStruct();
				ChipperLookUpStruct ChipperLookUp_tmp = new ChipperLookUpStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());

				currentComponent = "tUniqRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ShipperDim");
				}

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ShipperName;
					String ShippingMethod;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ShipperName == null) ? 0 : this.ShipperName.hashCode());

							result = prime * result
									+ ((this.ShippingMethod == null) ? 0 : this.ShippingMethod.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.ShipperName == null) {
							if (other.ShipperName != null)
								return false;

						} else if (!this.ShipperName.equals(other.ShipperName))

							return false;

						if (this.ShippingMethod == null) {
							if (other.ShippingMethod != null)
								return false;

						} else if (!this.ShippingMethod.equals(other.ShippingMethod))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				ShipperDimStruct ShipperDim_tmp = new ShipperDimStruct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tHashInput_3 begin ] start
				 */

				ok_Hash.put("tHashInput_3", false);
				start_Hash.put("tHashInput_3", System.currentTimeMillis());

				currentComponent = "tHashInput_3";

				int tos_count_tHashInput_3 = 0;

				int nb_line_tHashInput_3 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_3 = mf_tHashInput_3
						.getAdvancedMemoryHashFile("tHashFile_loading_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_3 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row2Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
				while (iterator_tHashInput_3.hasNext()) {
					row2Struct next_tHashInput_3 = iterator_tHashInput_3.next();

					row12.Date = next_tHashInput_3.Date;
					row12.ProductName = next_tHashInput_3.ProductName;
					row12.ProductCategory = next_tHashInput_3.ProductCategory;
					row12.ProductSubCategory = next_tHashInput_3.ProductSubCategory;
					row12.ProductPrice = next_tHashInput_3.ProductPrice;
					row12.HashedPI = next_tHashInput_3.HashedPI;
					row12.CustomerState = next_tHashInput_3.CustomerState;
					row12.CustomerSegment = next_tHashInput_3.CustomerSegment;
					row12.SupplierName = next_tHashInput_3.SupplierName;
					row12.SupplierLocation = next_tHashInput_3.SupplierLocation;
					row12.ShipperName = next_tHashInput_3.ShipperName;
					row12.ShippingMethod = next_tHashInput_3.ShippingMethod;
					row12.QuantitySold = next_tHashInput_3.QuantitySold;
					row12.TotalAmount = next_tHashInput_3.TotalAmount;
					row12.DiscountAmount = next_tHashInput_3.DiscountAmount;
					row12.NetAmount = next_tHashInput_3.NetAmount;
					row12.StockReceived = next_tHashInput_3.StockReceived;
					row12.StockSold = next_tHashInput_3.StockSold;
					row12.StockOnHand = next_tHashInput_3.StockOnHand;

					/**
					 * [tHashInput_3 begin ] stop
					 */

					/**
					 * [tHashInput_3 main ] start
					 */

					currentComponent = "tHashInput_3";

					tos_count_tHashInput_3++;

					/**
					 * [tHashInput_3 main ] stop
					 */

					/**
					 * [tHashInput_3 process_data_begin ] start
					 */

					currentComponent = "tHashInput_3";

					/**
					 * [tHashInput_3 process_data_begin ] stop
					 */

					/**
					 * [tMap_8 main ] start
					 */

					currentComponent = "tMap_8";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row12"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_8 = false;
					boolean mainRowRejected_tMap_8 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
						// ###############################
						// # Output tables

						ShipperDim = null;

// # Output table : 'ShipperDim'
						ShipperDim_tmp.ShipperName = row12.ShipperName;
						ShipperDim_tmp.ShippingMethod = row12.ShippingMethod;
						ShipperDim = ShipperDim_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_8 = false;

					tos_count_tMap_8++;

					/**
					 * [tMap_8 main ] stop
					 */

					/**
					 * [tMap_8 process_data_begin ] start
					 */

					currentComponent = "tMap_8";

					/**
					 * [tMap_8 process_data_begin ] stop
					 */
// Start of branch "ShipperDim"
					if (ShipperDim != null) {

						/**
						 * [tUniqRow_4 main ] start
						 */

						currentComponent = "tUniqRow_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "ShipperDim"

							);
						}

						row8 = null;
						if (ShipperDim.ShipperName == null) {
							finder_tUniqRow_4.ShipperName = null;
						} else {
							finder_tUniqRow_4.ShipperName = ShipperDim.ShipperName.toLowerCase();
						}
						if (ShipperDim.ShippingMethod == null) {
							finder_tUniqRow_4.ShippingMethod = null;
						} else {
							finder_tUniqRow_4.ShippingMethod = ShipperDim.ShippingMethod.toLowerCase();
						}
						finder_tUniqRow_4.hashCodeDirty = true;
						if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
							KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

							if (ShipperDim.ShipperName == null) {
								new_tUniqRow_4.ShipperName = null;
							} else {
								new_tUniqRow_4.ShipperName = ShipperDim.ShipperName.toLowerCase();
							}
							if (ShipperDim.ShippingMethod == null) {
								new_tUniqRow_4.ShippingMethod = null;
							} else {
								new_tUniqRow_4.ShippingMethod = ShipperDim.ShippingMethod.toLowerCase();
							}

							keystUniqRow_4.add(new_tUniqRow_4);
							if (row8 == null) {

								row8 = new row8Struct();
							}
							row8.ShipperName = ShipperDim.ShipperName;
							row8.ShippingMethod = ShipperDim.ShippingMethod;
							nb_uniques_tUniqRow_4++;
						} else {
							nb_duplicates_tUniqRow_4++;
						}

						tos_count_tUniqRow_4++;

						/**
						 * [tUniqRow_4 main ] stop
						 */

						/**
						 * [tUniqRow_4 process_data_begin ] start
						 */

						currentComponent = "tUniqRow_4";

						/**
						 * [tUniqRow_4 process_data_begin ] stop
						 */
// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row8"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;
								Var.ShipperID = Numeric.sequence("ShipperID", 1, 1);// ###############################
								// ###############################
								// # Output tables

								ShipperDimension = null;
								ChipperLookUp = null;

// # Output table : 'ShipperDimension'
								ShipperDimension_tmp.ShipperID = Var.ShipperID;
								ShipperDimension_tmp.ShipperName = row8.ShipperName;
								ShipperDimension_tmp.ShippingMethod = row8.ShippingMethod;
								ShipperDimension = ShipperDimension_tmp;

// # Output table : 'ChipperLookUp'
								ChipperLookUp_tmp.ShipperID = Var.ShipperID;
								ChipperLookUp_tmp.ShipperName = row8.ShipperName;
								ChipperLookUp_tmp.ShippingMethod = row8.ShippingMethod;
								ChipperLookUp = ChipperLookUp_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "ShipperDimension"
							if (ShipperDimension != null) {

								/**
								 * [tDBOutput_5 main ] start
								 */

								currentComponent = "tDBOutput_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "ShipperDimension"

									);
								}

								whetherReject_tDBOutput_5 = false;
								int updateFlag_tDBOutput_5 = 0;
								if (ShipperDimension.ShipperName == null) {
									pstmtUpdate_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_5.setString(1, ShipperDimension.ShipperName);
								}

								if (ShipperDimension.ShippingMethod == null) {
									pstmtUpdate_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_5.setString(2, ShipperDimension.ShippingMethod);
								}

								pstmtUpdate_tDBOutput_5.setInt(3 + count_tDBOutput_5, ShipperDimension.ShipperID);

								try {
									updateFlag_tDBOutput_5 = pstmtUpdate_tDBOutput_5.executeUpdate();
									updatedCount_tDBOutput_5 = updatedCount_tDBOutput_5 + updateFlag_tDBOutput_5;
									rowsToCommitCount_tDBOutput_5 += updateFlag_tDBOutput_5;
									if (updateFlag_tDBOutput_5 == 0) {

										pstmtInsert_tDBOutput_5.setInt(1, ShipperDimension.ShipperID);

										if (ShipperDimension.ShipperName == null) {
											pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_5.setString(2, ShipperDimension.ShipperName);
										}

										if (ShipperDimension.ShippingMethod == null) {
											pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_5.setString(3, ShipperDimension.ShippingMethod);
										}

										int processedCount_tDBOutput_5 = pstmtInsert_tDBOutput_5.executeUpdate();
										insertedCount_tDBOutput_5 += processedCount_tDBOutput_5;
										rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
										nb_line_tDBOutput_5++;
									} else {
										nb_line_tDBOutput_5++;

									}
								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_5_ERROR_MESSAGE", e.getMessage());
									whetherReject_tDBOutput_5 = true;
									nb_line_tDBOutput_5++;

									System.err.println(e.getMessage());
								} finally {

								}
								if (!whetherReject_tDBOutput_5) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_5 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_5)
											throws Exception {
										try {

											for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
												if (countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
													break;
												}
												counter += countEach_tDBOutput_5;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_5_ERROR_MESSAGE", e.getMessage());

											int countSum_tDBOutput_5 = 0;
											for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_5)
											throws Exception {
										try {

											for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
												if (countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
													break;
												}
												counter += countEach_tDBOutput_5;
											}

										} catch (java.sql.BatchUpdateException e) {
											globalMap.put("tDBOutput_5_ERROR_MESSAGE", e.getMessage());

											for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								tos_count_tDBOutput_5++;

								/**
								 * [tDBOutput_5 main ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_end ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_end ] stop
								 */

							} // End of branch "ShipperDimension"

// Start of branch "ChipperLookUp"
							if (ChipperLookUp != null) {

								/**
								 * [tAdvancedHash_ChipperLookUp main ] start
								 */

								currentComponent = "tAdvancedHash_ChipperLookUp";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "ChipperLookUp"

									);
								}

								ChipperLookUpStruct ChipperLookUp_HashRow = new ChipperLookUpStruct();

								ChipperLookUp_HashRow.ShipperID = ChipperLookUp.ShipperID;

								ChipperLookUp_HashRow.ShipperName = ChipperLookUp.ShipperName;

								ChipperLookUp_HashRow.ShippingMethod = ChipperLookUp.ShippingMethod;

								tHash_Lookup_ChipperLookUp.put(ChipperLookUp_HashRow);

								tos_count_tAdvancedHash_ChipperLookUp++;

								/**
								 * [tAdvancedHash_ChipperLookUp main ] stop
								 */

								/**
								 * [tAdvancedHash_ChipperLookUp process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_ChipperLookUp";

								/**
								 * [tAdvancedHash_ChipperLookUp process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_ChipperLookUp process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_ChipperLookUp";

								/**
								 * [tAdvancedHash_ChipperLookUp process_data_end ] stop
								 */

							} // End of branch "ChipperLookUp"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tUniqRow_4 process_data_end ] start
						 */

						currentComponent = "tUniqRow_4";

						/**
						 * [tUniqRow_4 process_data_end ] stop
						 */

					} // End of branch "ShipperDim"

					/**
					 * [tMap_8 process_data_end ] start
					 */

					currentComponent = "tMap_8";

					/**
					 * [tMap_8 process_data_end ] stop
					 */

					/**
					 * [tHashInput_3 process_data_end ] start
					 */

					currentComponent = "tHashInput_3";

					/**
					 * [tHashInput_3 process_data_end ] stop
					 */

					/**
					 * [tHashInput_3 end ] start
					 */

					currentComponent = "tHashInput_3";

					nb_line_tHashInput_3++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_loading_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);

				ok_Hash.put("tHashInput_3", true);
				end_Hash.put("tHashInput_3", System.currentTimeMillis());

				/**
				 * [tHashInput_3 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES", nb_duplicates_tUniqRow_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ShipperDim");
				}

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				if (pstmtUpdate_tDBOutput_5 != null) {
					pstmtUpdate_tDBOutput_5.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_5");
				}
				if (pstmtInsert_tDBOutput_5 != null) {
					pstmtInsert_tDBOutput_5.close();
					resourceMap.remove("pstmtInsert_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ShipperDimension");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_ChipperLookUp end ] start
				 */

				currentComponent = "tAdvancedHash_ChipperLookUp";

				tHash_Lookup_ChipperLookUp.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ChipperLookUp");
				}

				ok_Hash.put("tAdvancedHash_ChipperLookUp", true);
				end_Hash.put("tAdvancedHash_ChipperLookUp", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_ChipperLookUp end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_3 finally ] start
				 */

				currentComponent = "tHashInput_3";

				/**
				 * [tHashInput_3 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tUniqRow_4 finally ] start
				 */

				currentComponent = "tUniqRow_4";

				/**
				 * [tUniqRow_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_5 = null;
					if ((pstmtUpdateToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_5")) != null) {
						pstmtUpdateToClose_tDBOutput_5.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_5 = null;
					if ((pstmtInsertToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_5")) != null) {
						pstmtInsertToClose_tDBOutput_5.close();
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_ChipperLookUp finally ] start
				 */

				currentComponent = "tAdvancedHash_ChipperLookUp";

				/**
				 * [tAdvancedHash_ChipperLookUp finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final loading loadingClass = new loading();

		int exitCode = loadingClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = loading.class.getClassLoader()
					.getResourceAsStream("ecomevaluation/loading_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = loading.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("ecom_eval_dw_Password", "id_Password");
					if (context.getStringValue("ecom_eval_dw_Password") == null) {
						context.ecom_eval_dw_Password = null;
					} else {
						String pwd_ecom_eval_dw_Password_value = context.getProperty("ecom_eval_dw_Password");
						context.ecom_eval_dw_Password = null;
						if (pwd_ecom_eval_dw_Password_value != null) {
							if (context_param.containsKey("ecom_eval_dw_Password")) {// no need to decrypt if it come
																						// from program argument or
																						// parent job runtime
								context.ecom_eval_dw_Password = pwd_ecom_eval_dw_Password_value;
							} else if (!pwd_ecom_eval_dw_Password_value.isEmpty()) {
								try {
									context.ecom_eval_dw_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_ecom_eval_dw_Password_value);
									context.put("ecom_eval_dw_Password", context.ecom_eval_dw_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("ecom_eval_dw_Login", "id_String");
					if (context.getStringValue("ecom_eval_dw_Login") == null) {
						context.ecom_eval_dw_Login = null;
					} else {
						context.ecom_eval_dw_Login = (String) context.getProperty("ecom_eval_dw_Login");
					}
					context.setContextType("ecom_eval_dw_Schema", "id_String");
					if (context.getStringValue("ecom_eval_dw_Schema") == null) {
						context.ecom_eval_dw_Schema = null;
					} else {
						context.ecom_eval_dw_Schema = (String) context.getProperty("ecom_eval_dw_Schema");
					}
					context.setContextType("ecom_eval_dw_AdditionalParams", "id_String");
					if (context.getStringValue("ecom_eval_dw_AdditionalParams") == null) {
						context.ecom_eval_dw_AdditionalParams = null;
					} else {
						context.ecom_eval_dw_AdditionalParams = (String) context
								.getProperty("ecom_eval_dw_AdditionalParams");
					}
					context.setContextType("ecom_eval_dw_Port", "id_String");
					if (context.getStringValue("ecom_eval_dw_Port") == null) {
						context.ecom_eval_dw_Port = null;
					} else {
						context.ecom_eval_dw_Port = (String) context.getProperty("ecom_eval_dw_Port");
					}
					context.setContextType("ecom_eval_dw_Server", "id_String");
					if (context.getStringValue("ecom_eval_dw_Server") == null) {
						context.ecom_eval_dw_Server = null;
					} else {
						context.ecom_eval_dw_Server = (String) context.getProperty("ecom_eval_dw_Server");
					}
					context.setContextType("ecom_eval_dw_Database", "id_String");
					if (context.getStringValue("ecom_eval_dw_Database") == null) {
						context.ecom_eval_dw_Database = null;
					} else {
						context.ecom_eval_dw_Database = (String) context.getProperty("ecom_eval_dw_Database");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ecom_eval_dw_Password")) {
				context.ecom_eval_dw_Password = (java.lang.String) parentContextMap.get("ecom_eval_dw_Password");
			}
			if (parentContextMap.containsKey("ecom_eval_dw_Login")) {
				context.ecom_eval_dw_Login = (String) parentContextMap.get("ecom_eval_dw_Login");
			}
			if (parentContextMap.containsKey("ecom_eval_dw_Schema")) {
				context.ecom_eval_dw_Schema = (String) parentContextMap.get("ecom_eval_dw_Schema");
			}
			if (parentContextMap.containsKey("ecom_eval_dw_AdditionalParams")) {
				context.ecom_eval_dw_AdditionalParams = (String) parentContextMap.get("ecom_eval_dw_AdditionalParams");
			}
			if (parentContextMap.containsKey("ecom_eval_dw_Port")) {
				context.ecom_eval_dw_Port = (String) parentContextMap.get("ecom_eval_dw_Port");
			}
			if (parentContextMap.containsKey("ecom_eval_dw_Server")) {
				context.ecom_eval_dw_Server = (String) parentContextMap.get("ecom_eval_dw_Server");
			}
			if (parentContextMap.containsKey("ecom_eval_dw_Database")) {
				context.ecom_eval_dw_Database = (String) parentContextMap.get("ecom_eval_dw_Database");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("ecom_eval_dw_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tHashInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tHashInput_4) {
			globalMap.put("tHashInput_4_SUBPROCESS_STATE", -1);

			e_tHashInput_4.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : loading");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 653176 characters generated by Talend Open Studio for Data Integration on the
 * October 8, 2023 at 2:22:42 PM WEST
 ************************************************************************************************/