// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ecomevaluation.sales_dm_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: sales_DM Purpose: Creation of sales_DM<br>
 * Description: Creation of sales_DM <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class sales_DM implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ecom_eval_dw_Password != null){
				
					this.setProperty("ecom_eval_dw_Password", ecom_eval_dw_Password.toString());
				
			}
			
			if(ecom_eval_dw_Login != null){
				
					this.setProperty("ecom_eval_dw_Login", ecom_eval_dw_Login.toString());
				
			}
			
			if(ecom_eval_dw_Schema != null){
				
					this.setProperty("ecom_eval_dw_Schema", ecom_eval_dw_Schema.toString());
				
			}
			
			if(ecom_eval_dw_AdditionalParams != null){
				
					this.setProperty("ecom_eval_dw_AdditionalParams", ecom_eval_dw_AdditionalParams.toString());
				
			}
			
			if(ecom_eval_dw_Port != null){
				
					this.setProperty("ecom_eval_dw_Port", ecom_eval_dw_Port.toString());
				
			}
			
			if(ecom_eval_dw_Server != null){
				
					this.setProperty("ecom_eval_dw_Server", ecom_eval_dw_Server.toString());
				
			}
			
			if(ecom_eval_dw_Database != null){
				
					this.setProperty("ecom_eval_dw_Database", ecom_eval_dw_Database.toString());
				
			}
			
			if(ecom_eval_sales_dm_Schema != null){
				
					this.setProperty("ecom_eval_sales_dm_Schema", ecom_eval_sales_dm_Schema.toString());
				
			}
			
			if(ecom_eval_sales_dm_Login != null){
				
					this.setProperty("ecom_eval_sales_dm_Login", ecom_eval_sales_dm_Login.toString());
				
			}
			
			if(ecom_eval_sales_dm_AdditionalParams != null){
				
					this.setProperty("ecom_eval_sales_dm_AdditionalParams", ecom_eval_sales_dm_AdditionalParams.toString());
				
			}
			
			if(ecom_eval_sales_dm_Database != null){
				
					this.setProperty("ecom_eval_sales_dm_Database", ecom_eval_sales_dm_Database.toString());
				
			}
			
			if(ecom_eval_sales_dm_Password != null){
				
					this.setProperty("ecom_eval_sales_dm_Password", ecom_eval_sales_dm_Password.toString());
				
			}
			
			if(ecom_eval_sales_dm_Server != null){
				
					this.setProperty("ecom_eval_sales_dm_Server", ecom_eval_sales_dm_Server.toString());
				
			}
			
			if(ecom_eval_sales_dm_Port != null){
				
					this.setProperty("ecom_eval_sales_dm_Port", ecom_eval_sales_dm_Port.toString());
				
			}
			
			if(ecom_eval_sales_dm1_Server != null){
				
					this.setProperty("ecom_eval_sales_dm1_Server", ecom_eval_sales_dm1_Server.toString());
				
			}
			
			if(ecom_eval_sales_dm1_Port != null){
				
					this.setProperty("ecom_eval_sales_dm1_Port", ecom_eval_sales_dm1_Port.toString());
				
			}
			
			if(ecom_eval_sales_dm1_Schema != null){
				
					this.setProperty("ecom_eval_sales_dm1_Schema", ecom_eval_sales_dm1_Schema.toString());
				
			}
			
			if(ecom_eval_sales_dm1_Database != null){
				
					this.setProperty("ecom_eval_sales_dm1_Database", ecom_eval_sales_dm1_Database.toString());
				
			}
			
			if(ecom_eval_sales_dm1_Login != null){
				
					this.setProperty("ecom_eval_sales_dm1_Login", ecom_eval_sales_dm1_Login.toString());
				
			}
			
			if(ecom_eval_sales_dm1_Password != null){
				
					this.setProperty("ecom_eval_sales_dm1_Password", ecom_eval_sales_dm1_Password.toString());
				
			}
			
			if(ecom_eval_sales_dm1_AdditionalParams != null){
				
					this.setProperty("ecom_eval_sales_dm1_AdditionalParams", ecom_eval_sales_dm1_AdditionalParams.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public java.lang.String ecom_eval_dw_Password;
public java.lang.String getEcom_eval_dw_Password(){
	return this.ecom_eval_dw_Password;
}
public String ecom_eval_dw_Login;
public String getEcom_eval_dw_Login(){
	return this.ecom_eval_dw_Login;
}
public String ecom_eval_dw_Schema;
public String getEcom_eval_dw_Schema(){
	return this.ecom_eval_dw_Schema;
}
public String ecom_eval_dw_AdditionalParams;
public String getEcom_eval_dw_AdditionalParams(){
	return this.ecom_eval_dw_AdditionalParams;
}
public String ecom_eval_dw_Port;
public String getEcom_eval_dw_Port(){
	return this.ecom_eval_dw_Port;
}
public String ecom_eval_dw_Server;
public String getEcom_eval_dw_Server(){
	return this.ecom_eval_dw_Server;
}
public String ecom_eval_dw_Database;
public String getEcom_eval_dw_Database(){
	return this.ecom_eval_dw_Database;
}
public String ecom_eval_sales_dm_Schema;
public String getEcom_eval_sales_dm_Schema(){
	return this.ecom_eval_sales_dm_Schema;
}
public String ecom_eval_sales_dm_Login;
public String getEcom_eval_sales_dm_Login(){
	return this.ecom_eval_sales_dm_Login;
}
public String ecom_eval_sales_dm_AdditionalParams;
public String getEcom_eval_sales_dm_AdditionalParams(){
	return this.ecom_eval_sales_dm_AdditionalParams;
}
public String ecom_eval_sales_dm_Database;
public String getEcom_eval_sales_dm_Database(){
	return this.ecom_eval_sales_dm_Database;
}
public java.lang.String ecom_eval_sales_dm_Password;
public java.lang.String getEcom_eval_sales_dm_Password(){
	return this.ecom_eval_sales_dm_Password;
}
public String ecom_eval_sales_dm_Server;
public String getEcom_eval_sales_dm_Server(){
	return this.ecom_eval_sales_dm_Server;
}
public String ecom_eval_sales_dm_Port;
public String getEcom_eval_sales_dm_Port(){
	return this.ecom_eval_sales_dm_Port;
}
public String ecom_eval_sales_dm1_Server;
public String getEcom_eval_sales_dm1_Server(){
	return this.ecom_eval_sales_dm1_Server;
}
public String ecom_eval_sales_dm1_Port;
public String getEcom_eval_sales_dm1_Port(){
	return this.ecom_eval_sales_dm1_Port;
}
public String ecom_eval_sales_dm1_Schema;
public String getEcom_eval_sales_dm1_Schema(){
	return this.ecom_eval_sales_dm1_Schema;
}
public String ecom_eval_sales_dm1_Database;
public String getEcom_eval_sales_dm1_Database(){
	return this.ecom_eval_sales_dm1_Database;
}
public String ecom_eval_sales_dm1_Login;
public String getEcom_eval_sales_dm1_Login(){
	return this.ecom_eval_sales_dm1_Login;
}
public java.lang.String ecom_eval_sales_dm1_Password;
public java.lang.String getEcom_eval_sales_dm1_Password(){
	return this.ecom_eval_sales_dm1_Password;
}
public String ecom_eval_sales_dm1_AdditionalParams;
public String getEcom_eval_sales_dm1_AdditionalParams(){
	return this.ecom_eval_sales_dm1_AdditionalParams;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "sales_DM";
	private final String projectName = "ECOMEVALUATION";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				sales_DM.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(sales_DM.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError8", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_2Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError4", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBSCD_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError7", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError5", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError3", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "localhost" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "ecom_eval_sales_DM" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "ecom_eval_sales_DM"; 
    	}

		url_tDBConnection_1 += ";appName=" + projectName + ";" + "";  
	String dbUser_tDBConnection_1 = "";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:lyIA1dR/cXfnRN2BJW6K+QPR8gQG89Lx2mxNXg==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "dbo");

	globalMap.put("db_tDBConnection_1",  "ecom_eval_sales_DM");
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

	globalMap.put("driver_tDBConnection_1", "JTDS");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		
	

	
			String url_tDBConnection_2 = "jdbc:jtds:sqlserver://" + context.ecom_eval_dw_Server ;
		String port_tDBConnection_2 = context.ecom_eval_dw_Port;
		String dbname_tDBConnection_2 = context.ecom_eval_dw_Database ;
    	if (!"".equals(port_tDBConnection_2)) {
    		url_tDBConnection_2 += ":" + context.ecom_eval_dw_Port;
    	}
    	if (!"".equals(dbname_tDBConnection_2)) {
    		
				url_tDBConnection_2 += "//" + context.ecom_eval_dw_Database; 
    	}

		url_tDBConnection_2 += ";appName=" + projectName + ";" + context.ecom_eval_dw_AdditionalParams;  
	String dbUser_tDBConnection_2 = context.ecom_eval_dw_Login;
	
	
		
	final String decryptedPassword_tDBConnection_2 = context.ecom_eval_dw_Password; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_2", context.ecom_eval_dw_Schema);

	globalMap.put("db_tDBConnection_2",  context.ecom_eval_dw_Database);
	
	globalMap.put("shareIdentitySetting_tDBConnection_2",  false);

	globalMap.put("driver_tDBConnection_2", "JTDS");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tCreateTable_7Process(globalMap);



/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_7", false);
		start_Hash.put("tCreateTable_7", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_7";

	
		int tos_count_tCreateTable_7 = 0;
		

 



/**
 * [tCreateTable_7 begin ] stop
 */
	
	/**
	 * [tCreateTable_7 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_7";

	

    try{
        String tableName_tCreateTable_7 = "ProductDim";
String dbSchema_tCreateTable_7 = (String)globalMap.get("dbschema_tDBConnection_1");
if(dbSchema_tCreateTable_7 != null && dbSchema_tCreateTable_7.trim().length() != 0) {tableName_tCreateTable_7 = dbSchema_tCreateTable_7 + "].[" + tableName_tCreateTable_7;
}java.sql.Connection conn_tCreateTable_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
            boolean whetherExist_tCreateTable_7 = false;
                java.sql.Statement rsTable_tCreateTable_7 = conn_tCreateTable_7.createStatement();
                try {
                    rsTable_tCreateTable_7.execute("SELECT TOP 1 1 FROM [" +  tableName_tCreateTable_7 + "]" );
                    whetherExist_tCreateTable_7 = true;
                } catch (Exception e){
                    whetherExist_tCreateTable_7 = false;
                }
            rsTable_tCreateTable_7.close();
                if(!whetherExist_tCreateTable_7) {
                    java.sql.Statement stmt_tCreateTable_7 = conn_tCreateTable_7.createStatement();
                    stmt_tCreateTable_7.execute("CREATE TABLE [" + tableName_tCreateTable_7 + "]([ProductID] INT  not null ,[ProductName] VARCHAR(50)  ,[ProductCategory] VARCHAR(50)  ,[ProductSubCategory] VARCHAR(50)  ,primary key([ProductID]))");                
		            
                }
        
        globalMap.put("tCreateTable_7_QUERY", "CREATE TABLE [" + tableName_tCreateTable_7 + "]([ProductID] INT  not null ,[ProductName] VARCHAR(50)  ,[ProductCategory] VARCHAR(50)  ,[ProductSubCategory] VARCHAR(50)  ,primary key([ProductID]))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_7_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_7++;

/**
 * [tCreateTable_7 main ] stop
 */
	
	/**
	 * [tCreateTable_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tCreateTable_7";

	

 



/**
 * [tCreateTable_7 process_data_begin ] stop
 */
	
	/**
	 * [tCreateTable_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tCreateTable_7";

	

 



/**
 * [tCreateTable_7 process_data_end ] stop
 */
	
	/**
	 * [tCreateTable_7 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_7";

	

 

ok_Hash.put("tCreateTable_7", true);
end_Hash.put("tCreateTable_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tDBCommit_2Process(globalMap);



/**
 * [tCreateTable_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_7 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_7";

	

 



/**
 * [tCreateTable_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_7_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_2", false);
		start_Hash.put("tDBCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_2";

	
		int tos_count_tDBCommit_2 = 0;
		

 



/**
 * [tDBCommit_2 begin ] stop
 */
	
	/**
	 * [tDBCommit_2 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

	java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed())
	{
	
			
			conn_tDBCommit_2.commit();
			
	
	}

 


	tos_count_tDBCommit_2++;

/**
 * [tDBCommit_2 main ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_2 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 

ok_Hash.put("tDBCommit_2", true);
end_Hash.put("tDBCommit_2", System.currentTimeMillis());




/**
 * [tDBCommit_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
			
			conn_tDBCommit_1.commit();
			
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBRow_1Process(globalMap);



/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

query_tDBRow_1 = "\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE name = 'fk_SalesFact_DimProduct')\nBEGIN\n    ALTER TABLE FactSal"
+"es\n	ADD CONSTRAINT fk_SalesFact_DimProduct\n	FOREIGN KEY (ProductID)\n	REFERENCES ProductDim([ProductID])\n	ON DELETE C"
+"ASCADE;\nEND;\n\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE name = 'fk_SalesFact_DimDate')\nBEGIN\n    ALTER TA"
+"BLE FactSales\n	ADD CONSTRAINT fk_SalesFact_DimDate\n	FOREIGN KEY (date)\n	REFERENCES DateDim([date])\n	ON DELETE CASCAD"
+"E;\nEND;\n\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE name = 'fk_SalesFact_DimCustomer')\nBEGIN\n    ALTER TAB"
+"LE FactSales\n	ADD CONSTRAINT fk_SalesFact_DimCustomer\n	FOREIGN KEY (CustomerID)\n	REFERENCES CustomerDim([CustomerID])"
+"\n	ON DELETE CASCADE;\nEND;\n\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE name = 'fk_SalesFact_ShipperDim')\nBE"
+"GIN\n	ALTER TABLE FactSales\n	ADD CONSTRAINT fk_SalesFact_ShipperDim\n	FOREIGN KEY (ShipperID)\n	REFERENCES ShipperDim(["
+"ShipperID])\n	ON DELETE CASCADE;\nEND;";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_1_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBCommit_3Process(globalMap);



/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBCommit_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_3", false);
		start_Hash.put("tDBCommit_3", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_3";

	
		int tos_count_tDBCommit_3 = 0;
		

 



/**
 * [tDBCommit_3 begin ] stop
 */
	
	/**
	 * [tDBCommit_3 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

	java.sql.Connection conn_tDBCommit_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_3 != null && !conn_tDBCommit_3.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_3.commit();
			
	
		}finally{
			
			conn_tDBCommit_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
	}

 


	tos_count_tDBCommit_3++;

/**
 * [tDBCommit_3 main ] stop
 */
	
	/**
	 * [tDBCommit_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_3 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 

ok_Hash.put("tDBCommit_3", true);
end_Hash.put("tDBCommit_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tDBCommit_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_3 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRollback_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_2", false);
		start_Hash.put("tDBRollback_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_2";

	
		int tos_count_tDBRollback_2 = 0;
		

 



/**
 * [tDBRollback_2 begin ] stop
 */
	
	/**
	 * [tDBRollback_2 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_2";

	

	java.sql.Connection conn_tDBRollback_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBRollback_2 != null && !conn_tDBRollback_2.isClosed()) {
		
			conn_tDBRollback_2.rollback();
			
	}

 


	tos_count_tDBRollback_2++;

/**
 * [tDBRollback_2 main ] stop
 */
	
	/**
	 * [tDBRollback_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_2";

	

 



/**
 * [tDBRollback_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_2";

	

 



/**
 * [tDBRollback_2 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_2 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_2";

	

 

ok_Hash.put("tDBRollback_2", true);
end_Hash.put("tDBRollback_2", System.currentTimeMillis());




/**
 * [tDBRollback_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_2";

	

 



/**
 * [tDBRollback_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_sales_DM = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_sales_DM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String HashedPI;

				public String getHashedPI () {
					return this.HashedPI;
				}
				
			    public String CustomerState;

				public String getCustomerState () {
					return this.CustomerState;
				}
				
			    public String CustomerSegment;

				public String getCustomerSegment () {
					return this.CustomerSegment;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.CustomerID = this.CustomerID;
	            other.HashedPI = this.HashedPI;
	            other.CustomerState = this.CustomerState;
	            other.CustomerSegment = this.CustomerSegment;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_sales_DM.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_sales_DM.length == 0) {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_sales_DM, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_sales_DM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_sales_DM.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_sales_DM.length == 0) {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_sales_DM, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_sales_DM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_sales_DM) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_sales_DM) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",HashedPI="+HashedPI);
		sb.append(",CustomerState="+CustomerState);
		sb.append(",CustomerSegment="+CustomerSegment);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tDBOutput_4 = 0;
		



int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;
String dbschema_tDBOutput_4 = null;
String tableName_tDBOutput_4 = null;
boolean whetherReject_tDBOutput_4 = false;

java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
long year1_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_4;

java.util.Calendar calendar_datetimeoffset_tDBOutput_4 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_4 = 1;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_4 == 4 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

	
java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
    tableName_tDBOutput_4 = "CustomerDim";
} else {
    tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "].[" + "CustomerDim";
}
	int count_tDBOutput_4=0;

                                boolean whetherExist_tDBOutput_4 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_4.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_4 + "]" );
                                        whetherExist_tDBOutput_4 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_4 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_4) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                        stmtCreate_tDBOutput_4.execute("CREATE TABLE [" + tableName_tDBOutput_4 + "]([CustomerID] INT  not null ,[HashedPI] VARCHAR(255)  ,[CustomerState] VARCHAR(50)  ,[CustomerSegment] VARCHAR(60)  ,primary key([CustomerID]))");
                                    }
                                }
        String update_tDBOutput_4 = "UPDATE [" + tableName_tDBOutput_4 + "] SET [HashedPI] = ?,[CustomerState] = ?,[CustomerSegment] = ? WHERE [CustomerID] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
        resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);
        String insert_tDBOutput_4 = "INSERT INTO [" + tableName_tDBOutput_4 + "] ([CustomerID],[HashedPI],[CustomerState],[CustomerSegment]) VALUES (?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
        resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
 	boolean isShareIdentity_tDBOutput_4 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
			String dbschema_tDBInput_4 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \""+context.ecom_eval_dw_Schema+"\".CustomerDim.CustomerID,\n		\""+context.ecom_eval_dw_Schema+"\".CustomerDim.HashedPI,\n		\""+context.ecom_eval_dw_Schema+"\".CustomerDim.CustomerState,\n		\""+context.ecom_eval_dw_Schema+"\".CustomerDim.CustomerSegment"
+"\nFROM	\""+context.ecom_eval_dw_Schema+"\".CustomerDim";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row4.CustomerID = 0;
							} else {
		                          
            row4.CustomerID = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row4.HashedPI = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.HashedPI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row4.HashedPI = tmpContent_tDBInput_4;
                }
            } else {
                row4.HashedPI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row4.CustomerState = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.CustomerState = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row4.CustomerState = tmpContent_tDBInput_4;
                }
            } else {
                row4.CustomerState = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row4.CustomerSegment = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.CustomerSegment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row4.CustomerSegment = tmpContent_tDBInput_4;
                }
            } else {
                row4.CustomerSegment = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
            int updateFlag_tDBOutput_4=0;
                    if(row4.HashedPI == null) {
pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(1, row4.HashedPI);
}

                    if(row4.CustomerState == null) {
pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(2, row4.CustomerState);
}

                    if(row4.CustomerSegment == null) {
pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(3, row4.CustomerSegment);
}


                    pstmtUpdate_tDBOutput_4.setInt(4 + count_tDBOutput_4, row4.CustomerID);

            try {
                updateFlag_tDBOutput_4=pstmtUpdate_tDBOutput_4.executeUpdate();
                updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4+updateFlag_tDBOutput_4;
                rowsToCommitCount_tDBOutput_4 += updateFlag_tDBOutput_4;
            if(updateFlag_tDBOutput_4 == 0) {
            	
                        pstmtInsert_tDBOutput_4.setInt(1, row4.CustomerID);

                        if(row4.HashedPI == null) {
pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(2, row4.HashedPI);
}

                        if(row4.CustomerState == null) {
pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(3, row4.CustomerState);
}

                        if(row4.CustomerSegment == null) {
pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(4, row4.CustomerSegment);
}

                    int processedCount_tDBOutput_4 = pstmtInsert_tDBOutput_4.executeUpdate();
                    insertedCount_tDBOutput_4 += processedCount_tDBOutput_4;
                    rowsToCommitCount_tDBOutput_4 += processedCount_tDBOutput_4;
                    nb_line_tDBOutput_4++;
    			}else{
    				nb_line_tDBOutput_4++;
    				
    			}
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
                    whetherReject_tDBOutput_4 = true;
                    	nb_line_tDBOutput_4++;
                    	
                            System.err.println(e.getMessage());
                } finally {
				    
				}
            if(!whetherReject_tDBOutput_4) {
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_4{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_4) throws Exception {
                try {
						
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							if(countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
								break;
							}
							counter += countEach_tDBOutput_4;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_4) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							if(countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
								break;
							}
							counter += countEach_tDBOutput_4;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



        if(pstmtUpdate_tDBOutput_4 != null){
            pstmtUpdate_tDBOutput_4.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_4");
        }
        if(pstmtInsert_tDBOutput_4 != null){
            pstmtInsert_tDBOutput_4.close();
            resourceMap.remove("pstmtInsert_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
                if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_4")) != null) {
                    pstmtUpdateToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
                if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_4")) != null) {
                    pstmtInsertToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_1", false);
		start_Hash.put("tDBRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_1";

	
		int tos_count_tDBRollback_1 = 0;
		

 



/**
 * [tDBRollback_1 begin ] stop
 */
	
	/**
	 * [tDBRollback_1 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

	java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {
		
			conn_tDBRollback_1.rollback();
			
	}

 


	tos_count_tDBRollback_1++;

/**
 * [tDBRollback_1 main ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_1 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 

ok_Hash.put("tDBRollback_1", true);
end_Hash.put("tDBRollback_1", System.currentTimeMillis());




/**
 * [tDBRollback_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_sales_DM = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_sales_DM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductCategory;

				public String getProductCategory () {
					return this.ProductCategory;
				}
				
			    public String ProductSubCategory;

				public String getProductSubCategory () {
					return this.ProductSubCategory;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.ProductID != other.ProductID)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.ProductID = this.ProductID;
	            other.ProductName = this.ProductName;
	            other.ProductCategory = this.ProductCategory;
	            other.ProductSubCategory = this.ProductSubCategory;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.ProductID = this.ProductID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_sales_DM.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_sales_DM.length == 0) {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_sales_DM, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_sales_DM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_sales_DM.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_sales_DM.length == 0) {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_sales_DM, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_sales_DM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_sales_DM) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_sales_DM) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",ProductName="+ProductName);
		sb.append(",ProductCategory="+ProductCategory);
		sb.append(",ProductSubCategory="+ProductSubCategory);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tDBSCD_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBSCD_1", false);
		start_Hash.put("tDBSCD_1", System.currentTimeMillis());
		
	
	currentComponent="tDBSCD_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tDBSCD_1 = 0;
		



        class SCDSK_tDBSCD_1 {
private int hashCode;
public boolean hashCodeDirty = true;
int ProductID;
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (getClass() != obj.getClass()) return false;
final SCDSK_tDBSCD_1 other = (SCDSK_tDBSCD_1) obj;
if (this.ProductID!= other.ProductID)
return false;

return true;
}
public int hashCode() {
if(hashCodeDirty) {
int prime = 31;hashCode = prime * hashCode + ProductID;
hashCodeDirty = false;
}
return hashCode;
}
}

    class SCDStruct_tDBSCD_1 {
private String ProductCategory;
private String ProductName;
private String ProductSubCategory;
}

    int nb_line_update_tDBSCD_1 = 0;
    int nb_line_inserted_tDBSCD_1 = 0;
    int nb_line_rejected_tDBSCD_1 = 0;
    String tableName_tDBSCD_1 = null;
	String dbschema_tDBSCD_1 = null;
java.sql.Connection conn_tDBSCD_1 = null;
String dbUser_tDBSCD_1 = null;
	dbschema_tDBSCD_1 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBSCD_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

    if(dbschema_tDBSCD_1 == null || dbschema_tDBSCD_1.trim().length() == 0) {
        tableName_tDBSCD_1 = "ProductDim";
    } else {
        tableName_tDBSCD_1 = dbschema_tDBSCD_1 + "].[" + "ProductDim";
    }
	org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBSCD_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();	
    String tmpValue_tDBSCD_1 = null;    
        String search_tDBSCD_1 = "SELECT [ProductID], [ProductCategory], [ProductName], [ProductSubCategory] FROM [" + tableName_tDBSCD_1 + "]";
        java.sql.Statement statement_tDBSCD_1 = conn_tDBSCD_1.createStatement();
        java.sql.ResultSet resultSet_tDBSCD_1 = statement_tDBSCD_1.executeQuery(search_tDBSCD_1);
        java.util.Map<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1> cache_tDBSCD_1 = new java.util.HashMap<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1>();
        while(resultSet_tDBSCD_1.next()) {
            SCDSK_tDBSCD_1 sk_tDBSCD_1 = new SCDSK_tDBSCD_1();
            SCDStruct_tDBSCD_1 row_tDBSCD_1 = new SCDStruct_tDBSCD_1();
                    if(resultSet_tDBSCD_1.getObject(1) != null) {
                        sk_tDBSCD_1.ProductID = resultSet_tDBSCD_1.getInt(1);
                    }
                    if(resultSet_tDBSCD_1.getObject(2) != null) {
                        row_tDBSCD_1.ProductCategory = resultSet_tDBSCD_1.getString(2);
                    }
                    if(resultSet_tDBSCD_1.getObject(3) != null) {
                        row_tDBSCD_1.ProductName = resultSet_tDBSCD_1.getString(3);
                    }
                    if(resultSet_tDBSCD_1.getObject(4) != null) {
                        row_tDBSCD_1.ProductSubCategory = resultSet_tDBSCD_1.getString(4);
                    }
            cache_tDBSCD_1.put(sk_tDBSCD_1, row_tDBSCD_1);
        }
        resultSet_tDBSCD_1.close();
        statement_tDBSCD_1.close();
    String insertionSQL_tDBSCD_1 = "INSERT INTO [" + tableName_tDBSCD_1 + "]([ProductID], [ProductCategory], [ProductName], [ProductSubCategory]) VALUES(?, ?, ?, ?)";
    java.sql.PreparedStatement insertionStatement_tDBSCD_1 = conn_tDBSCD_1.prepareStatement(insertionSQL_tDBSCD_1);
        String updateSQLForType1_tDBSCD_1 = "UPDATE [" + tableName_tDBSCD_1 + "] SET [ProductCategory] = ?, [ProductName] = ?, [ProductSubCategory] = ? WHERE [ProductID] = ?";
        java.sql.PreparedStatement updateForType1_tDBSCD_1 = conn_tDBSCD_1.prepareStatement(updateSQLForType1_tDBSCD_1);        
    
        SCDSK_tDBSCD_1 lookUpKey_tDBSCD_1 = null;        
    SCDStruct_tDBSCD_1 lookUpValue_tDBSCD_1 = null;

 



/**
 * [tDBSCD_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
			String dbschema_tDBInput_2 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \""+context.ecom_eval_dw_Schema+"\".ProductDim.ProductID,\n		\""+context.ecom_eval_dw_Schema+"\".ProductDim.ProductName,\n		\""+context.ecom_eval_dw_Schema+"\".ProductDim.ProductCategory,\n		\""+context.ecom_eval_dw_Schema+"\".ProductDim.ProductSubCategory"
+"\nFROM	\""+context.ecom_eval_dw_Schema+"\".ProductDim";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.ProductID = 0;
							} else {
		                          
            row2.ProductID = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.ProductName = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.ProductName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.ProductName = tmpContent_tDBInput_2;
                }
            } else {
                row2.ProductName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.ProductCategory = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.ProductCategory = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.ProductCategory = tmpContent_tDBInput_2;
                }
            } else {
                row2.ProductCategory = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.ProductSubCategory = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.ProductSubCategory = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.ProductSubCategory = tmpContent_tDBInput_2;
                }
            } else {
                row2.ProductSubCategory = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBSCD_1 main ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

	try {
        lookUpKey_tDBSCD_1 = new SCDSK_tDBSCD_1();
            lookUpKey_tDBSCD_1.ProductID = row2.ProductID;
        lookUpKey_tDBSCD_1.hashCodeDirty = true;
        lookUpValue_tDBSCD_1 = cache_tDBSCD_1.get(lookUpKey_tDBSCD_1);    
    if(lookUpValue_tDBSCD_1 == null) {
            lookUpValue_tDBSCD_1 = new SCDStruct_tDBSCD_1();
        
                    insertionStatement_tDBSCD_1.setInt(1, row2.ProductID);

                    if(row2.ProductCategory == null) {
insertionStatement_tDBSCD_1.setNull(2, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(2, row2.ProductCategory);
}

                    if(row2.ProductName == null) {
insertionStatement_tDBSCD_1.setNull(3, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(3, row2.ProductName);
}

                    if(row2.ProductSubCategory == null) {
insertionStatement_tDBSCD_1.setNull(4, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(4, row2.ProductSubCategory);
}

        nb_line_inserted_tDBSCD_1 += insertionStatement_tDBSCD_1.executeUpdate();
    } else {
            if((lookUpValue_tDBSCD_1.ProductCategory == null && row2.ProductCategory!= null) || (lookUpValue_tDBSCD_1.ProductCategory != null && !lookUpValue_tDBSCD_1.ProductCategory.equals(row2.ProductCategory)) || (lookUpValue_tDBSCD_1.ProductName == null && row2.ProductName!= null) || (lookUpValue_tDBSCD_1.ProductName != null && !lookUpValue_tDBSCD_1.ProductName.equals(row2.ProductName)) || (lookUpValue_tDBSCD_1.ProductSubCategory == null && row2.ProductSubCategory!= null) || (lookUpValue_tDBSCD_1.ProductSubCategory != null && !lookUpValue_tDBSCD_1.ProductSubCategory.equals(row2.ProductSubCategory))) {
                    if(row2.ProductCategory == null) {
updateForType1_tDBSCD_1.setNull(1, java.sql.Types.VARCHAR);
} else {
updateForType1_tDBSCD_1.setString(1, row2.ProductCategory);
}

                    if(row2.ProductName == null) {
updateForType1_tDBSCD_1.setNull(2, java.sql.Types.VARCHAR);
} else {
updateForType1_tDBSCD_1.setString(2, row2.ProductName);
}

                    if(row2.ProductSubCategory == null) {
updateForType1_tDBSCD_1.setNull(3, java.sql.Types.VARCHAR);
} else {
updateForType1_tDBSCD_1.setString(3, row2.ProductSubCategory);
}

                    updateForType1_tDBSCD_1.setInt(4, row2.ProductID);

                nb_line_update_tDBSCD_1 += updateForType1_tDBSCD_1.executeUpdate();
            }
    }
    
	} catch (java.lang.Exception e) {//catch
globalMap.put("tDBSCD_1_ERROR_MESSAGE",e.getMessage());
  		
            throw(e);
	}//end catch
	
                lookUpValue_tDBSCD_1.ProductCategory = row2.ProductCategory;
                lookUpValue_tDBSCD_1.ProductName = row2.ProductName;
                lookUpValue_tDBSCD_1.ProductSubCategory = row2.ProductSubCategory;
        cache_tDBSCD_1.put(lookUpKey_tDBSCD_1, lookUpValue_tDBSCD_1);


 


	tos_count_tDBSCD_1++;

/**
 * [tDBSCD_1 main ] stop
 */
	
	/**
	 * [tDBSCD_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBSCD_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tDBSCD_1 end ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

    insertionStatement_tDBSCD_1.close();
        updateForType1_tDBSCD_1.close();
    
    
    globalMap.put("tDBSCD_1_NB_LINE_UPDATED", nb_line_update_tDBSCD_1);
    globalMap.put("tDBSCD_1_NB_LINE_INSERTED", nb_line_inserted_tDBSCD_1);
    globalMap.put("tDBSCD_1_NB_LINE_REJECTED",nb_line_rejected_tDBSCD_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tDBSCD_1", true);
end_Hash.put("tDBSCD_1", System.currentTimeMillis());




/**
 * [tDBSCD_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tDBSCD_1 finally ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_sales_DM = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_sales_DM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ShipperID;

				public int getShipperID () {
					return this.ShipperID;
				}
				
			    public String ShipperName;

				public String getShipperName () {
					return this.ShipperName;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ShipperID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.ShipperID != other.ShipperID)
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.ShipperID = this.ShipperID;
	            other.ShipperName = this.ShipperName;
	            other.ShippingMethod = this.ShippingMethod;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.ShipperID = this.ShipperID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_sales_DM.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_sales_DM.length == 0) {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_sales_DM, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_sales_DM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_sales_DM.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_sales_DM.length == 0) {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_sales_DM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_sales_DM, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_sales_DM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_sales_DM) {

        	try {

        		int length = 0;
		
			        this.ShipperID = dis.readInt();
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_sales_DM) {

        	try {

        		int length = 0;
		
			        this.ShipperID = dis.readInt();
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ShipperID);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ShipperID);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ShipperID="+String.valueOf(ShipperID));
		sb.append(",ShipperName="+ShipperName);
		sb.append(",ShippingMethod="+ShippingMethod);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ShipperID, other.ShipperID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tDBOutput_5 = 0;
		



int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;
String dbschema_tDBOutput_5 = null;
String tableName_tDBOutput_5 = null;
boolean whetherReject_tDBOutput_5 = false;

java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
long year1_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_5;

java.util.Calendar calendar_datetimeoffset_tDBOutput_5 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_5 = 1;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_5 == 3 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

	
java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
    tableName_tDBOutput_5 = "ShipperDim";
} else {
    tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "].[" + "ShipperDim";
}
	int count_tDBOutput_5=0;

                                boolean whetherExist_tDBOutput_5 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_5.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_5 + "]" );
                                        whetherExist_tDBOutput_5 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_5 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_5) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                        stmtCreate_tDBOutput_5.execute("CREATE TABLE [" + tableName_tDBOutput_5 + "]([ShipperID] INT  not null ,[ShipperName] VARCHAR(60)  ,[ShippingMethod] VARCHAR(60)  ,primary key([ShipperID]))");
                                    }
                                }
        String update_tDBOutput_5 = "UPDATE [" + tableName_tDBOutput_5 + "] SET [ShipperName] = ?,[ShippingMethod] = ? WHERE [ShipperID] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
        resourceMap.put("pstmtUpdate_tDBOutput_5", pstmtUpdate_tDBOutput_5);
        String insert_tDBOutput_5 = "INSERT INTO [" + tableName_tDBOutput_5 + "] ([ShipperID],[ShipperName],[ShippingMethod]) VALUES (?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
        resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
 	boolean isShareIdentity_tDBOutput_5 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_11 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_11 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_11  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_11, talendToDBArray_tDBInput_11); 
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				conn_tDBInput_11 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
			String dbschema_tDBInput_11 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT \""+context.ecom_eval_dw_Schema+"\".ShipperDim.ShipperID,\n		\""+context.ecom_eval_dw_Schema+"\".ShipperDim.ShipperName,\n		\""+context.ecom_eval_dw_Schema+"\".ShipperDim.ShippingMethod"
+"\nFROM	\""+context.ecom_eval_dw_Schema+"\".ShipperDim";
		    

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row5.ShipperID = 0;
							} else {
		                          
            row5.ShipperID = rs_tDBInput_11.getInt(1);
            if(rs_tDBInput_11.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row5.ShipperName = null;
							} else {
	                         		
           		tmpContent_tDBInput_11 = rs_tDBInput_11.getString(2);
            if(tmpContent_tDBInput_11 != null) {
            	if (talendToDBList_tDBInput_11 .contains(rsmd_tDBInput_11.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.ShipperName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_11);
            	} else {
                	row5.ShipperName = tmpContent_tDBInput_11;
                }
            } else {
                row5.ShipperName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row5.ShippingMethod = null;
							} else {
	                         		
           		tmpContent_tDBInput_11 = rs_tDBInput_11.getString(3);
            if(tmpContent_tDBInput_11 != null) {
            	if (talendToDBList_tDBInput_11 .contains(rsmd_tDBInput_11.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.ShippingMethod = FormatterUtils.formatUnwithE(tmpContent_tDBInput_11);
            	} else {
                	row5.ShippingMethod = tmpContent_tDBInput_11;
                }
            } else {
                row5.ShippingMethod = null;
            }
		                    }
					





 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;
            int updateFlag_tDBOutput_5=0;
                    if(row5.ShipperName == null) {
pstmtUpdate_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(1, row5.ShipperName);
}

                    if(row5.ShippingMethod == null) {
pstmtUpdate_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(2, row5.ShippingMethod);
}


                    pstmtUpdate_tDBOutput_5.setInt(3 + count_tDBOutput_5, row5.ShipperID);

            try {
                updateFlag_tDBOutput_5=pstmtUpdate_tDBOutput_5.executeUpdate();
                updatedCount_tDBOutput_5 = updatedCount_tDBOutput_5+updateFlag_tDBOutput_5;
                rowsToCommitCount_tDBOutput_5 += updateFlag_tDBOutput_5;
            if(updateFlag_tDBOutput_5 == 0) {
            	
                        pstmtInsert_tDBOutput_5.setInt(1, row5.ShipperID);

                        if(row5.ShipperName == null) {
pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(2, row5.ShipperName);
}

                        if(row5.ShippingMethod == null) {
pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(3, row5.ShippingMethod);
}

                    int processedCount_tDBOutput_5 = pstmtInsert_tDBOutput_5.executeUpdate();
                    insertedCount_tDBOutput_5 += processedCount_tDBOutput_5;
                    rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
                    nb_line_tDBOutput_5++;
    			}else{
    				nb_line_tDBOutput_5++;
    				
    			}
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
                    whetherReject_tDBOutput_5 = true;
                    	nb_line_tDBOutput_5++;
                    	
                            System.err.println(e.getMessage());
                } finally {
				    
				}
            if(!whetherReject_tDBOutput_5) {
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_5{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_5) throws Exception {
                try {
						
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							if(countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
								break;
							}
							counter += countEach_tDBOutput_5;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_5 = 0;
					for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_5) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							if(countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
								break;
							}
							counter += countEach_tDBOutput_5;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);

 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



        if(pstmtUpdate_tDBOutput_5 != null){
            pstmtUpdate_tDBOutput_5.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_5");
        }
        if(pstmtInsert_tDBOutput_5 != null){
            pstmtInsert_tDBOutput_5.close();
            resourceMap.remove("pstmtInsert_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_5 = null;
                if ((pstmtUpdateToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_5")) != null) {
                    pstmtUpdateToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_5 = null;
                if ((pstmtInsertToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_5")) != null) {
                    pstmtInsertToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_sales_DM = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_sales_DM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public int year;

				public int getYear () {
					return this.year;
				}
				
			    public int month;

				public int getMonth () {
					return this.month;
				}
				
			    public int day;

				public int getDay () {
					return this.day;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.date == null) ? 0 : this.date.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.date == null) {
							if (other.date != null)
								return false;
						
						} else if (!this.date.equals(other.date))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.date = this.date;
	            other.year = this.year;
	            other.month = this.month;
	            other.day = this.day;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.date = this.date;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_sales_DM) {

        	try {

        		int length = 0;
		
					this.date = readDate(dis);
					
			        this.year = dis.readInt();
					
			        this.month = dis.readInt();
					
			        this.day = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_sales_DM) {

        	try {

        		int length = 0;
		
					this.date = readDate(dis);
					
			        this.year = dis.readInt();
					
			        this.month = dis.readInt();
					
			        this.day = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// int
				
		            	dos.writeInt(this.year);
					
					// int
				
		            	dos.writeInt(this.month);
					
					// int
				
		            	dos.writeInt(this.day);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// int
				
		            	dos.writeInt(this.year);
					
					// int
				
		            	dos.writeInt(this.month);
					
					// int
				
		            	dos.writeInt(this.day);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("date="+String.valueOf(date));
		sb.append(",year="+String.valueOf(year));
		sb.append(",month="+String.valueOf(month));
		sb.append(",day="+String.valueOf(day));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.date, other.date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tDBOutput_3 = 0;
		



int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;
String dbschema_tDBOutput_3 = null;
String tableName_tDBOutput_3 = null;
boolean whetherReject_tDBOutput_3 = false;

java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_3;

java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_3 = 1;
        if(insertKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
    tableName_tDBOutput_3 = "DateDim";
} else {
    tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].[" + "DateDim";
}
	int count_tDBOutput_3=0;

                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_3.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_3 + "]" );
                                        whetherExist_tDBOutput_3 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_3 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE [" + tableName_tDBOutput_3 + "]([date] DATE  not null ,[year] INT  not null ,[month] INT  not null ,[day] INT  not null ,primary key([date]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_3 + "] WHERE [date] = ?");
        resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
        String insert_tDBOutput_3 = "INSERT INTO [" + tableName_tDBOutput_3 + "] ([date],[year],[month],[day]) VALUES (?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
        resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
 	boolean isShareIdentity_tDBOutput_3 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
			String dbschema_tDBInput_3 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \""+context.ecom_eval_dw_Schema+"\".DateDim.date,\n		\""+context.ecom_eval_dw_Schema+"\".DateDim.\"year\",\n		\""+context.ecom_eval_dw_Schema+"\".DateDim.\"month\",\n		\""+context.ecom_eval_dw_Schema+"\".DateDim.\"day\""
+"\nFROM	\""+context.ecom_eval_dw_Schema+"\".DateDim";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.date = null;
							} else {
										
			row3.date = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 1);
			
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.year = 0;
							} else {
		                          
            row3.year = rs_tDBInput_3.getInt(2);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.month = 0;
							} else {
		                          
            row3.month = rs_tDBInput_3.getInt(3);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.day = 0;
							} else {
		                          
            row3.day = rs_tDBInput_3.getInt(4);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;

                if(row3.date != null) {
pstmt_tDBOutput_3.setTimestamp(1, new java.sql.Timestamp(row3.date.getTime()));
} else {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.TIMESTAMP);
}


        java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery();
        int checkCount_tDBOutput_3 = -1;
        while(rs_tDBOutput_3.next()) {
            checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
        }

        if (checkCount_tDBOutput_3 < 1) {
                    if(row3.date != null) {
pstmtInsert_tDBOutput_3.setTimestamp(1, new java.sql.Timestamp(row3.date.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(1, java.sql.Types.TIMESTAMP);
}

                    pstmtInsert_tDBOutput_3.setInt(2, row3.year);

                    pstmtInsert_tDBOutput_3.setInt(3, row3.month);

                    pstmtInsert_tDBOutput_3.setInt(4, row3.day);

            try {
                int processedCount_tDBOutput_3 = pstmtInsert_tDBOutput_3.executeUpdate();
                insertedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
                nb_line_tDBOutput_3++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_3 = true;
            	nb_line_tDBOutput_3++;
            	
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_3) {
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_3{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
						
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_sales_DM = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_sales_DM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesID;

				public int getSalesID () {
					return this.SalesID;
				}
				
			    public Integer ProductPrice;

				public Integer getProductPrice () {
					return this.ProductPrice;
				}
				
			    public Integer QuantitySold;

				public Integer getQuantitySold () {
					return this.QuantitySold;
				}
				
			    public Float TotalAmount;

				public Float getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public Float DiscountAmount;

				public Float getDiscountAmount () {
					return this.DiscountAmount;
				}
				
			    public Float NetAmount;

				public Float getNetAmount () {
					return this.NetAmount;
				}
				
			    public java.util.Date Date;

				public java.util.Date getDate () {
					return this.Date;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public int ShipperID;

				public int getShipperID () {
					return this.ShipperID;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.SalesID != other.SalesID)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.SalesID = this.SalesID;
	            other.ProductPrice = this.ProductPrice;
	            other.QuantitySold = this.QuantitySold;
	            other.TotalAmount = this.TotalAmount;
	            other.DiscountAmount = this.DiscountAmount;
	            other.NetAmount = this.NetAmount;
	            other.Date = this.Date;
	            other.ProductID = this.ProductID;
	            other.ShipperID = this.ShipperID;
	            other.CustomerID = this.CustomerID;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.SalesID = this.SalesID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_sales_DM) {

        	try {

        		int length = 0;
		
			        this.SalesID = dis.readInt();
					
						this.ProductPrice = readInteger(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
					this.Date = readDate(dis);
					
			        this.ProductID = dis.readInt();
					
			        this.ShipperID = dis.readInt();
					
						this.CustomerID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_sales_DM) {

        	try {

        		int length = 0;
		
			        this.SalesID = dis.readInt();
					
						this.ProductPrice = readInteger(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
					this.Date = readDate(dis);
					
			        this.ProductID = dis.readInt();
					
			        this.ShipperID = dis.readInt();
					
						this.CustomerID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesID);
					
					// Integer
				
						writeInteger(this.ProductPrice,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// java.util.Date
				
						writeDate(this.Date,dos);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// int
				
		            	dos.writeInt(this.ShipperID);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesID);
					
					// Integer
				
						writeInteger(this.ProductPrice,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// java.util.Date
				
						writeDate(this.Date,dos);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// int
				
		            	dos.writeInt(this.ShipperID);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesID="+String.valueOf(SalesID));
		sb.append(",ProductPrice="+String.valueOf(ProductPrice));
		sb.append(",QuantitySold="+String.valueOf(QuantitySold));
		sb.append(",TotalAmount="+String.valueOf(TotalAmount));
		sb.append(",DiscountAmount="+String.valueOf(DiscountAmount));
		sb.append(",NetAmount="+String.valueOf(NetAmount));
		sb.append(",Date="+String.valueOf(Date));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",ShipperID="+String.valueOf(ShipperID));
		sb.append(",CustomerID="+String.valueOf(CustomerID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesID, other.SalesID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 10 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "FactSales";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "FactSales";
}
	int count_tDBOutput_1=0;

                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]" );
                                        whetherExist_tDBOutput_1 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_1 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1 + "]([SalesID] INT  not null ,[ProductPrice] INT ,[QuantitySold] INT ,[TotalAmount] REAL ,[DiscountAmount] REAL ,[NetAmount] REAL ,[Date] DATE ,[ProductID] INT  not null ,[ShipperID] INT  not null ,[CustomerID] INT ,primary key([SalesID]))");
                                    }
                                }
        String update_tDBOutput_1 = "UPDATE [" + tableName_tDBOutput_1 + "] SET [ProductPrice] = ?,[QuantitySold] = ?,[TotalAmount] = ?,[DiscountAmount] = ?,[NetAmount] = ?,[Date] = ?,[ProductID] = ?,[ShipperID] = ?,[CustomerID] = ? WHERE [SalesID] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
        resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([SalesID],[ProductPrice],[QuantitySold],[TotalAmount],[DiscountAmount],[NetAmount],[Date],[ProductID],[ShipperID],[CustomerID]) VALUES (?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
 	boolean isShareIdentity_tDBOutput_1 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \""+context.ecom_eval_dw_Schema+"\".FactSales.SalesID,\n		\""+context.ecom_eval_dw_Schema+"\".FactSales.ProductPrice,\n		\""+context.ecom_eval_dw_Schema+"\".FactSales.QuantitySold,\n		\""+context.ecom_eval_dw_Schema+"\".FactSales.TotalAmount,\n		\""+context.ecom_eval_dw_Schema+"\".FactSales.DiscountAmount,\n		\""+context.ecom_eval_dw_Schema+"\".FactSales.NetAmount,\n		\""+context.ecom_eval_dw_Schema+"\".FactSales.Date,\n		\""+context.ecom_eval_dw_Schema+"\".FactSales.ProductID,\n		\""+context.ecom_eval_dw_Schema+"\".FactSales.ShipperID,\n		\""+context.ecom_eval_dw_Schema+"\".FactSales.CustomerID"
+"\nFROM	\""+context.ecom_eval_dw_Schema+"\".FactSales";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.SalesID = 0;
							} else {
		                          
            row1.SalesID = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.ProductPrice = null;
							} else {
		                          
            row1.ProductPrice = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    row1.ProductPrice = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.QuantitySold = null;
							} else {
		                          
            row1.QuantitySold = rs_tDBInput_1.getInt(3);
            if(rs_tDBInput_1.wasNull()){
                    row1.QuantitySold = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.TotalAmount = null;
							} else {
		                          
            row1.TotalAmount = rs_tDBInput_1.getFloat(4);
            if(rs_tDBInput_1.wasNull()){
                    row1.TotalAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.DiscountAmount = null;
							} else {
		                          
            row1.DiscountAmount = rs_tDBInput_1.getFloat(5);
            if(rs_tDBInput_1.wasNull()){
                    row1.DiscountAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.NetAmount = null;
							} else {
		                          
            row1.NetAmount = rs_tDBInput_1.getFloat(6);
            if(rs_tDBInput_1.wasNull()){
                    row1.NetAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.Date = null;
							} else {
										
			row1.Date = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 7);
			
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.ProductID = 0;
							} else {
		                          
            row1.ProductID = rs_tDBInput_1.getInt(8);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.ShipperID = 0;
							} else {
		                          
            row1.ShipperID = rs_tDBInput_1.getInt(9);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.CustomerID = null;
							} else {
		                          
            row1.CustomerID = rs_tDBInput_1.getInt(10);
            if(rs_tDBInput_1.wasNull()){
                    row1.CustomerID = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
            int updateFlag_tDBOutput_1=0;
                    if(row1.ProductPrice == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(1, row1.ProductPrice);
}

                    if(row1.QuantitySold == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(2, row1.QuantitySold);
}

                    if(row1.TotalAmount == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.FLOAT);
} else {pstmtUpdate_tDBOutput_1.setFloat(3, row1.TotalAmount);
}

                    if(row1.DiscountAmount == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.FLOAT);
} else {pstmtUpdate_tDBOutput_1.setFloat(4, row1.DiscountAmount);
}

                    if(row1.NetAmount == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.FLOAT);
} else {pstmtUpdate_tDBOutput_1.setFloat(5, row1.NetAmount);
}

                    if(row1.Date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(row1.Date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}

                    pstmtUpdate_tDBOutput_1.setInt(7, row1.ProductID);

                    pstmtUpdate_tDBOutput_1.setInt(8, row1.ShipperID);

                    if(row1.CustomerID == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(9, row1.CustomerID);
}


                    pstmtUpdate_tDBOutput_1.setInt(10 + count_tDBOutput_1, row1.SalesID);

            try {
                updateFlag_tDBOutput_1=pstmtUpdate_tDBOutput_1.executeUpdate();
                updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1+updateFlag_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += updateFlag_tDBOutput_1;
            if(updateFlag_tDBOutput_1 == 0) {
            	
                        pstmtInsert_tDBOutput_1.setInt(1, row1.SalesID);

                        if(row1.ProductPrice == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(2, row1.ProductPrice);
}

                        if(row1.QuantitySold == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(3, row1.QuantitySold);
}

                        if(row1.TotalAmount == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.FLOAT);
} else {pstmtInsert_tDBOutput_1.setFloat(4, row1.TotalAmount);
}

                        if(row1.DiscountAmount == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.FLOAT);
} else {pstmtInsert_tDBOutput_1.setFloat(5, row1.DiscountAmount);
}

                        if(row1.NetAmount == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.FLOAT);
} else {pstmtInsert_tDBOutput_1.setFloat(6, row1.NetAmount);
}

                        if(row1.Date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(7, new java.sql.Timestamp(row1.Date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.TIMESTAMP);
}

                        pstmtInsert_tDBOutput_1.setInt(8, row1.ProductID);

                        pstmtInsert_tDBOutput_1.setInt(9, row1.ShipperID);

                        if(row1.CustomerID == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(10, row1.CustomerID);
}

                    int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
                    insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    nb_line_tDBOutput_1++;
    			}else{
    				nb_line_tDBOutput_1++;
    				
    			}
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                } finally {
				    
				}
            if(!whetherReject_tDBOutput_1) {
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final sales_DM sales_DMClass = new sales_DM();

        int exitCode = sales_DMClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = sales_DM.class.getClassLoader().getResourceAsStream("ecomevaluation/sales_dm_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = sales_DM.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ecom_eval_dw_Password", "id_Password");
                        if(context.getStringValue("ecom_eval_dw_Password") == null) {
                            context.ecom_eval_dw_Password = null;
                        } else {
                            String pwd_ecom_eval_dw_Password_value = context.getProperty("ecom_eval_dw_Password");
                            context.ecom_eval_dw_Password = null;
                            if(pwd_ecom_eval_dw_Password_value!=null) {
                                if(context_param.containsKey("ecom_eval_dw_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.ecom_eval_dw_Password = pwd_ecom_eval_dw_Password_value;
                                } else if (!pwd_ecom_eval_dw_Password_value.isEmpty()) {
                                    try {
                                        context.ecom_eval_dw_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ecom_eval_dw_Password_value);
                                        context.put("ecom_eval_dw_Password",context.ecom_eval_dw_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("ecom_eval_dw_Login", "id_String");
                        if(context.getStringValue("ecom_eval_dw_Login") == null) {
                            context.ecom_eval_dw_Login = null;
                        } else {
                            context.ecom_eval_dw_Login=(String) context.getProperty("ecom_eval_dw_Login");
                        }
                        context.setContextType("ecom_eval_dw_Schema", "id_String");
                        if(context.getStringValue("ecom_eval_dw_Schema") == null) {
                            context.ecom_eval_dw_Schema = null;
                        } else {
                            context.ecom_eval_dw_Schema=(String) context.getProperty("ecom_eval_dw_Schema");
                        }
                        context.setContextType("ecom_eval_dw_AdditionalParams", "id_String");
                        if(context.getStringValue("ecom_eval_dw_AdditionalParams") == null) {
                            context.ecom_eval_dw_AdditionalParams = null;
                        } else {
                            context.ecom_eval_dw_AdditionalParams=(String) context.getProperty("ecom_eval_dw_AdditionalParams");
                        }
                        context.setContextType("ecom_eval_dw_Port", "id_String");
                        if(context.getStringValue("ecom_eval_dw_Port") == null) {
                            context.ecom_eval_dw_Port = null;
                        } else {
                            context.ecom_eval_dw_Port=(String) context.getProperty("ecom_eval_dw_Port");
                        }
                        context.setContextType("ecom_eval_dw_Server", "id_String");
                        if(context.getStringValue("ecom_eval_dw_Server") == null) {
                            context.ecom_eval_dw_Server = null;
                        } else {
                            context.ecom_eval_dw_Server=(String) context.getProperty("ecom_eval_dw_Server");
                        }
                        context.setContextType("ecom_eval_dw_Database", "id_String");
                        if(context.getStringValue("ecom_eval_dw_Database") == null) {
                            context.ecom_eval_dw_Database = null;
                        } else {
                            context.ecom_eval_dw_Database=(String) context.getProperty("ecom_eval_dw_Database");
                        }
                        context.setContextType("ecom_eval_sales_dm_Schema", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm_Schema") == null) {
                            context.ecom_eval_sales_dm_Schema = null;
                        } else {
                            context.ecom_eval_sales_dm_Schema=(String) context.getProperty("ecom_eval_sales_dm_Schema");
                        }
                        context.setContextType("ecom_eval_sales_dm_Login", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm_Login") == null) {
                            context.ecom_eval_sales_dm_Login = null;
                        } else {
                            context.ecom_eval_sales_dm_Login=(String) context.getProperty("ecom_eval_sales_dm_Login");
                        }
                        context.setContextType("ecom_eval_sales_dm_AdditionalParams", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm_AdditionalParams") == null) {
                            context.ecom_eval_sales_dm_AdditionalParams = null;
                        } else {
                            context.ecom_eval_sales_dm_AdditionalParams=(String) context.getProperty("ecom_eval_sales_dm_AdditionalParams");
                        }
                        context.setContextType("ecom_eval_sales_dm_Database", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm_Database") == null) {
                            context.ecom_eval_sales_dm_Database = null;
                        } else {
                            context.ecom_eval_sales_dm_Database=(String) context.getProperty("ecom_eval_sales_dm_Database");
                        }
                        context.setContextType("ecom_eval_sales_dm_Password", "id_Password");
                        if(context.getStringValue("ecom_eval_sales_dm_Password") == null) {
                            context.ecom_eval_sales_dm_Password = null;
                        } else {
                            String pwd_ecom_eval_sales_dm_Password_value = context.getProperty("ecom_eval_sales_dm_Password");
                            context.ecom_eval_sales_dm_Password = null;
                            if(pwd_ecom_eval_sales_dm_Password_value!=null) {
                                if(context_param.containsKey("ecom_eval_sales_dm_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.ecom_eval_sales_dm_Password = pwd_ecom_eval_sales_dm_Password_value;
                                } else if (!pwd_ecom_eval_sales_dm_Password_value.isEmpty()) {
                                    try {
                                        context.ecom_eval_sales_dm_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ecom_eval_sales_dm_Password_value);
                                        context.put("ecom_eval_sales_dm_Password",context.ecom_eval_sales_dm_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("ecom_eval_sales_dm_Server", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm_Server") == null) {
                            context.ecom_eval_sales_dm_Server = null;
                        } else {
                            context.ecom_eval_sales_dm_Server=(String) context.getProperty("ecom_eval_sales_dm_Server");
                        }
                        context.setContextType("ecom_eval_sales_dm_Port", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm_Port") == null) {
                            context.ecom_eval_sales_dm_Port = null;
                        } else {
                            context.ecom_eval_sales_dm_Port=(String) context.getProperty("ecom_eval_sales_dm_Port");
                        }
                        context.setContextType("ecom_eval_sales_dm1_Server", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm1_Server") == null) {
                            context.ecom_eval_sales_dm1_Server = null;
                        } else {
                            context.ecom_eval_sales_dm1_Server=(String) context.getProperty("ecom_eval_sales_dm1_Server");
                        }
                        context.setContextType("ecom_eval_sales_dm1_Port", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm1_Port") == null) {
                            context.ecom_eval_sales_dm1_Port = null;
                        } else {
                            context.ecom_eval_sales_dm1_Port=(String) context.getProperty("ecom_eval_sales_dm1_Port");
                        }
                        context.setContextType("ecom_eval_sales_dm1_Schema", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm1_Schema") == null) {
                            context.ecom_eval_sales_dm1_Schema = null;
                        } else {
                            context.ecom_eval_sales_dm1_Schema=(String) context.getProperty("ecom_eval_sales_dm1_Schema");
                        }
                        context.setContextType("ecom_eval_sales_dm1_Database", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm1_Database") == null) {
                            context.ecom_eval_sales_dm1_Database = null;
                        } else {
                            context.ecom_eval_sales_dm1_Database=(String) context.getProperty("ecom_eval_sales_dm1_Database");
                        }
                        context.setContextType("ecom_eval_sales_dm1_Login", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm1_Login") == null) {
                            context.ecom_eval_sales_dm1_Login = null;
                        } else {
                            context.ecom_eval_sales_dm1_Login=(String) context.getProperty("ecom_eval_sales_dm1_Login");
                        }
                        context.setContextType("ecom_eval_sales_dm1_Password", "id_Password");
                        if(context.getStringValue("ecom_eval_sales_dm1_Password") == null) {
                            context.ecom_eval_sales_dm1_Password = null;
                        } else {
                            String pwd_ecom_eval_sales_dm1_Password_value = context.getProperty("ecom_eval_sales_dm1_Password");
                            context.ecom_eval_sales_dm1_Password = null;
                            if(pwd_ecom_eval_sales_dm1_Password_value!=null) {
                                if(context_param.containsKey("ecom_eval_sales_dm1_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.ecom_eval_sales_dm1_Password = pwd_ecom_eval_sales_dm1_Password_value;
                                } else if (!pwd_ecom_eval_sales_dm1_Password_value.isEmpty()) {
                                    try {
                                        context.ecom_eval_sales_dm1_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ecom_eval_sales_dm1_Password_value);
                                        context.put("ecom_eval_sales_dm1_Password",context.ecom_eval_sales_dm1_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("ecom_eval_sales_dm1_AdditionalParams", "id_String");
                        if(context.getStringValue("ecom_eval_sales_dm1_AdditionalParams") == null) {
                            context.ecom_eval_sales_dm1_AdditionalParams = null;
                        } else {
                            context.ecom_eval_sales_dm1_AdditionalParams=(String) context.getProperty("ecom_eval_sales_dm1_AdditionalParams");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ecom_eval_dw_Password")) {
                context.ecom_eval_dw_Password = (java.lang.String) parentContextMap.get("ecom_eval_dw_Password");
            }if (parentContextMap.containsKey("ecom_eval_dw_Login")) {
                context.ecom_eval_dw_Login = (String) parentContextMap.get("ecom_eval_dw_Login");
            }if (parentContextMap.containsKey("ecom_eval_dw_Schema")) {
                context.ecom_eval_dw_Schema = (String) parentContextMap.get("ecom_eval_dw_Schema");
            }if (parentContextMap.containsKey("ecom_eval_dw_AdditionalParams")) {
                context.ecom_eval_dw_AdditionalParams = (String) parentContextMap.get("ecom_eval_dw_AdditionalParams");
            }if (parentContextMap.containsKey("ecom_eval_dw_Port")) {
                context.ecom_eval_dw_Port = (String) parentContextMap.get("ecom_eval_dw_Port");
            }if (parentContextMap.containsKey("ecom_eval_dw_Server")) {
                context.ecom_eval_dw_Server = (String) parentContextMap.get("ecom_eval_dw_Server");
            }if (parentContextMap.containsKey("ecom_eval_dw_Database")) {
                context.ecom_eval_dw_Database = (String) parentContextMap.get("ecom_eval_dw_Database");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm_Schema")) {
                context.ecom_eval_sales_dm_Schema = (String) parentContextMap.get("ecom_eval_sales_dm_Schema");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm_Login")) {
                context.ecom_eval_sales_dm_Login = (String) parentContextMap.get("ecom_eval_sales_dm_Login");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm_AdditionalParams")) {
                context.ecom_eval_sales_dm_AdditionalParams = (String) parentContextMap.get("ecom_eval_sales_dm_AdditionalParams");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm_Database")) {
                context.ecom_eval_sales_dm_Database = (String) parentContextMap.get("ecom_eval_sales_dm_Database");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm_Password")) {
                context.ecom_eval_sales_dm_Password = (java.lang.String) parentContextMap.get("ecom_eval_sales_dm_Password");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm_Server")) {
                context.ecom_eval_sales_dm_Server = (String) parentContextMap.get("ecom_eval_sales_dm_Server");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm_Port")) {
                context.ecom_eval_sales_dm_Port = (String) parentContextMap.get("ecom_eval_sales_dm_Port");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm1_Server")) {
                context.ecom_eval_sales_dm1_Server = (String) parentContextMap.get("ecom_eval_sales_dm1_Server");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm1_Port")) {
                context.ecom_eval_sales_dm1_Port = (String) parentContextMap.get("ecom_eval_sales_dm1_Port");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm1_Schema")) {
                context.ecom_eval_sales_dm1_Schema = (String) parentContextMap.get("ecom_eval_sales_dm1_Schema");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm1_Database")) {
                context.ecom_eval_sales_dm1_Database = (String) parentContextMap.get("ecom_eval_sales_dm1_Database");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm1_Login")) {
                context.ecom_eval_sales_dm1_Login = (String) parentContextMap.get("ecom_eval_sales_dm1_Login");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm1_Password")) {
                context.ecom_eval_sales_dm1_Password = (java.lang.String) parentContextMap.get("ecom_eval_sales_dm1_Password");
            }if (parentContextMap.containsKey("ecom_eval_sales_dm1_AdditionalParams")) {
                context.ecom_eval_sales_dm1_AdditionalParams = (String) parentContextMap.get("ecom_eval_sales_dm1_AdditionalParams");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("ecom_eval_dw_Password");
			parametersToEncrypt.add("ecom_eval_sales_dm_Password");
			parametersToEncrypt.add("ecom_eval_sales_dm1_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

e_tDBInput_4.printStackTrace();

}
try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}
try {
errorCode = null;tDBInput_11Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_11) {
globalMap.put("tDBInput_11_SUBPROCESS_STATE", -1);

e_tDBInput_11.printStackTrace();

}
try {
errorCode = null;tDBInput_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}
try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : sales_DM");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     234715 characters generated by Talend Open Studio for Data Integration 
 *     on the October 7, 2023 at 10:40:11 PM WEST
 ************************************************************************************************/