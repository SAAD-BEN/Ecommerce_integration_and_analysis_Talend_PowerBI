// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ecomevaluation.transformation_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.Encryption;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: transformation Purpose: transforming and cleaning<br>
 * Description: transforming and cleaning staged data <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class transformation implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ecom_eval_staging_Password != null){
				
					this.setProperty("ecom_eval_staging_Password", ecom_eval_staging_Password.toString());
				
			}
			
			if(ecom_eval_staging_Server != null){
				
					this.setProperty("ecom_eval_staging_Server", ecom_eval_staging_Server.toString());
				
			}
			
			if(ecom_eval_staging_Database != null){
				
					this.setProperty("ecom_eval_staging_Database", ecom_eval_staging_Database.toString());
				
			}
			
			if(ecom_eval_staging_Schema != null){
				
					this.setProperty("ecom_eval_staging_Schema", ecom_eval_staging_Schema.toString());
				
			}
			
			if(ecom_eval_staging_Login != null){
				
					this.setProperty("ecom_eval_staging_Login", ecom_eval_staging_Login.toString());
				
			}
			
			if(ecom_eval_staging_AdditionalParams != null){
				
					this.setProperty("ecom_eval_staging_AdditionalParams", ecom_eval_staging_AdditionalParams.toString());
				
			}
			
			if(ecom_eval_staging_Port != null){
				
					this.setProperty("ecom_eval_staging_Port", ecom_eval_staging_Port.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public java.lang.String ecom_eval_staging_Password;
public java.lang.String getEcom_eval_staging_Password(){
	return this.ecom_eval_staging_Password;
}
public String ecom_eval_staging_Server;
public String getEcom_eval_staging_Server(){
	return this.ecom_eval_staging_Server;
}
public String ecom_eval_staging_Database;
public String getEcom_eval_staging_Database(){
	return this.ecom_eval_staging_Database;
}
public String ecom_eval_staging_Schema;
public String getEcom_eval_staging_Schema(){
	return this.ecom_eval_staging_Schema;
}
public String ecom_eval_staging_Login;
public String getEcom_eval_staging_Login(){
	return this.ecom_eval_staging_Login;
}
public String ecom_eval_staging_AdditionalParams;
public String getEcom_eval_staging_AdditionalParams(){
	return this.ecom_eval_staging_AdditionalParams;
}
public String ecom_eval_staging_Port;
public String getEcom_eval_staging_Port(){
	return this.ecom_eval_staging_Port;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "transformation";
	private final String projectName = "ECOMEVALUATION";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				transformation.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(transformation.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + context.ecom_eval_staging_Server ;
		String port_tDBConnection_1 = context.ecom_eval_staging_Port;
		String dbname_tDBConnection_1 = context.ecom_eval_staging_Database ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + context.ecom_eval_staging_Port;
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + context.ecom_eval_staging_Database; 
    	}

		url_tDBConnection_1 += ";appName=" + projectName + ";" + context.ecom_eval_staging_AdditionalParams;  
	String dbUser_tDBConnection_1 = context.ecom_eval_staging_Login;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.ecom_eval_staging_Password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", context.ecom_eval_staging_Schema);

	globalMap.put("db_tDBConnection_1",  context.ecom_eval_staging_Database);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

	globalMap.put("driver_tDBConnection_1", "JTDS");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class FixedProductStruct implements routines.system.IPersistableRow<FixedProductStruct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_transformation = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_transformation = new byte[0];

	
			    public java.util.Date Date;

				public java.util.Date getDate () {
					return this.Date;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductCategory;

				public String getProductCategory () {
					return this.ProductCategory;
				}
				
			    public String ProductSubCategory;

				public String getProductSubCategory () {
					return this.ProductSubCategory;
				}
				
			    public Integer ProductPrice;

				public Integer getProductPrice () {
					return this.ProductPrice;
				}
				
			    public String HashedPI;

				public String getHashedPI () {
					return this.HashedPI;
				}
				
			    public String CustomerState;

				public String getCustomerState () {
					return this.CustomerState;
				}
				
			    public String CustomerSegment;

				public String getCustomerSegment () {
					return this.CustomerSegment;
				}
				
			    public String SupplierName;

				public String getSupplierName () {
					return this.SupplierName;
				}
				
			    public String SupplierLocation;

				public String getSupplierLocation () {
					return this.SupplierLocation;
				}
				
			    public String ShipperName;

				public String getShipperName () {
					return this.ShipperName;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public Integer QuantitySold;

				public Integer getQuantitySold () {
					return this.QuantitySold;
				}
				
			    public Float TotalAmount;

				public Float getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public Float DiscountAmount;

				public Float getDiscountAmount () {
					return this.DiscountAmount;
				}
				
			    public Float NetAmount;

				public Float getNetAmount () {
					return this.NetAmount;
				}
				
			    public Integer StockReceived;

				public Integer getStockReceived () {
					return this.StockReceived;
				}
				
			    public Integer StockSold;

				public Integer getStockSold () {
					return this.StockSold;
				}
				
			    public Integer StockOnHand;

				public Integer getStockOnHand () {
					return this.StockOnHand;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readDate(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
						this.ProductPrice = readInteger(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readDate(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
						this.ProductPrice = readInteger(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// Integer
				
						writeInteger(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// Integer
				
						writeInteger(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date="+String.valueOf(Date));
		sb.append(",ProductName="+ProductName);
		sb.append(",ProductCategory="+ProductCategory);
		sb.append(",ProductSubCategory="+ProductSubCategory);
		sb.append(",ProductPrice="+String.valueOf(ProductPrice));
		sb.append(",HashedPI="+HashedPI);
		sb.append(",CustomerState="+CustomerState);
		sb.append(",CustomerSegment="+CustomerSegment);
		sb.append(",SupplierName="+SupplierName);
		sb.append(",SupplierLocation="+SupplierLocation);
		sb.append(",ShipperName="+ShipperName);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",QuantitySold="+String.valueOf(QuantitySold));
		sb.append(",TotalAmount="+String.valueOf(TotalAmount));
		sb.append(",DiscountAmount="+String.valueOf(DiscountAmount));
		sb.append(",NetAmount="+String.valueOf(NetAmount));
		sb.append(",StockReceived="+String.valueOf(StockReceived));
		sb.append(",StockSold="+String.valueOf(StockSold));
		sb.append(",StockOnHand="+String.valueOf(StockOnHand));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(FixedProductStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_transformation = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_transformation = new byte[0];

	
			    public java.util.Date Date;

				public java.util.Date getDate () {
					return this.Date;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductCategory;

				public String getProductCategory () {
					return this.ProductCategory;
				}
				
			    public String ProductSubCategory;

				public String getProductSubCategory () {
					return this.ProductSubCategory;
				}
				
			    public Integer ProductPrice;

				public Integer getProductPrice () {
					return this.ProductPrice;
				}
				
			    public String HashedPI;

				public String getHashedPI () {
					return this.HashedPI;
				}
				
			    public String CustomerState;

				public String getCustomerState () {
					return this.CustomerState;
				}
				
			    public String CustomerSegment;

				public String getCustomerSegment () {
					return this.CustomerSegment;
				}
				
			    public String SupplierName;

				public String getSupplierName () {
					return this.SupplierName;
				}
				
			    public String SupplierLocation;

				public String getSupplierLocation () {
					return this.SupplierLocation;
				}
				
			    public String ShipperName;

				public String getShipperName () {
					return this.ShipperName;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public Integer QuantitySold;

				public Integer getQuantitySold () {
					return this.QuantitySold;
				}
				
			    public Float TotalAmount;

				public Float getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public Float DiscountAmount;

				public Float getDiscountAmount () {
					return this.DiscountAmount;
				}
				
			    public Float NetAmount;

				public Float getNetAmount () {
					return this.NetAmount;
				}
				
			    public Integer StockReceived;

				public Integer getStockReceived () {
					return this.StockReceived;
				}
				
			    public Integer StockSold;

				public Integer getStockSold () {
					return this.StockSold;
				}
				
			    public Integer StockOnHand;

				public Integer getStockOnHand () {
					return this.StockOnHand;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readDate(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
						this.ProductPrice = readInteger(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readDate(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
						this.ProductPrice = readInteger(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// Integer
				
						writeInteger(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// Integer
				
						writeInteger(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date="+String.valueOf(Date));
		sb.append(",ProductName="+ProductName);
		sb.append(",ProductCategory="+ProductCategory);
		sb.append(",ProductSubCategory="+ProductSubCategory);
		sb.append(",ProductPrice="+String.valueOf(ProductPrice));
		sb.append(",HashedPI="+HashedPI);
		sb.append(",CustomerState="+CustomerState);
		sb.append(",CustomerSegment="+CustomerSegment);
		sb.append(",SupplierName="+SupplierName);
		sb.append(",SupplierLocation="+SupplierLocation);
		sb.append(",ShipperName="+ShipperName);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",QuantitySold="+String.valueOf(QuantitySold));
		sb.append(",TotalAmount="+String.valueOf(TotalAmount));
		sb.append(",DiscountAmount="+String.valueOf(DiscountAmount));
		sb.append(",NetAmount="+String.valueOf(NetAmount));
		sb.append(",StockReceived="+String.valueOf(StockReceived));
		sb.append(",StockSold="+String.valueOf(StockSold));
		sb.append(",StockOnHand="+String.valueOf(StockOnHand));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class transformedStruct implements routines.system.IPersistableRow<transformedStruct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_transformation = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_transformation = new byte[0];

	
			    public java.util.Date Date;

				public java.util.Date getDate () {
					return this.Date;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductCategory;

				public String getProductCategory () {
					return this.ProductCategory;
				}
				
			    public String ProductSubCategory;

				public String getProductSubCategory () {
					return this.ProductSubCategory;
				}
				
			    public Integer ProductPrice;

				public Integer getProductPrice () {
					return this.ProductPrice;
				}
				
			    public String HashedPI;

				public String getHashedPI () {
					return this.HashedPI;
				}
				
			    public String CustomerState;

				public String getCustomerState () {
					return this.CustomerState;
				}
				
			    public String CustomerSegment;

				public String getCustomerSegment () {
					return this.CustomerSegment;
				}
				
			    public String SupplierName;

				public String getSupplierName () {
					return this.SupplierName;
				}
				
			    public String SupplierLocation;

				public String getSupplierLocation () {
					return this.SupplierLocation;
				}
				
			    public String ShipperName;

				public String getShipperName () {
					return this.ShipperName;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public Integer QuantitySold;

				public Integer getQuantitySold () {
					return this.QuantitySold;
				}
				
			    public Float TotalAmount;

				public Float getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public Float DiscountAmount;

				public Float getDiscountAmount () {
					return this.DiscountAmount;
				}
				
			    public Float NetAmount;

				public Float getNetAmount () {
					return this.NetAmount;
				}
				
			    public Integer StockReceived;

				public Integer getStockReceived () {
					return this.StockReceived;
				}
				
			    public Integer StockSold;

				public Integer getStockSold () {
					return this.StockSold;
				}
				
			    public Integer StockOnHand;

				public Integer getStockOnHand () {
					return this.StockOnHand;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readDate(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
						this.ProductPrice = readInteger(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readDate(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
						this.ProductPrice = readInteger(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// Integer
				
						writeInteger(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// Integer
				
						writeInteger(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date="+String.valueOf(Date));
		sb.append(",ProductName="+ProductName);
		sb.append(",ProductCategory="+ProductCategory);
		sb.append(",ProductSubCategory="+ProductSubCategory);
		sb.append(",ProductPrice="+String.valueOf(ProductPrice));
		sb.append(",HashedPI="+HashedPI);
		sb.append(",CustomerState="+CustomerState);
		sb.append(",CustomerSegment="+CustomerSegment);
		sb.append(",SupplierName="+SupplierName);
		sb.append(",SupplierLocation="+SupplierLocation);
		sb.append(",ShipperName="+ShipperName);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",QuantitySold="+String.valueOf(QuantitySold));
		sb.append(",TotalAmount="+String.valueOf(TotalAmount));
		sb.append(",DiscountAmount="+String.valueOf(DiscountAmount));
		sb.append(",NetAmount="+String.valueOf(NetAmount));
		sb.append(",StockReceived="+String.valueOf(StockReceived));
		sb.append(",StockSold="+String.valueOf(StockSold));
		sb.append(",StockOnHand="+String.valueOf(StockOnHand));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(transformedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_transformation = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_transformation = new byte[0];

	
			    public String Date;

				public String getDate () {
					return this.Date;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductCategory;

				public String getProductCategory () {
					return this.ProductCategory;
				}
				
			    public String ProductSubCategory;

				public String getProductSubCategory () {
					return this.ProductSubCategory;
				}
				
			    public String ProductPrice;

				public String getProductPrice () {
					return this.ProductPrice;
				}
				
			    public String HashedPI;

				public String getHashedPI () {
					return this.HashedPI;
				}
				
			    public String CustomerState;

				public String getCustomerState () {
					return this.CustomerState;
				}
				
			    public String CustomerSegment;

				public String getCustomerSegment () {
					return this.CustomerSegment;
				}
				
			    public String SupplierName;

				public String getSupplierName () {
					return this.SupplierName;
				}
				
			    public String SupplierLocation;

				public String getSupplierLocation () {
					return this.SupplierLocation;
				}
				
			    public String SupplierContact;

				public String getSupplierContact () {
					return this.SupplierContact;
				}
				
			    public String ShipperName;

				public String getShipperName () {
					return this.ShipperName;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public Integer QuantitySold;

				public Integer getQuantitySold () {
					return this.QuantitySold;
				}
				
			    public Float TotalAmount;

				public Float getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public Float DiscountAmount;

				public Float getDiscountAmount () {
					return this.DiscountAmount;
				}
				
			    public Float NetAmount;

				public Float getNetAmount () {
					return this.NetAmount;
				}
				
			    public Integer StockReceived;

				public Integer getStockReceived () {
					return this.StockReceived;
				}
				
			    public Integer StockSold;

				public Integer getStockSold () {
					return this.StockSold;
				}
				
			    public Integer StockOnHand;

				public Integer getStockOnHand () {
					return this.StockOnHand;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readString(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
					this.ProductPrice = readString(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.SupplierContact = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readString(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
					this.ProductPrice = readString(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.SupplierContact = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// String
				
						writeString(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.SupplierContact,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// String
				
						writeString(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.SupplierContact,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date="+Date);
		sb.append(",ProductName="+ProductName);
		sb.append(",ProductCategory="+ProductCategory);
		sb.append(",ProductSubCategory="+ProductSubCategory);
		sb.append(",ProductPrice="+ProductPrice);
		sb.append(",HashedPI="+HashedPI);
		sb.append(",CustomerState="+CustomerState);
		sb.append(",CustomerSegment="+CustomerSegment);
		sb.append(",SupplierName="+SupplierName);
		sb.append(",SupplierLocation="+SupplierLocation);
		sb.append(",SupplierContact="+SupplierContact);
		sb.append(",ShipperName="+ShipperName);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",QuantitySold="+String.valueOf(QuantitySold));
		sb.append(",TotalAmount="+String.valueOf(TotalAmount));
		sb.append(",DiscountAmount="+String.valueOf(DiscountAmount));
		sb.append(",NetAmount="+String.valueOf(NetAmount));
		sb.append(",StockReceived="+String.valueOf(StockReceived));
		sb.append(",StockSold="+String.valueOf(StockSold));
		sb.append(",StockOnHand="+String.valueOf(StockOnHand));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_transformation = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_transformation = new byte[0];

	
			    public String Date;

				public String getDate () {
					return this.Date;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductCategory;

				public String getProductCategory () {
					return this.ProductCategory;
				}
				
			    public String ProductSubCategory;

				public String getProductSubCategory () {
					return this.ProductSubCategory;
				}
				
			    public String ProductPrice;

				public String getProductPrice () {
					return this.ProductPrice;
				}
				
			    public String HashedPI;

				public String getHashedPI () {
					return this.HashedPI;
				}
				
			    public String CustomerState;

				public String getCustomerState () {
					return this.CustomerState;
				}
				
			    public String CustomerSegment;

				public String getCustomerSegment () {
					return this.CustomerSegment;
				}
				
			    public String SupplierName;

				public String getSupplierName () {
					return this.SupplierName;
				}
				
			    public String SupplierLocation;

				public String getSupplierLocation () {
					return this.SupplierLocation;
				}
				
			    public String SupplierContact;

				public String getSupplierContact () {
					return this.SupplierContact;
				}
				
			    public String ShipperName;

				public String getShipperName () {
					return this.ShipperName;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public Integer QuantitySold;

				public Integer getQuantitySold () {
					return this.QuantitySold;
				}
				
			    public Float TotalAmount;

				public Float getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public Float DiscountAmount;

				public Float getDiscountAmount () {
					return this.DiscountAmount;
				}
				
			    public Float NetAmount;

				public Float getNetAmount () {
					return this.NetAmount;
				}
				
			    public Integer StockReceived;

				public Integer getStockReceived () {
					return this.StockReceived;
				}
				
			    public Integer StockSold;

				public Integer getStockSold () {
					return this.StockSold;
				}
				
			    public Integer StockOnHand;

				public Integer getStockOnHand () {
					return this.StockOnHand;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readString(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
					this.ProductPrice = readString(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.SupplierContact = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readString(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
					this.ProductPrice = readString(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.SupplierContact = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// String
				
						writeString(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.SupplierContact,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// String
				
						writeString(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.SupplierContact,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date="+Date);
		sb.append(",ProductName="+ProductName);
		sb.append(",ProductCategory="+ProductCategory);
		sb.append(",ProductSubCategory="+ProductSubCategory);
		sb.append(",ProductPrice="+ProductPrice);
		sb.append(",HashedPI="+HashedPI);
		sb.append(",CustomerState="+CustomerState);
		sb.append(",CustomerSegment="+CustomerSegment);
		sb.append(",SupplierName="+SupplierName);
		sb.append(",SupplierLocation="+SupplierLocation);
		sb.append(",SupplierContact="+SupplierContact);
		sb.append(",ShipperName="+ShipperName);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",QuantitySold="+String.valueOf(QuantitySold));
		sb.append(",TotalAmount="+String.valueOf(TotalAmount));
		sb.append(",DiscountAmount="+String.valueOf(DiscountAmount));
		sb.append(",NetAmount="+String.valueOf(NetAmount));
		sb.append(",StockReceived="+String.valueOf(StockReceived));
		sb.append(",StockSold="+String.valueOf(StockSold));
		sb.append(",StockOnHand="+String.valueOf(StockOnHand));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
transformedStruct transformed = new transformedStruct();
row2Struct row2 = new row2Struct();
FixedProductStruct FixedProduct = new FixedProductStruct();







	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"FixedProduct");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
FixedProductStruct FixedProduct_tmp = new FixedProductStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"transformed");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					java.util.Date Date;
					String ProductName;
					String ProductCategory;
					String ProductSubCategory;
					Integer ProductPrice;
					String CustomerSegment;
					String SupplierName;
					String SupplierLocation;
					String ShipperName;
					String ShippingMethod;
					Integer QuantitySold;
					Float TotalAmount;
					Float DiscountAmount;
					Float NetAmount;
					Integer StockReceived;
					Integer StockSold;
					Integer StockOnHand;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());
								
								result = prime * result + ((this.ProductName == null) ? 0 : this.ProductName.hashCode());
								
								result = prime * result + ((this.ProductCategory == null) ? 0 : this.ProductCategory.hashCode());
								
								result = prime * result + ((this.ProductSubCategory == null) ? 0 : this.ProductSubCategory.hashCode());
								
								result = prime * result + ((this.ProductPrice == null) ? 0 : this.ProductPrice.hashCode());
								
								result = prime * result + ((this.CustomerSegment == null) ? 0 : this.CustomerSegment.hashCode());
								
								result = prime * result + ((this.SupplierName == null) ? 0 : this.SupplierName.hashCode());
								
								result = prime * result + ((this.SupplierLocation == null) ? 0 : this.SupplierLocation.hashCode());
								
								result = prime * result + ((this.ShipperName == null) ? 0 : this.ShipperName.hashCode());
								
								result = prime * result + ((this.ShippingMethod == null) ? 0 : this.ShippingMethod.hashCode());
								
								result = prime * result + ((this.QuantitySold == null) ? 0 : this.QuantitySold.hashCode());
								
								result = prime * result + ((this.TotalAmount == null) ? 0 : this.TotalAmount.hashCode());
								
								result = prime * result + ((this.DiscountAmount == null) ? 0 : this.DiscountAmount.hashCode());
								
								result = prime * result + ((this.NetAmount == null) ? 0 : this.NetAmount.hashCode());
								
								result = prime * result + ((this.StockReceived == null) ? 0 : this.StockReceived.hashCode());
								
								result = prime * result + ((this.StockSold == null) ? 0 : this.StockSold.hashCode());
								
								result = prime * result + ((this.StockOnHand == null) ? 0 : this.StockOnHand.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.Date == null) {
										if (other.Date != null) 
											return false;
								
									} else if (!this.Date.equals(other.Date))
								 
										return false;
								
									if (this.ProductName == null) {
										if (other.ProductName != null) 
											return false;
								
									} else if (!this.ProductName.equals(other.ProductName))
								 
										return false;
								
									if (this.ProductCategory == null) {
										if (other.ProductCategory != null) 
											return false;
								
									} else if (!this.ProductCategory.equals(other.ProductCategory))
								 
										return false;
								
									if (this.ProductSubCategory == null) {
										if (other.ProductSubCategory != null) 
											return false;
								
									} else if (!this.ProductSubCategory.equals(other.ProductSubCategory))
								 
										return false;
								
									if (this.ProductPrice == null) {
										if (other.ProductPrice != null) 
											return false;
								
									} else if (!this.ProductPrice.equals(other.ProductPrice))
								 
										return false;
								
									if (this.CustomerSegment == null) {
										if (other.CustomerSegment != null) 
											return false;
								
									} else if (!this.CustomerSegment.equals(other.CustomerSegment))
								 
										return false;
								
									if (this.SupplierName == null) {
										if (other.SupplierName != null) 
											return false;
								
									} else if (!this.SupplierName.equals(other.SupplierName))
								 
										return false;
								
									if (this.SupplierLocation == null) {
										if (other.SupplierLocation != null) 
											return false;
								
									} else if (!this.SupplierLocation.equals(other.SupplierLocation))
								 
										return false;
								
									if (this.ShipperName == null) {
										if (other.ShipperName != null) 
											return false;
								
									} else if (!this.ShipperName.equals(other.ShipperName))
								 
										return false;
								
									if (this.ShippingMethod == null) {
										if (other.ShippingMethod != null) 
											return false;
								
									} else if (!this.ShippingMethod.equals(other.ShippingMethod))
								 
										return false;
								
									if (this.QuantitySold == null) {
										if (other.QuantitySold != null) 
											return false;
								
									} else if (!this.QuantitySold.equals(other.QuantitySold))
								 
										return false;
								
									if (this.TotalAmount == null) {
										if (other.TotalAmount != null) 
											return false;
								
									} else if (!this.TotalAmount.equals(other.TotalAmount))
								 
										return false;
								
									if (this.DiscountAmount == null) {
										if (other.DiscountAmount != null) 
											return false;
								
									} else if (!this.DiscountAmount.equals(other.DiscountAmount))
								 
										return false;
								
									if (this.NetAmount == null) {
										if (other.NetAmount != null) 
											return false;
								
									} else if (!this.NetAmount.equals(other.NetAmount))
								 
										return false;
								
									if (this.StockReceived == null) {
										if (other.StockReceived != null) 
											return false;
								
									} else if (!this.StockReceived.equals(other.StockReceived))
								 
										return false;
								
									if (this.StockSold == null) {
										if (other.StockSold != null) 
											return false;
								
									} else if (!this.StockSold.equals(other.StockSold))
								 
										return false;
								
									if (this.StockOnHand == null) {
										if (other.StockOnHand != null) 
											return false;
								
									} else if (!this.StockOnHand.equals(other.StockOnHand))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	java.util.Date Date;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
transformedStruct transformed_tmp = new transformedStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select * from ecomStaging";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.Date = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Date = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Date = tmpContent_tDBInput_1;
                }
            } else {
                row1.Date = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.ProductName = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ProductName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ProductName = tmpContent_tDBInput_1;
                }
            } else {
                row1.ProductName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.ProductCategory = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ProductCategory = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ProductCategory = tmpContent_tDBInput_1;
                }
            } else {
                row1.ProductCategory = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.ProductSubCategory = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ProductSubCategory = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ProductSubCategory = tmpContent_tDBInput_1;
                }
            } else {
                row1.ProductSubCategory = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.ProductPrice = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ProductPrice = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ProductPrice = tmpContent_tDBInput_1;
                }
            } else {
                row1.ProductPrice = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.HashedPI = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.HashedPI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.HashedPI = tmpContent_tDBInput_1;
                }
            } else {
                row1.HashedPI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.CustomerState = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CustomerState = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CustomerState = tmpContent_tDBInput_1;
                }
            } else {
                row1.CustomerState = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.CustomerSegment = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CustomerSegment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CustomerSegment = tmpContent_tDBInput_1;
                }
            } else {
                row1.CustomerSegment = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.SupplierName = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SupplierName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.SupplierName = tmpContent_tDBInput_1;
                }
            } else {
                row1.SupplierName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.SupplierLocation = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SupplierLocation = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.SupplierLocation = tmpContent_tDBInput_1;
                }
            } else {
                row1.SupplierLocation = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.SupplierContact = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(11);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SupplierContact = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.SupplierContact = tmpContent_tDBInput_1;
                }
            } else {
                row1.SupplierContact = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.ShipperName = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(12);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ShipperName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ShipperName = tmpContent_tDBInput_1;
                }
            } else {
                row1.ShipperName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.ShippingMethod = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(13);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ShippingMethod = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ShippingMethod = tmpContent_tDBInput_1;
                }
            } else {
                row1.ShippingMethod = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.QuantitySold = null;
							} else {
		                          
            row1.QuantitySold = rs_tDBInput_1.getInt(14);
            if(rs_tDBInput_1.wasNull()){
                    row1.QuantitySold = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.TotalAmount = null;
							} else {
		                          
            row1.TotalAmount = rs_tDBInput_1.getFloat(15);
            if(rs_tDBInput_1.wasNull()){
                    row1.TotalAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.DiscountAmount = null;
							} else {
		                          
            row1.DiscountAmount = rs_tDBInput_1.getFloat(16);
            if(rs_tDBInput_1.wasNull()){
                    row1.DiscountAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.NetAmount = null;
							} else {
		                          
            row1.NetAmount = rs_tDBInput_1.getFloat(17);
            if(rs_tDBInput_1.wasNull()){
                    row1.NetAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.StockReceived = null;
							} else {
		                          
            row1.StockReceived = rs_tDBInput_1.getInt(18);
            if(rs_tDBInput_1.wasNull()){
                    row1.StockReceived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.StockSold = null;
							} else {
		                          
            row1.StockSold = rs_tDBInput_1.getInt(19);
            if(rs_tDBInput_1.wasNull()){
                    row1.StockSold = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.StockOnHand = null;
							} else {
		                          
            row1.StockOnHand = rs_tDBInput_1.getInt(20);
            if(rs_tDBInput_1.wasNull()){
                    row1.StockOnHand = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.Date = TalendDate.isDate(row1.Date, "yyyy-MM-dd") ? TalendDate.TO_DATE(row1.Date, "yyyy-MM-dd") : TalendDate.TO_DATE(row1.Date, "MM-dd-yyyy") ;// ###############################
        // ###############################
        // # Output tables

transformed = null;


// # Output table : 'transformed'
transformed_tmp.Date = Var.Date ;
transformed_tmp.ProductName = row1.ProductName ;
transformed_tmp.ProductCategory = row1.ProductCategory ;
transformed_tmp.ProductSubCategory = row1.ProductSubCategory ;
transformed_tmp.ProductPrice = Math.round(row1.TotalAmount/row1.QuantitySold)  ;
transformed_tmp.HashedPI = row1.HashedPI ;
transformed_tmp.CustomerState = row1.CustomerState ;
transformed_tmp.CustomerSegment = row1.CustomerSegment ;
transformed_tmp.SupplierName = row1.SupplierName ;
transformed_tmp.SupplierLocation = row1.SupplierLocation ;
transformed_tmp.ShipperName = row1.ShipperName ;
transformed_tmp.ShippingMethod = row1.ShippingMethod ;
transformed_tmp.QuantitySold = row1.QuantitySold ;
transformed_tmp.TotalAmount = row1.TotalAmount ;
transformed_tmp.DiscountAmount = row1.DiscountAmount ;
transformed_tmp.NetAmount = row1.NetAmount ;
transformed_tmp.StockReceived = row1.StockReceived ;
transformed_tmp.StockSold = row1.StockSold ;
transformed_tmp.StockOnHand = row1.StockOnHand ;
transformed = transformed_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "transformed"
if(transformed != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"transformed"
						
						);
					}
					
row2 = null;			
finder_tUniqRow_1.Date = transformed.Date;
if(transformed.ProductName == null){
	finder_tUniqRow_1.ProductName = null;
}else{
	finder_tUniqRow_1.ProductName = transformed.ProductName.toLowerCase();
}
if(transformed.ProductCategory == null){
	finder_tUniqRow_1.ProductCategory = null;
}else{
	finder_tUniqRow_1.ProductCategory = transformed.ProductCategory.toLowerCase();
}
if(transformed.ProductSubCategory == null){
	finder_tUniqRow_1.ProductSubCategory = null;
}else{
	finder_tUniqRow_1.ProductSubCategory = transformed.ProductSubCategory.toLowerCase();
}
finder_tUniqRow_1.ProductPrice = transformed.ProductPrice;
if(transformed.CustomerSegment == null){
	finder_tUniqRow_1.CustomerSegment = null;
}else{
	finder_tUniqRow_1.CustomerSegment = transformed.CustomerSegment.toLowerCase();
}
if(transformed.SupplierName == null){
	finder_tUniqRow_1.SupplierName = null;
}else{
	finder_tUniqRow_1.SupplierName = transformed.SupplierName.toLowerCase();
}
if(transformed.SupplierLocation == null){
	finder_tUniqRow_1.SupplierLocation = null;
}else{
	finder_tUniqRow_1.SupplierLocation = transformed.SupplierLocation.toLowerCase();
}
if(transformed.ShipperName == null){
	finder_tUniqRow_1.ShipperName = null;
}else{
	finder_tUniqRow_1.ShipperName = transformed.ShipperName.toLowerCase();
}
if(transformed.ShippingMethod == null){
	finder_tUniqRow_1.ShippingMethod = null;
}else{
	finder_tUniqRow_1.ShippingMethod = transformed.ShippingMethod.toLowerCase();
}
finder_tUniqRow_1.QuantitySold = transformed.QuantitySold;
finder_tUniqRow_1.TotalAmount = transformed.TotalAmount;
finder_tUniqRow_1.DiscountAmount = transformed.DiscountAmount;
finder_tUniqRow_1.NetAmount = transformed.NetAmount;
finder_tUniqRow_1.StockReceived = transformed.StockReceived;
finder_tUniqRow_1.StockSold = transformed.StockSold;
finder_tUniqRow_1.StockOnHand = transformed.StockOnHand;	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
new_tUniqRow_1.Date = transformed.Date;
if(transformed.ProductName == null){
	new_tUniqRow_1.ProductName = null;
}else{
	new_tUniqRow_1.ProductName = transformed.ProductName.toLowerCase();
}
if(transformed.ProductCategory == null){
	new_tUniqRow_1.ProductCategory = null;
}else{
	new_tUniqRow_1.ProductCategory = transformed.ProductCategory.toLowerCase();
}
if(transformed.ProductSubCategory == null){
	new_tUniqRow_1.ProductSubCategory = null;
}else{
	new_tUniqRow_1.ProductSubCategory = transformed.ProductSubCategory.toLowerCase();
}
new_tUniqRow_1.ProductPrice = transformed.ProductPrice;
if(transformed.CustomerSegment == null){
	new_tUniqRow_1.CustomerSegment = null;
}else{
	new_tUniqRow_1.CustomerSegment = transformed.CustomerSegment.toLowerCase();
}
if(transformed.SupplierName == null){
	new_tUniqRow_1.SupplierName = null;
}else{
	new_tUniqRow_1.SupplierName = transformed.SupplierName.toLowerCase();
}
if(transformed.SupplierLocation == null){
	new_tUniqRow_1.SupplierLocation = null;
}else{
	new_tUniqRow_1.SupplierLocation = transformed.SupplierLocation.toLowerCase();
}
if(transformed.ShipperName == null){
	new_tUniqRow_1.ShipperName = null;
}else{
	new_tUniqRow_1.ShipperName = transformed.ShipperName.toLowerCase();
}
if(transformed.ShippingMethod == null){
	new_tUniqRow_1.ShippingMethod = null;
}else{
	new_tUniqRow_1.ShippingMethod = transformed.ShippingMethod.toLowerCase();
}
new_tUniqRow_1.QuantitySold = transformed.QuantitySold;
new_tUniqRow_1.TotalAmount = transformed.TotalAmount;
new_tUniqRow_1.DiscountAmount = transformed.DiscountAmount;
new_tUniqRow_1.NetAmount = transformed.NetAmount;
new_tUniqRow_1.StockReceived = transformed.StockReceived;
new_tUniqRow_1.StockSold = transformed.StockSold;
new_tUniqRow_1.StockOnHand = transformed.StockOnHand;
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row2 == null){ 
	
	row2 = new row2Struct();
}row2.Date = transformed.Date;			row2.ProductName = transformed.ProductName;			row2.ProductCategory = transformed.ProductCategory;			row2.ProductSubCategory = transformed.ProductSubCategory;			row2.ProductPrice = transformed.ProductPrice;			row2.HashedPI = transformed.HashedPI;			row2.CustomerState = transformed.CustomerState;			row2.CustomerSegment = transformed.CustomerSegment;			row2.SupplierName = transformed.SupplierName;			row2.SupplierLocation = transformed.SupplierLocation;			row2.ShipperName = transformed.ShipperName;			row2.ShippingMethod = transformed.ShippingMethod;			row2.QuantitySold = transformed.QuantitySold;			row2.TotalAmount = transformed.TotalAmount;			row2.DiscountAmount = transformed.DiscountAmount;			row2.NetAmount = transformed.NetAmount;			row2.StockReceived = transformed.StockReceived;			row2.StockSold = transformed.StockSold;			row2.StockOnHand = transformed.StockOnHand;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row4HashKey.ProductSubCategory = row2.ProductSubCategory;
                        		    		
                        		    		    row4HashKey.CalculatedPrice = row2.ProductPrice;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.ProductSubCategory = '" + row4HashKey.ProductSubCategory + "', row4.CalculatedPrice = '" + row4HashKey.CalculatedPrice + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

FixedProduct = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'FixedProduct'
FixedProduct_tmp.Date = row2.Date ;
FixedProduct_tmp.ProductName = row4.ProductName ;
FixedProduct_tmp.ProductCategory = row4.ProductCategory ;
FixedProduct_tmp.ProductSubCategory = row2.ProductSubCategory ;
FixedProduct_tmp.ProductPrice = row2.ProductPrice ;
FixedProduct_tmp.HashedPI = row2.HashedPI ;
FixedProduct_tmp.CustomerState = row2.CustomerState ;
FixedProduct_tmp.CustomerSegment = row2.CustomerSegment ;
FixedProduct_tmp.SupplierName = row2.SupplierName ;
FixedProduct_tmp.SupplierLocation = row2.SupplierLocation ;
FixedProduct_tmp.ShipperName = row2.ShipperName ;
FixedProduct_tmp.ShippingMethod = row2.ShippingMethod ;
FixedProduct_tmp.QuantitySold = row2.QuantitySold ;
FixedProduct_tmp.TotalAmount = row2.TotalAmount ;
FixedProduct_tmp.DiscountAmount = row2.DiscountAmount ;
FixedProduct_tmp.NetAmount = row2.NetAmount ;
FixedProduct_tmp.StockReceived = row2.StockReceived ;
FixedProduct_tmp.StockSold = row2.StockSold ;
FixedProduct_tmp.StockOnHand = row2.StockOnHand ;
FixedProduct = FixedProduct_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "FixedProduct"
if(FixedProduct != null) { 



	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"FixedProduct"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"","","","","","","","","","","","","","","","","","","",};		
	    if(FixedProduct.Date != null){
	        
	            row_tBufferOutput_1[0] = FormatterUtils.format_Date(FixedProduct.Date, "dd-MM-yyyy");
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(FixedProduct.ProductName != null){
	        
	            row_tBufferOutput_1[1] = FixedProduct.ProductName;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	    if(FixedProduct.ProductCategory != null){
	        
	            row_tBufferOutput_1[2] = FixedProduct.ProductCategory;
	                        			    
	    }else{
	    	row_tBufferOutput_1[2] = null;
	    }
	    if(FixedProduct.ProductSubCategory != null){
	        
	            row_tBufferOutput_1[3] = FixedProduct.ProductSubCategory;
	                        			    
	    }else{
	    	row_tBufferOutput_1[3] = null;
	    }
	    if(FixedProduct.ProductPrice != null){
	        
	            row_tBufferOutput_1[4] = String.valueOf(FixedProduct.ProductPrice);
	                        			    
	    }else{
	    	row_tBufferOutput_1[4] = null;
	    }
	    if(FixedProduct.HashedPI != null){
	        
	            row_tBufferOutput_1[5] = FixedProduct.HashedPI;
	                        			    
	    }else{
	    	row_tBufferOutput_1[5] = null;
	    }
	    if(FixedProduct.CustomerState != null){
	        
	            row_tBufferOutput_1[6] = FixedProduct.CustomerState;
	                        			    
	    }else{
	    	row_tBufferOutput_1[6] = null;
	    }
	    if(FixedProduct.CustomerSegment != null){
	        
	            row_tBufferOutput_1[7] = FixedProduct.CustomerSegment;
	                        			    
	    }else{
	    	row_tBufferOutput_1[7] = null;
	    }
	    if(FixedProduct.SupplierName != null){
	        
	            row_tBufferOutput_1[8] = FixedProduct.SupplierName;
	                        			    
	    }else{
	    	row_tBufferOutput_1[8] = null;
	    }
	    if(FixedProduct.SupplierLocation != null){
	        
	            row_tBufferOutput_1[9] = FixedProduct.SupplierLocation;
	                        			    
	    }else{
	    	row_tBufferOutput_1[9] = null;
	    }
	    if(FixedProduct.ShipperName != null){
	        
	            row_tBufferOutput_1[10] = FixedProduct.ShipperName;
	                        			    
	    }else{
	    	row_tBufferOutput_1[10] = null;
	    }
	    if(FixedProduct.ShippingMethod != null){
	        
	            row_tBufferOutput_1[11] = FixedProduct.ShippingMethod;
	                        			    
	    }else{
	    	row_tBufferOutput_1[11] = null;
	    }
	    if(FixedProduct.QuantitySold != null){
	        
	            row_tBufferOutput_1[12] = String.valueOf(FixedProduct.QuantitySold);
	                        			    
	    }else{
	    	row_tBufferOutput_1[12] = null;
	    }
	    if(FixedProduct.TotalAmount != null){
	        
	            row_tBufferOutput_1[13] = String.valueOf(FixedProduct.TotalAmount);
	                        			    
	    }else{
	    	row_tBufferOutput_1[13] = null;
	    }
	    if(FixedProduct.DiscountAmount != null){
	        
	            row_tBufferOutput_1[14] = String.valueOf(FixedProduct.DiscountAmount);
	                        			    
	    }else{
	    	row_tBufferOutput_1[14] = null;
	    }
	    if(FixedProduct.NetAmount != null){
	        
	            row_tBufferOutput_1[15] = String.valueOf(FixedProduct.NetAmount);
	                        			    
	    }else{
	    	row_tBufferOutput_1[15] = null;
	    }
	    if(FixedProduct.StockReceived != null){
	        
	            row_tBufferOutput_1[16] = String.valueOf(FixedProduct.StockReceived);
	                        			    
	    }else{
	    	row_tBufferOutput_1[16] = null;
	    }
	    if(FixedProduct.StockSold != null){
	        
	            row_tBufferOutput_1[17] = String.valueOf(FixedProduct.StockSold);
	                        			    
	    }else{
	    	row_tBufferOutput_1[17] = null;
	    }
	    if(FixedProduct.StockOnHand != null){
	        
	            row_tBufferOutput_1[18] = String.valueOf(FixedProduct.StockOnHand);
	                        			    
	    }else{
	    	row_tBufferOutput_1[18] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */

} // End of branch "FixedProduct"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "transformed"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"transformed");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"FixedProduct");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_transformation = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_transformation = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductSubCategory;

				public String getProductSubCategory () {
					return this.ProductSubCategory;
				}
				
			    public Integer CalculatedPrice;

				public Integer getCalculatedPrice () {
					return this.CalculatedPrice;
				}
				
			    public String ProductCategory;

				public String getProductCategory () {
					return this.ProductCategory;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ProductSubCategory == null) ? 0 : this.ProductSubCategory.hashCode());
					
						result = prime * result + ((this.CalculatedPrice == null) ? 0 : this.CalculatedPrice.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.ProductSubCategory == null) {
							if (other.ProductSubCategory != null)
								return false;
						
						} else if (!this.ProductSubCategory.equals(other.ProductSubCategory))
						
							return false;
					
						if (this.CalculatedPrice == null) {
							if (other.CalculatedPrice != null)
								return false;
						
						} else if (!this.CalculatedPrice.equals(other.CalculatedPrice))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.ProductName = this.ProductName;
	            other.ProductSubCategory = this.ProductSubCategory;
	            other.CalculatedPrice = this.CalculatedPrice;
	            other.ProductCategory = this.ProductCategory;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.ProductSubCategory = this.ProductSubCategory;
	            	other.CalculatedPrice = this.CalculatedPrice;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.ProductSubCategory = readString(dis);
					
						this.CalculatedPrice = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.ProductSubCategory = readString(dis);
					
						this.CalculatedPrice = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// Integer
				
						writeInteger(this.CalculatedPrice,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// Integer
				
						writeInteger(this.CalculatedPrice,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ProductName = readString(dis,ois);
					
						this.ProductCategory = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.ProductName = readString(dis,objectIn);
					
						this.ProductCategory = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ProductName, dos, oos);
					
						writeString(this.ProductCategory, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.ProductName, dos, objectOut);
					
						writeString(this.ProductCategory, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductName="+ProductName);
		sb.append(",ProductSubCategory="+ProductSubCategory);
		sb.append(",CalculatedPrice="+String.valueOf(CalculatedPrice));
		sb.append(",ProductCategory="+ProductCategory);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductSubCategory, other.ProductSubCategory);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CalculatedPrice, other.CalculatedPrice);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOftransformedStruct implements routines.system.IPersistableRow<copyOftransformedStruct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_transformation = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_transformation = new byte[0];

	
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductSubCategory;

				public String getProductSubCategory () {
					return this.ProductSubCategory;
				}
				
			    public Integer CalculatedPrice;

				public Integer getCalculatedPrice () {
					return this.CalculatedPrice;
				}
				
			    public String ProductCategory;

				public String getProductCategory () {
					return this.ProductCategory;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.ProductName = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
						this.CalculatedPrice = readInteger(dis);
					
					this.ProductCategory = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.ProductName = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
						this.CalculatedPrice = readInteger(dis);
					
					this.ProductCategory = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// Integer
				
						writeInteger(this.CalculatedPrice,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// Integer
				
						writeInteger(this.CalculatedPrice,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductName="+ProductName);
		sb.append(",ProductSubCategory="+ProductSubCategory);
		sb.append(",CalculatedPrice="+String.valueOf(CalculatedPrice));
		sb.append(",ProductCategory="+ProductCategory);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOftransformedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ECOMEVALUATION_transformation = new byte[0];
    static byte[] commonByteArray_ECOMEVALUATION_transformation = new byte[0];

	
			    public String Date;

				public String getDate () {
					return this.Date;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductCategory;

				public String getProductCategory () {
					return this.ProductCategory;
				}
				
			    public String ProductSubCategory;

				public String getProductSubCategory () {
					return this.ProductSubCategory;
				}
				
			    public String ProductPrice;

				public String getProductPrice () {
					return this.ProductPrice;
				}
				
			    public String HashedPI;

				public String getHashedPI () {
					return this.HashedPI;
				}
				
			    public String CustomerState;

				public String getCustomerState () {
					return this.CustomerState;
				}
				
			    public String CustomerSegment;

				public String getCustomerSegment () {
					return this.CustomerSegment;
				}
				
			    public String SupplierName;

				public String getSupplierName () {
					return this.SupplierName;
				}
				
			    public String SupplierLocation;

				public String getSupplierLocation () {
					return this.SupplierLocation;
				}
				
			    public String SupplierContact;

				public String getSupplierContact () {
					return this.SupplierContact;
				}
				
			    public String ShipperName;

				public String getShipperName () {
					return this.ShipperName;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public Integer QuantitySold;

				public Integer getQuantitySold () {
					return this.QuantitySold;
				}
				
			    public Float TotalAmount;

				public Float getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public Float DiscountAmount;

				public Float getDiscountAmount () {
					return this.DiscountAmount;
				}
				
			    public Float NetAmount;

				public Float getNetAmount () {
					return this.NetAmount;
				}
				
			    public Integer StockReceived;

				public Integer getStockReceived () {
					return this.StockReceived;
				}
				
			    public Integer StockSold;

				public Integer getStockSold () {
					return this.StockSold;
				}
				
			    public Integer StockOnHand;

				public Integer getStockOnHand () {
					return this.StockOnHand;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ECOMEVALUATION_transformation.length) {
				if(length < 1024 && commonByteArray_ECOMEVALUATION_transformation.length == 0) {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[1024];
				} else {
   					commonByteArray_ECOMEVALUATION_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ECOMEVALUATION_transformation, 0, length);
			strReturn = new String(commonByteArray_ECOMEVALUATION_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readString(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
					this.ProductPrice = readString(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.SupplierContact = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ECOMEVALUATION_transformation) {

        	try {

        		int length = 0;
		
					this.Date = readString(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductCategory = readString(dis);
					
					this.ProductSubCategory = readString(dis);
					
					this.ProductPrice = readString(dis);
					
					this.HashedPI = readString(dis);
					
					this.CustomerState = readString(dis);
					
					this.CustomerSegment = readString(dis);
					
					this.SupplierName = readString(dis);
					
					this.SupplierLocation = readString(dis);
					
					this.SupplierContact = readString(dis);
					
					this.ShipperName = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
						this.QuantitySold = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TotalAmount = null;
           				} else {
           			    	this.TotalAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DiscountAmount = null;
           				} else {
           			    	this.DiscountAmount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NetAmount = null;
           				} else {
           			    	this.NetAmount = dis.readFloat();
           				}
					
						this.StockReceived = readInteger(dis);
					
						this.StockSold = readInteger(dis);
					
						this.StockOnHand = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// String
				
						writeString(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.SupplierContact,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Date,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductCategory,dos);
					
					// String
				
						writeString(this.ProductSubCategory,dos);
					
					// String
				
						writeString(this.ProductPrice,dos);
					
					// String
				
						writeString(this.HashedPI,dos);
					
					// String
				
						writeString(this.CustomerState,dos);
					
					// String
				
						writeString(this.CustomerSegment,dos);
					
					// String
				
						writeString(this.SupplierName,dos);
					
					// String
				
						writeString(this.SupplierLocation,dos);
					
					// String
				
						writeString(this.SupplierContact,dos);
					
					// String
				
						writeString(this.ShipperName,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// Integer
				
						writeInteger(this.QuantitySold,dos);
					
					// Float
				
						if(this.TotalAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TotalAmount);
		            	}
					
					// Float
				
						if(this.DiscountAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DiscountAmount);
		            	}
					
					// Float
				
						if(this.NetAmount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NetAmount);
		            	}
					
					// Integer
				
						writeInteger(this.StockReceived,dos);
					
					// Integer
				
						writeInteger(this.StockSold,dos);
					
					// Integer
				
						writeInteger(this.StockOnHand,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date="+Date);
		sb.append(",ProductName="+ProductName);
		sb.append(",ProductCategory="+ProductCategory);
		sb.append(",ProductSubCategory="+ProductSubCategory);
		sb.append(",ProductPrice="+ProductPrice);
		sb.append(",HashedPI="+HashedPI);
		sb.append(",CustomerState="+CustomerState);
		sb.append(",CustomerSegment="+CustomerSegment);
		sb.append(",SupplierName="+SupplierName);
		sb.append(",SupplierLocation="+SupplierLocation);
		sb.append(",SupplierContact="+SupplierContact);
		sb.append(",ShipperName="+ShipperName);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",QuantitySold="+String.valueOf(QuantitySold));
		sb.append(",TotalAmount="+String.valueOf(TotalAmount));
		sb.append(",DiscountAmount="+String.valueOf(DiscountAmount));
		sb.append(",NetAmount="+String.valueOf(NetAmount));
		sb.append(",StockReceived="+String.valueOf(StockReceived));
		sb.append(",StockSold="+String.valueOf(StockSold));
		sb.append(",StockOnHand="+String.valueOf(StockOnHand));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
copyOftransformedStruct copyOftransformed = new copyOftransformedStruct();
row4Struct row4 = new row4Struct();






	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tUniqRow_2 - inputs:(copyOftransformed) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_3 - inputs:(row2,row4) outputs:(FixedProduct)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOftransformed");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ProductSubCategory;
					Integer CalculatedPrice;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ProductSubCategory == null) ? 0 : this.ProductSubCategory.hashCode());
								
								result = prime * result + ((this.CalculatedPrice == null) ? 0 : this.CalculatedPrice.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.ProductSubCategory == null) {
										if (other.ProductSubCategory != null) 
											return false;
								
									} else if (!this.ProductSubCategory.equals(other.ProductSubCategory))
								 
										return false;
								
									if (this.CalculatedPrice == null) {
										if (other.CalculatedPrice != null) 
											return false;
								
									} else if (!this.CalculatedPrice.equals(other.CalculatedPrice))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOftransformedStruct copyOftransformed_tmp = new copyOftransformedStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_2 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select * from ecomStaging";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row5.Date = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.Date = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.Date = tmpContent_tDBInput_2;
                }
            } else {
                row5.Date = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row5.ProductName = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.ProductName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.ProductName = tmpContent_tDBInput_2;
                }
            } else {
                row5.ProductName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row5.ProductCategory = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.ProductCategory = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.ProductCategory = tmpContent_tDBInput_2;
                }
            } else {
                row5.ProductCategory = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row5.ProductSubCategory = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.ProductSubCategory = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.ProductSubCategory = tmpContent_tDBInput_2;
                }
            } else {
                row5.ProductSubCategory = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row5.ProductPrice = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(5);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.ProductPrice = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.ProductPrice = tmpContent_tDBInput_2;
                }
            } else {
                row5.ProductPrice = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row5.HashedPI = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(6);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.HashedPI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.HashedPI = tmpContent_tDBInput_2;
                }
            } else {
                row5.HashedPI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row5.CustomerState = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(7);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.CustomerState = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.CustomerState = tmpContent_tDBInput_2;
                }
            } else {
                row5.CustomerState = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row5.CustomerSegment = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(8);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.CustomerSegment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.CustomerSegment = tmpContent_tDBInput_2;
                }
            } else {
                row5.CustomerSegment = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row5.SupplierName = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(9);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.SupplierName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.SupplierName = tmpContent_tDBInput_2;
                }
            } else {
                row5.SupplierName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row5.SupplierLocation = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.SupplierLocation = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.SupplierLocation = tmpContent_tDBInput_2;
                }
            } else {
                row5.SupplierLocation = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row5.SupplierContact = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(11);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.SupplierContact = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.SupplierContact = tmpContent_tDBInput_2;
                }
            } else {
                row5.SupplierContact = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row5.ShipperName = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(12);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.ShipperName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.ShipperName = tmpContent_tDBInput_2;
                }
            } else {
                row5.ShipperName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row5.ShippingMethod = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(13);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.ShippingMethod = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.ShippingMethod = tmpContent_tDBInput_2;
                }
            } else {
                row5.ShippingMethod = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row5.QuantitySold = null;
							} else {
		                          
            row5.QuantitySold = rs_tDBInput_2.getInt(14);
            if(rs_tDBInput_2.wasNull()){
                    row5.QuantitySold = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row5.TotalAmount = null;
							} else {
		                          
            row5.TotalAmount = rs_tDBInput_2.getFloat(15);
            if(rs_tDBInput_2.wasNull()){
                    row5.TotalAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row5.DiscountAmount = null;
							} else {
		                          
            row5.DiscountAmount = rs_tDBInput_2.getFloat(16);
            if(rs_tDBInput_2.wasNull()){
                    row5.DiscountAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row5.NetAmount = null;
							} else {
		                          
            row5.NetAmount = rs_tDBInput_2.getFloat(17);
            if(rs_tDBInput_2.wasNull()){
                    row5.NetAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row5.StockReceived = null;
							} else {
		                          
            row5.StockReceived = rs_tDBInput_2.getInt(18);
            if(rs_tDBInput_2.wasNull()){
                    row5.StockReceived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row5.StockSold = null;
							} else {
		                          
            row5.StockSold = rs_tDBInput_2.getInt(19);
            if(rs_tDBInput_2.wasNull()){
                    row5.StockSold = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row5.StockOnHand = null;
							} else {
		                          
            row5.StockOnHand = rs_tDBInput_2.getInt(20);
            if(rs_tDBInput_2.wasNull()){
                    row5.StockOnHand = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOftransformed = null;


// # Output table : 'copyOftransformed'
// # Filter conditions 
if( 

row5.ProductName != "NonExistentProduct" && row5.ProductCategory != "InvalidCategory"

 ) {
copyOftransformed_tmp.ProductName = row5.ProductName ;
copyOftransformed_tmp.ProductSubCategory = row5.ProductSubCategory ;
copyOftransformed_tmp.CalculatedPrice = Math.round(row5.TotalAmount/row5.QuantitySold) ;
copyOftransformed_tmp.ProductCategory = row5.ProductCategory ;
copyOftransformed = copyOftransformed_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOftransformed"
if(copyOftransformed != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOftransformed"
						
						);
					}
					
row4 = null;			row4 = null;			
if(copyOftransformed.ProductSubCategory == null){
	finder_tUniqRow_2.ProductSubCategory = null;
}else{
	finder_tUniqRow_2.ProductSubCategory = copyOftransformed.ProductSubCategory.toLowerCase();
}
finder_tUniqRow_2.CalculatedPrice = copyOftransformed.CalculatedPrice;	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(copyOftransformed.ProductSubCategory == null){
	new_tUniqRow_2.ProductSubCategory = null;
}else{
	new_tUniqRow_2.ProductSubCategory = copyOftransformed.ProductSubCategory.toLowerCase();
}
new_tUniqRow_2.CalculatedPrice = copyOftransformed.CalculatedPrice;
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row4 == null){ 
	
	row4 = new row4Struct();
}row4.ProductName = copyOftransformed.ProductName;			row4.ProductSubCategory = copyOftransformed.ProductSubCategory;			row4.CalculatedPrice = copyOftransformed.CalculatedPrice;			row4.ProductCategory = copyOftransformed.ProductCategory;			if(row4 == null){ 
	
	row4 = new row4Struct();
}row4.ProductName = copyOftransformed.ProductName;			row4.ProductSubCategory = copyOftransformed.ProductSubCategory;			row4.CalculatedPrice = copyOftransformed.CalculatedPrice;			row4.ProductCategory = copyOftransformed.ProductCategory;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.ProductName = row4.ProductName;
				
				row4_HashRow.ProductSubCategory = row4.ProductSubCategory;
				
				row4_HashRow.CalculatedPrice = row4.CalculatedPrice;
				
				row4_HashRow.ProductCategory = row4.ProductCategory;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "copyOftransformed"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOftransformed");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final transformation transformationClass = new transformation();

        int exitCode = transformationClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = transformation.class.getClassLoader().getResourceAsStream("ecomevaluation/transformation_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = transformation.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ecom_eval_staging_Password", "id_Password");
                        if(context.getStringValue("ecom_eval_staging_Password") == null) {
                            context.ecom_eval_staging_Password = null;
                        } else {
                            String pwd_ecom_eval_staging_Password_value = context.getProperty("ecom_eval_staging_Password");
                            context.ecom_eval_staging_Password = null;
                            if(pwd_ecom_eval_staging_Password_value!=null) {
                                if(context_param.containsKey("ecom_eval_staging_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.ecom_eval_staging_Password = pwd_ecom_eval_staging_Password_value;
                                } else if (!pwd_ecom_eval_staging_Password_value.isEmpty()) {
                                    try {
                                        context.ecom_eval_staging_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ecom_eval_staging_Password_value);
                                        context.put("ecom_eval_staging_Password",context.ecom_eval_staging_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("ecom_eval_staging_Server", "id_String");
                        if(context.getStringValue("ecom_eval_staging_Server") == null) {
                            context.ecom_eval_staging_Server = null;
                        } else {
                            context.ecom_eval_staging_Server=(String) context.getProperty("ecom_eval_staging_Server");
                        }
                        context.setContextType("ecom_eval_staging_Database", "id_String");
                        if(context.getStringValue("ecom_eval_staging_Database") == null) {
                            context.ecom_eval_staging_Database = null;
                        } else {
                            context.ecom_eval_staging_Database=(String) context.getProperty("ecom_eval_staging_Database");
                        }
                        context.setContextType("ecom_eval_staging_Schema", "id_String");
                        if(context.getStringValue("ecom_eval_staging_Schema") == null) {
                            context.ecom_eval_staging_Schema = null;
                        } else {
                            context.ecom_eval_staging_Schema=(String) context.getProperty("ecom_eval_staging_Schema");
                        }
                        context.setContextType("ecom_eval_staging_Login", "id_String");
                        if(context.getStringValue("ecom_eval_staging_Login") == null) {
                            context.ecom_eval_staging_Login = null;
                        } else {
                            context.ecom_eval_staging_Login=(String) context.getProperty("ecom_eval_staging_Login");
                        }
                        context.setContextType("ecom_eval_staging_AdditionalParams", "id_String");
                        if(context.getStringValue("ecom_eval_staging_AdditionalParams") == null) {
                            context.ecom_eval_staging_AdditionalParams = null;
                        } else {
                            context.ecom_eval_staging_AdditionalParams=(String) context.getProperty("ecom_eval_staging_AdditionalParams");
                        }
                        context.setContextType("ecom_eval_staging_Port", "id_String");
                        if(context.getStringValue("ecom_eval_staging_Port") == null) {
                            context.ecom_eval_staging_Port = null;
                        } else {
                            context.ecom_eval_staging_Port=(String) context.getProperty("ecom_eval_staging_Port");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ecom_eval_staging_Password")) {
                context.ecom_eval_staging_Password = (java.lang.String) parentContextMap.get("ecom_eval_staging_Password");
            }if (parentContextMap.containsKey("ecom_eval_staging_Server")) {
                context.ecom_eval_staging_Server = (String) parentContextMap.get("ecom_eval_staging_Server");
            }if (parentContextMap.containsKey("ecom_eval_staging_Database")) {
                context.ecom_eval_staging_Database = (String) parentContextMap.get("ecom_eval_staging_Database");
            }if (parentContextMap.containsKey("ecom_eval_staging_Schema")) {
                context.ecom_eval_staging_Schema = (String) parentContextMap.get("ecom_eval_staging_Schema");
            }if (parentContextMap.containsKey("ecom_eval_staging_Login")) {
                context.ecom_eval_staging_Login = (String) parentContextMap.get("ecom_eval_staging_Login");
            }if (parentContextMap.containsKey("ecom_eval_staging_AdditionalParams")) {
                context.ecom_eval_staging_AdditionalParams = (String) parentContextMap.get("ecom_eval_staging_AdditionalParams");
            }if (parentContextMap.containsKey("ecom_eval_staging_Port")) {
                context.ecom_eval_staging_Port = (String) parentContextMap.get("ecom_eval_staging_Port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("ecom_eval_staging_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : transformation");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     243285 characters generated by Talend Open Studio for Data Integration 
 *     on the October 7, 2023 at 10:40:11 PM WEST
 ************************************************************************************************/